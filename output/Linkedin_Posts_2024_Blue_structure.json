{
  "title": "Untitled Document",
  "outline": [
    {
      "heading": "The following books are available in paperback on Amazon:",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Big Endian vs Little Endian​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How do we incorporate Event Sourcing into the systems?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How can Cache Systems go wrong​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Linux file system explained​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "My recommended materials for cracking your next technical interview​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How Git Commands work​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Top 4 Most Popular Use Cases for UDP​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How Does a Typical Push Notification System Work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How can Cache Systems go wrong?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "REST API Cheatsheet​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Top 8 Programming Paradigms - Part 1​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Data Pipelines Overview​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "API Vs SDK​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "A handy cheat sheet for the most popular cloud services​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "A nice cheat sheet of different monitoring infrastructure in cloud services​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "REST API Vs. GraphQL​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Key Use Cases for Load Balancers​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Top 6 Firewall Use Cases​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Types of memory. Which ones do you know?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How Do C++, Java, Python Work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Top 6 Load Balancing Algorithms​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How does Git work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "HTTP Cookies Explained With a Simple Diagram​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How does a ChatGPT-like system work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "A cheat sheet for system designs​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Cloud Disaster Recovery Strategies​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Visualizing a SQL query​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How does REST API work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Explaining 9 types of API testing​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Git Merge vs. Rebase vs.Squash Commit!​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "What is a cookie?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How does a VPN work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Top Software Architectural Styles​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Understanding Database Types​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Cloud Security Cheat Sheet​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "GitOps Workflow - Simplified Visual Guide​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How does “scan to pay” work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How do Search Engines Work?​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "The Payments Ecosystem​",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Object-oriented Programming: A Primer​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Where do we cache data?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Flowchart of how slack decides to send a notification​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What is the best way to learn SQL?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What is gRPC?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do live streaming platforms like YouTube Live, TikTok Live, or Twitch work?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Linux Boot Process Illustrated​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How does Visa make money?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Session, Cookie, JWT, Token, SSO, and OAuth 2.0 Explained in One Diagram​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do we manage configurations in a system?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What is CSS (Cascading Style Sheets)?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What is GraphQL? Is it a replacement for the REST API?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "System Design Blueprint: The Ultimate Guide​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Polling Vs Webhooks​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How are notifications pushed to our phones or PCs?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "9 best practices for developing microservices​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "101",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Oauth 2.0 Explained With Simple Terms​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "102",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do companies ship code to production?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "104",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do we manage sensitive data in a system?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "106",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Cloud Load Balancer Cheat Sheet​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "108",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What does ACID mean?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "110",
      "level": 3,
      "page": 4
    },
    {
      "heading": "CAP, BASE, SOLID, KISS, What do these acronyms mean?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "112",
      "level": 3,
      "page": 4
    },
    {
      "heading": "System Design cheat sheet​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "114",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How will you design the Stack Overflow website?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "116",
      "level": 3,
      "page": 4
    },
    {
      "heading": "A nice cheat sheet of different cloud services​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "118",
      "level": 3,
      "page": 4
    },
    {
      "heading": "The one-line change that reduced clone times by a whopping 99%, says Pinterest​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "120",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Best ways to test system functionality​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "122",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Encoding vs Encryption vs Tokenization​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Encoding, encryption, and tokenization are three distinct processes that handle data in different",
      "level": 3,
      "page": 4
    },
    {
      "heading": "ways for various purposes, including data transmission, security, and compliance.​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "124",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Kubernetes Tools Stack Wheel​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "126",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How does Docker work?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "128",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Top 6 Database Models​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "130",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do we detect node failures in distributed systems?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "132",
      "level": 3,
      "page": 4
    },
    {
      "heading": "10 Good Coding Principles to improve code quality​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "134",
      "level": 3,
      "page": 4
    },
    {
      "heading": "15 Open-Source Projects That Changed the World​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "136",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Reverse proxy vs. API gateway vs. load balancer​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "138",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Linux Performance Observability Tools​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "140",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Top 9 website performance metrics you cannot ignore​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "141",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do we manage data?​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "143",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Postman vs. Insomnia vs. ReadyAPI vs. Thunder Client vs. Hoppscotch​",
      "level": 3,
      "page": 4
    },
    {
      "heading": "145",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How does gRPC work?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "RPC (Remote Procedure Call) is called “𝐫𝐞𝐦𝐨𝐭𝐞” because it enables communications between",
      "level": 3,
      "page": 5
    },
    {
      "heading": "remote services when services are deployed to different servers under microservice",
      "level": 3,
      "page": 5
    },
    {
      "heading": "architecture. From the user’s point of view, it acts like a local function call.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "147",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Have you heard of the 12-Factor App?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "151",
      "level": 3,
      "page": 5
    },
    {
      "heading": "How does Redis architecture evolve?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "153",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Cloud Cost Reduction Techniques​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "155",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Linux file permission illustrated​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "157",
      "level": 3,
      "page": 5
    },
    {
      "heading": "My Top 9 Favorite Engineering Blogs​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "158",
      "level": 3,
      "page": 5
    },
    {
      "heading": "9 Best Practices for Building Microservices​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "160",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Roadmap for Learning Cyber Security​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "162",
      "level": 3,
      "page": 5
    },
    {
      "heading": "How does Javascript Work?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "163",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Can Kafka Lose Messages?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "165",
      "level": 3,
      "page": 5
    },
    {
      "heading": "You're Decent at Linux if You Know What Those Directories Mean :)​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "167",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Netflix's Tech Stack​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "169",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 5 Kafka use cases​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "171",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 6 Cloud Messaging Patterns.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "172",
      "level": 3,
      "page": 5
    },
    {
      "heading": "How Netflix Really Uses Java?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "175",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 9 Architectural Patterns for Data and Communication Flow​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "177",
      "level": 3,
      "page": 5
    },
    {
      "heading": "What Are the Most Important AWS Services To Learn?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "179",
      "level": 3,
      "page": 5
    },
    {
      "heading": "8 Key Data Structures That Power Modern Databases​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "181",
      "level": 3,
      "page": 5
    },
    {
      "heading": "How do we design effective and safe APIs?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "182",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Who are the Fantastic Four of System Design?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "183",
      "level": 3,
      "page": 5
    },
    {
      "heading": "How do we design a secure system?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "185",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Things Every Developer Should Know: Concurrency is NOT parallelism.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "187",
      "level": 3,
      "page": 5
    },
    {
      "heading": "HTTPS, SSL Handshake, and Data Encryption Explained to Kids.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "189",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 5 Software Architectural Patterns​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "191",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 6 Tools to Turn Code into Beautiful Diagrams​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "193",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Everything is a trade-off.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "194",
      "level": 3,
      "page": 5
    },
    {
      "heading": "What is DevSecOps?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "196",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 8 Cache Eviction Strategies.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "198",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Linux Boot Process Explained​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "200",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Unusual Evolution of the Netflix API Architecture​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "202",
      "level": 3,
      "page": 5
    },
    {
      "heading": "GET, POST, PUT... Common HTTP “verbs” in one figure​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "204",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 8 C++ Use Cases​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "206",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Top 4 data sharding algorithms explained.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "208",
      "level": 3,
      "page": 5
    },
    {
      "heading": "10 years ago, Amazon found that every 100ms of latency cost them 1% in sales.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "210",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Load Balancer Realistic Use Cases You May Not Know​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "212",
      "level": 3,
      "page": 5
    },
    {
      "heading": "25 Papers That Completely Transformed the Computer World.​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "214",
      "level": 3,
      "page": 5
    },
    {
      "heading": "IPv4 vs. IPv6, what are the differences?​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "216",
      "level": 3,
      "page": 5
    },
    {
      "heading": "My Favorite 10 Books for Software Developers​",
      "level": 3,
      "page": 5
    },
    {
      "heading": "218",
      "level": 3,
      "page": 5
    },
    {
      "heading": "Change Data Capture: Key to Leverage Real-Time Data​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "220",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Netflix's Overall Architecture​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "222",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 5 common ways to improve API performance.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "224",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How to diagnose a mysterious process that’s taking too much CPU, memory, IO, etc?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "226",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What is a deadlock?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "227",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What’s the difference between Session-based authentication and JWTs?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "229",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 9 Cases Behind 100% CPU Usage.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "231",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 6 ElasticSearch Use Cases.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "233",
      "level": 3,
      "page": 6
    },
    {
      "heading": "AWS Services Cheat Sheet​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "235",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How do computer programs run?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "236",
      "level": 3,
      "page": 6
    },
    {
      "heading": "A cheat sheet for API designs.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "238",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Azure Services Cheat Sheet​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "240",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Why is Kafka fast?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "241",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How do we retry on failures?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "243",
      "level": 3,
      "page": 6
    },
    {
      "heading": "7 must-know strategies to scale your database.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "245",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Reddit’s Core Architecture that helps it serve over 1 billion users every month.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "247",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Everything You Need to Know About Cross-Site Scripting (XSS).​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "249",
      "level": 3,
      "page": 6
    },
    {
      "heading": "15 Open-Source Projects That Changed the World​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "251",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Types of Memory and Storage​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "253",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How to load your websites at lightning speed?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "254",
      "level": 3,
      "page": 6
    },
    {
      "heading": "25 Papers That Completely Transformed the Computer World.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "256",
      "level": 3,
      "page": 6
    },
    {
      "heading": "10 Essential Components of a Production Web Application.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "258",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 8 Standards Every Developer Should Know.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "259",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Explaining JSON Web Token (JWT) with simple terms.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "261",
      "level": 3,
      "page": 6
    },
    {
      "heading": "11 steps to go from Junior to Senior Developer.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "262",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 8 must-know Docker concepts​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "264",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 10 Most Popular Open-Source Databases​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "266",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What does a typical microservice architecture look like?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "267",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What is SSO (Single Sign-On)?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "269",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What makes HTTP2 faster than HTTP1?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "271",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Log Parsing Cheat Sheet​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "273",
      "level": 3,
      "page": 6
    },
    {
      "heading": "4 Ways Netflix Uses Caching to Hold User Attention​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "275",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Top 6 Cases to Apply Idempotency.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "277",
      "level": 3,
      "page": 6
    },
    {
      "heading": "MVC, MVP, MVVM, MVVM-C, and VIPER architecture patterns​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "279",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What are the differences among database locks?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "280",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How do we Perform Pagination in API Design?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "282",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What happens when you type a URL into your browser?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "284",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How do you pay from your digital wallet by scanning the QR code?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "286",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What do Amazon, Netflix, and Uber have in common?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "288",
      "level": 3,
      "page": 6
    },
    {
      "heading": "100X Postgres Scaling at Figma.​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "290",
      "level": 3,
      "page": 6
    },
    {
      "heading": "How to store passwords safely in the database and how to validate a password?​",
      "level": 3,
      "page": 6
    },
    {
      "heading": "292",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Cybersecurity 101 in one picture.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "294",
      "level": 3,
      "page": 7
    },
    {
      "heading": "What do version numbers mean?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "295",
      "level": 3,
      "page": 7
    },
    {
      "heading": "What is k8s (Kubernetes)?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "297",
      "level": 3,
      "page": 7
    },
    {
      "heading": "HTTP Status Code You Should Know​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "299",
      "level": 3,
      "page": 7
    },
    {
      "heading": "18 Most-used Linux Commands You Should Know​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "300",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Iterative, Agile, Waterfall, Spiral Model, RAD Model... What are the differences?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "302",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Design Patterns Cheat Sheet - Part 1 and Part 2​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "304",
      "level": 3,
      "page": 7
    },
    {
      "heading": "9 Essential Components of a Production Microservice Application​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "305",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Which latency numbers you should know?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "307",
      "level": 3,
      "page": 7
    },
    {
      "heading": "API Gateway 101​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "309",
      "level": 3,
      "page": 7
    },
    {
      "heading": "A Roadmap for Full-Stack Development.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "310",
      "level": 3,
      "page": 7
    },
    {
      "heading": "OAuth 2.0 Flows​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "312",
      "level": 3,
      "page": 7
    },
    {
      "heading": "10 Key Data Structures We Use Every Day​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "313",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Top 10 k8s Design Patterns​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "315",
      "level": 3,
      "page": 7
    },
    {
      "heading": "What is a Load Balancer?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "317",
      "level": 3,
      "page": 7
    },
    {
      "heading": "8 Common System Design Problems and Solutions​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "319",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How does SSH work?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "321",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How to load your websites at lightning speed?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "322",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Why is Nginx so popular?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "324",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How Discord Stores Trillions of Messages​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "325",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How does Garbage Collection work?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "327",
      "level": 3,
      "page": 7
    },
    {
      "heading": "A Cheat Sheet for Designing Fault-Tolerant Systems.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "329",
      "level": 3,
      "page": 7
    },
    {
      "heading": "If you don’t know trade-offs, you DON'T KNOW system design.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "331",
      "level": 3,
      "page": 7
    },
    {
      "heading": "8 Tips for Efficient API Design.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "333",
      "level": 3,
      "page": 7
    },
    {
      "heading": "The Ultimate Kafka 101 You Cannot Miss​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "335",
      "level": 3,
      "page": 7
    },
    {
      "heading": "A Cheatsheet for UML Class Diagrams​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "336",
      "level": 3,
      "page": 7
    },
    {
      "heading": "20 Popular Open Source Projects Started or Supported By Big Companies​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "339",
      "level": 3,
      "page": 7
    },
    {
      "heading": "A Crash Course on Database Sharding​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "341",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Is PostgreSQL eating the database world?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "343",
      "level": 3,
      "page": 7
    },
    {
      "heading": "The Ultimate Software Architect Knowledge Map​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "344",
      "level": 3,
      "page": 7
    },
    {
      "heading": "A Crash Course on Scaling the Data Layer​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "347",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How can Cache Systems go wrong?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "348",
      "level": 3,
      "page": 7
    },
    {
      "heading": "4 Popular GraphQL Adoption Patterns​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "350",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Top 8 Popular Network Protocols​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "352",
      "level": 3,
      "page": 7
    },
    {
      "heading": "11 Things I learned about API Development from POST/CON 2024 by Postman.​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "353",
      "level": 3,
      "page": 7
    },
    {
      "heading": "How do Search Engines really Work?​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "355",
      "level": 3,
      "page": 7
    },
    {
      "heading": "The Ultimate Walkthrough of the Generative AI Landscape​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "357",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Cheatsheet on Relational Database Design​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "358",
      "level": 3,
      "page": 7
    },
    {
      "heading": "My Favorite 10 Soft Skill Books that Can Help You Become a Better Developer​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "360",
      "level": 3,
      "page": 7
    },
    {
      "heading": "REST API Authentication Methods​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "362",
      "level": 3,
      "page": 7
    },
    {
      "heading": "The Evolving Landscape of API Protocols​",
      "level": 3,
      "page": 7
    },
    {
      "heading": "366",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Big Endian vs Little Endian",
      "level": 2,
      "page": 8
    },
    {
      "heading": "Microprocessor architectures commonly use two different methods to store the individual bytes in",
      "level": 3,
      "page": 8
    },
    {
      "heading": "memory. This difference is referred to as “byte ordering” or “endian nature”.",
      "level": 3,
      "page": 8
    },
    {
      "heading": "Little Endian​",
      "level": 3,
      "page": 8
    },
    {
      "heading": "Intel x86 processors store a two-byte integer with the least significant byte first, followed by",
      "level": 3,
      "page": 8
    },
    {
      "heading": "the most significant byte. This is called little-endian byte ordering.",
      "level": 3,
      "page": 8
    },
    {
      "heading": "Big Endian​",
      "level": 3,
      "page": 9
    },
    {
      "heading": "In big endian byte order, the most significant byte is stored at the lowest memory address,",
      "level": 3,
      "page": 9
    },
    {
      "heading": "and the least significant byte is stored at the highest memory address. Older PowerPC and",
      "level": 3,
      "page": 9
    },
    {
      "heading": "Motorola 68k architectures often use big endian. In network communications and file storage,",
      "level": 3,
      "page": 9
    },
    {
      "heading": "we also use big endian.",
      "level": 3,
      "page": 9
    },
    {
      "heading": "The byte ordering becomes significant when data is transferred between systems or processed by",
      "level": 3,
      "page": 9
    },
    {
      "heading": "systems with different endianness. It's important to handle byte order correctly to interpret data",
      "level": 3,
      "page": 9
    },
    {
      "heading": "consistently across diverse systems.",
      "level": 3,
      "page": 9
    },
    {
      "heading": "How do we incorporate Event Sourcing into the systems?",
      "level": 2,
      "page": 10
    },
    {
      "heading": "Event sourcing changes the programming paradigm from persisting states to persisting events. The",
      "level": 3,
      "page": 10
    },
    {
      "heading": "event store is the source of truth. Let's look at three examples.",
      "level": 3,
      "page": 10
    },
    {
      "heading": "1.​ New York Times ​",
      "level": 3,
      "page": 10
    },
    {
      "heading": "The newspaper website stores every article, image, and byline since 1851 in an event store.",
      "level": 3,
      "page": 10
    },
    {
      "heading": "The raw data is then denormalized into different views and fed into different ElasticSearch",
      "level": 3,
      "page": 10
    },
    {
      "heading": "nodes for website searches. ​",
      "level": 3,
      "page": 10
    },
    {
      "heading": "2.​ CDC (Change Data Capture) ​",
      "level": 3,
      "page": 10
    },
    {
      "heading": "A CDC connector pulls data from the tables and transforms it into events. These events are",
      "level": 3,
      "page": 10
    },
    {
      "heading": "pushed to Kafka and other sinks consume events from Kafka. ​",
      "level": 3,
      "page": 10
    },
    {
      "heading": "3.​ Microservice Connector ​",
      "level": 3,
      "page": 10
    },
    {
      "heading": "We can also use event event-sourcing paradigm for transmitting events among",
      "level": 3,
      "page": 10
    },
    {
      "heading": "microservices. For example, the shopping cart service generates various events for adding",
      "level": 3,
      "page": 10
    },
    {
      "heading": "or removing items from the cart. Kafka broker acts as the event store, and other services",
      "level": 3,
      "page": 11
    },
    {
      "heading": "store. Since events are the source of truth, each service can determine the domain model on",
      "level": 3,
      "page": 11
    },
    {
      "heading": "its own.",
      "level": 3,
      "page": 11
    },
    {
      "heading": "Over to you: Have you used event sourcing in production?",
      "level": 3,
      "page": 11
    },
    {
      "heading": "How can Cache Systems go wrong",
      "level": 2,
      "page": 12
    },
    {
      "heading": "The diagram below shows 4 typical cases where caches can go wrong and their solutions.",
      "level": 3,
      "page": 12
    },
    {
      "heading": "1.​ Thunder herd problem​",
      "level": 3,
      "page": 12
    },
    {
      "heading": "This happens when a large number of keys in the cache expire at the same time. Then the",
      "level": 3,
      "page": 12
    },
    {
      "heading": "query requests directly hit the database, which overloads the database.",
      "level": 3,
      "page": 12
    },
    {
      "heading": "There are two ways to mitigate this issue: one is to avoid setting the same expiry time for the",
      "level": 3,
      "page": 12
    },
    {
      "heading": "keys, adding a random number in the configuration; the other is to allow only the core",
      "level": 3,
      "page": 12
    },
    {
      "heading": "business data to hit the database and prevent non-core data to access the database until the",
      "level": 3,
      "page": 12
    },
    {
      "heading": "cache is back up.",
      "level": 3,
      "page": 12
    },
    {
      "heading": "2.​ Cache penetration​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "This happens when the key doesn’t exist in the cache or the database. The application",
      "level": 3,
      "page": 13
    },
    {
      "heading": "cannot retrieve relevant data from the database to update the cache. This problem creates a",
      "level": 3,
      "page": 13
    },
    {
      "heading": "lot of pressure on both the cache and the database.​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "To solve this, there are two suggestions. One is to cache a null value for non-existent keys,",
      "level": 3,
      "page": 13
    },
    {
      "heading": "avoiding hitting the database. The other is to use a bloom filter to check the key existence",
      "level": 3,
      "page": 13
    },
    {
      "heading": "first, and if the key doesn’t exist, we can avoid hitting the database.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "3.​ Cache breakdown​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "This is similar to the thunder herd problem. It happens when a hot key expires. A large",
      "level": 3,
      "page": 13
    },
    {
      "heading": "number of requests hit the database. ​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Since the hot keys take up 80% of the queries, we do not set an expiration time for them.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "4.​ Cache crash ​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "This happens when the cache is down and all the requests go to the database. ​",
      "level": 3,
      "page": 13
    },
    {
      "heading": "There are two ways to solve this problem. One is to set up a circuit breaker, and when the",
      "level": 3,
      "page": 13
    },
    {
      "heading": "cache is down, the application services cannot visit the cache or the database. The other is",
      "level": 3,
      "page": 13
    },
    {
      "heading": "to set up a cluster for the cache to improve cache availability.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Over to you: Have you met any of these issues in production?",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Linux file system explained",
      "level": 2,
      "page": 14
    },
    {
      "heading": "The Linux file system used to resemble an unorganized town where individuals constructed their",
      "level": 3,
      "page": 14
    },
    {
      "heading": "houses wherever they pleased. However, in 1994, the Filesystem Hierarchy Standard (FHS) was",
      "level": 3,
      "page": 14
    },
    {
      "heading": "introduced to bring order to the Linux file system.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "By implementing a standard like the FHS, software can ensure a consistent layout across various",
      "level": 3,
      "page": 14
    },
    {
      "heading": "Linux distributions. Nonetheless, not all Linux distributions strictly adhere to this standard. They often",
      "level": 3,
      "page": 14
    },
    {
      "heading": "incorporate their own unique elements or cater to specific requirements.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "To become proficient in this standard, you can begin by exploring. Utilize commands such as \"cd\" for",
      "level": 3,
      "page": 14
    },
    {
      "heading": "navigation and \"ls\" for listing directory contents. Imagine the file system as a tree, starting from the",
      "level": 3,
      "page": 14
    },
    {
      "heading": "root (/). With time, it will become second nature to you, transforming you into a skilled Linux",
      "level": 3,
      "page": 14
    },
    {
      "heading": "administrator.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "Have fun exploring!",
      "level": 3,
      "page": 14
    },
    {
      "heading": "Over to you: which directory did you use most frequently?",
      "level": 3,
      "page": 14
    },
    {
      "heading": "My recommended materials for cracking your next technical",
      "level": 2,
      "page": 15
    },
    {
      "heading": "interview",
      "level": 2,
      "page": 15
    },
    {
      "heading": "Coding",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Leetcode",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Cracking the coding interview book",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Neetcode",
      "level": 3,
      "page": 15
    },
    {
      "heading": "System Design Interview",
      "level": 3,
      "page": 15
    },
    {
      "heading": "System Design Interview Book 1, 2 by Alex Xu, Sahn Lam",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Grokking the system design by Design Guru",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Design Data-intensive Application book",
      "level": 3,
      "page": 15
    },
    {
      "heading": "Behavioral interview",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Tech Interview Handbook (Github repo)",
      "level": 3,
      "page": 16
    },
    {
      "heading": "A Life Engineered (YT)",
      "level": 3,
      "page": 16
    },
    {
      "heading": "STAR method (general method)",
      "level": 3,
      "page": 16
    },
    {
      "heading": "OOD Interview",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Interviewready",
      "level": 3,
      "page": 16
    },
    {
      "heading": "OOD by educative",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Head First Design Patterns Book",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Mock interviews",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Interviewingio",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Pramp",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Meetapro",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Apply for Jobs",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Linkedin",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Monster",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Indeed",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Over to you: What is your favorite interview prep material?",
      "level": 3,
      "page": 16
    },
    {
      "heading": "How Git Commands work",
      "level": 2,
      "page": 17
    },
    {
      "heading": "Almost every software engineer has used Git before, but only a handful know how it works.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "To begin with, it's essential to identify where our code is stored. The common assumption is that",
      "level": 3,
      "page": 17
    },
    {
      "heading": "there are only two locations - one on a remote server like Github and the other on our local machine.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "However, this isn't entirely accurate. Git maintains three local storages on our machine, which",
      "level": 3,
      "page": 17
    },
    {
      "heading": "means that our code can be found in four places:",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Working directory: where we edit files",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Staging area: a temporary location where files are kept for the next commit",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Local repository: contains the code that has been committed",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Remote repository: the remote server that stores the code",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Most Git commands primarily move files between these four locations.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Over to you: Do you know which storage location the \"git tag\" command operates on? This",
      "level": 3,
      "page": 17
    },
    {
      "heading": "command can add annotations to a commit.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Top 4 Most Popular Use Cases for UDP",
      "level": 2,
      "page": 18
    },
    {
      "heading": "UDP (User Datagram Protocol) is used in various software architectures for its simplicity, speed, and",
      "level": 3,
      "page": 18
    },
    {
      "heading": "low overhead compared to other protocols like TCP.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Live Video Streaming​",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Many VoIP and video conferencing applications leverage UDP due to its lower overhead and",
      "level": 3,
      "page": 18
    },
    {
      "heading": "ability to tolerate packet loss. Real-time communication benefits from UDP's reduced latency",
      "level": 3,
      "page": 18
    },
    {
      "heading": "compared to TCP.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "DNS​",
      "level": 3,
      "page": 18
    },
    {
      "heading": "DNS (Domain Name Service) queries typically use UDP for their fast and lightweight nature.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Although DNS can also use TCP for large responses or zone transfers, most queries are",
      "level": 3,
      "page": 18
    },
    {
      "heading": "handled via UDP.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Market Data Multicast​",
      "level": 3,
      "page": 18
    },
    {
      "heading": "In low-latency trading, UDP is utilized for efficient market data delivery to multiple recipients",
      "level": 3,
      "page": 18
    },
    {
      "heading": "simultaneously.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "IoT​",
      "level": 3,
      "page": 18
    },
    {
      "heading": "UDP is often used in IoT devices for communications, sending small packets of data",
      "level": 3,
      "page": 18
    },
    {
      "heading": "between devices.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "How Does a Typical Push Notification System Work?",
      "level": 2,
      "page": 19
    },
    {
      "heading": "The diagram below shows the architecture of a notification system that covers major notification",
      "level": 3,
      "page": 19
    },
    {
      "heading": "channels:",
      "level": 3,
      "page": 19
    },
    {
      "heading": "In-App notifications",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Email notifications",
      "level": 3,
      "page": 19
    },
    {
      "heading": "SMS and OTP notifications",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Social media pushes",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Let’s walk through the steps.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Steps 1.1 and 1.2 - The business services send notifications to the notification gateway. The",
      "level": 3,
      "page": 20
    },
    {
      "heading": "gateway can handle two modes: one mode receives one notification each time, and the other",
      "level": 3,
      "page": 20
    },
    {
      "heading": "receives notifications in batches.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Steps 2, 2.1, and 2.2 - The notification gateway forwards the notifications to the distribution",
      "level": 3,
      "page": 20
    },
    {
      "heading": "service, where the messages are validated, formatted, and scheduled based on settings.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "The notification template repository allows users to pre-define the message format. The",
      "level": 3,
      "page": 20
    },
    {
      "heading": "channel preference repository allows users to pre-define the preferred delivery channels.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Step 3 - The notifications are then sent to the routers, normally message queues.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Step 4 - The channel services communicate with various internal and external delivery",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Steps 5 and 6 - The delivery metrics are captured by the notification tracking and analytics",
      "level": 3,
      "page": 20
    },
    {
      "heading": "service, where the operations team can view the analytical reports and improve user",
      "level": 3,
      "page": 20
    },
    {
      "heading": "experiences.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "How can Cache Systems go wrong?",
      "level": 2,
      "page": 21
    },
    {
      "heading": "The diagram below shows 4 typical cases where caches can go wrong and their solutions.",
      "level": 3,
      "page": 21
    },
    {
      "heading": "1. Thunder herd problem",
      "level": 3,
      "page": 21
    },
    {
      "heading": "This happens when a large number of keys in the cache expire at the same time. Then the query",
      "level": 3,
      "page": 21
    },
    {
      "heading": "requests directly hit the database, which overloads the database.",
      "level": 3,
      "page": 21
    },
    {
      "heading": "There are two ways to mitigate this issue: one is to avoid setting the same expiry time for the keys,",
      "level": 3,
      "page": 21
    },
    {
      "heading": "adding a random number in the configuration; the other is to allow only the core business data to hit",
      "level": 3,
      "page": 21
    },
    {
      "heading": "the database and prevent non-core data to access the database until the cache is back up.",
      "level": 3,
      "page": 21
    },
    {
      "heading": "2. Cache penetration",
      "level": 3,
      "page": 22
    },
    {
      "heading": "This happens when the key doesn’t exist in the cache or the database. The application cannot",
      "level": 3,
      "page": 22
    },
    {
      "heading": "retrieve relevant data from the database to update the cache. This problem creates a lot of pressure",
      "level": 3,
      "page": 22
    },
    {
      "heading": "on both the cache and the database.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "To solve this, there are two suggestions. One is to cache a null value for non-existent keys, avoiding",
      "level": 3,
      "page": 22
    },
    {
      "heading": "hitting the database. The other is to use a bloom filter to check the key existence first, and if the key",
      "level": 3,
      "page": 22
    },
    {
      "heading": "doesn’t exist, we can avoid hitting the database.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "3. Cache breakdown",
      "level": 3,
      "page": 22
    },
    {
      "heading": "This is similar to the thunder herd problem. It happens when a hot key expires. A large number of",
      "level": 3,
      "page": 22
    },
    {
      "heading": "requests hit the database.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Since the hot keys take up 80% of the queries, we do not set an expiration time for them.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "4. Cache crash",
      "level": 3,
      "page": 22
    },
    {
      "heading": "This happens when the cache is down and all the requests go to the database.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "There are two ways to solve this problem. One is to set up a circuit breaker, and when the cache is",
      "level": 3,
      "page": 22
    },
    {
      "heading": "down, the application services cannot visit the cache or the database. The other is to set up a cluster",
      "level": 3,
      "page": 22
    },
    {
      "heading": "for the cache to improve cache availability.",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Over to you: Have you met any of these issues in production?",
      "level": 3,
      "page": 22
    },
    {
      "heading": "REST API Cheatsheet",
      "level": 2,
      "page": 23
    },
    {
      "heading": "This guide is designed to help you understand the world of RESTful APIs in a clear and engaging",
      "level": 3,
      "page": 23
    },
    {
      "heading": "way.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "What's inside:",
      "level": 3,
      "page": 23
    },
    {
      "heading": "An exploration of the six fundamental principles of REST API design.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "Insights into key components such as HTTP methods, protocols, versioning, and more.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "A special focus on practical aspects like pagination, filtering, and endpoint design.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "Whether you're beginning your API journey or looking to refresh your knowledge, this blog and cheat",
      "level": 3,
      "page": 23
    },
    {
      "heading": "sheet combo is the perfect toolkit for success.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "Top 8 Programming Paradigms - Part 1",
      "level": 2,
      "page": 24
    },
    {
      "heading": "Imperative Programming​",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Imperative programming describes a sequence of steps that change the program’s state.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Languages like C, C++, Java, Python (to an extent), and many others support imperative",
      "level": 3,
      "page": 24
    },
    {
      "heading": "programming styles.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Declarative Programming​",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Declarative programming emphasizes expressing logic and functionalities without describing",
      "level": 3,
      "page": 24
    },
    {
      "heading": "the control flow explicitly. Functional programming is a popular form of declarative",
      "level": 3,
      "page": 24
    },
    {
      "heading": "programming.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Object-Oriented Programming (OOP)​",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Object-oriented programming (OOP) revolves around the concept of objects, which",
      "level": 3,
      "page": 24
    },
    {
      "heading": "encapsulate data (attributes) and behavior (methods or functions). Common object-oriented",
      "level": 3,
      "page": 24
    },
    {
      "heading": "programming languages include Java, C++, Python, Ruby, and C#.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Aspect-Oriented Programming (AOP)​",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Aspect-oriented programming (AOP) aims to modularize concerns that cut across multiple",
      "level": 3,
      "page": 24
    },
    {
      "heading": "parts of a software system. AspectJ is one of the most well-known AOP frameworks that",
      "level": 3,
      "page": 24
    },
    {
      "heading": "extends Java with AOP capabilities.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Functional Programming​",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Functional Programming (FP) treats computation as the evaluation of mathematical functions",
      "level": 3,
      "page": 25
    },
    {
      "heading": "and emphasizes the use of immutable data and declarative expressions. Languages like",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Haskell, Lisp, Erlang, and some features in languages like JavaScript, Python, and Scala",
      "level": 3,
      "page": 25
    },
    {
      "heading": "support functional programming paradigms.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Reactive Programming​",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Reactive Programming deals with asynchronous data streams and the propagation of",
      "level": 3,
      "page": 25
    },
    {
      "heading": "changes. Event-driven applications, and streaming data processing applications benefit from",
      "level": 3,
      "page": 25
    },
    {
      "heading": "reactive programming.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Generic Programming​",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Generic Programming aims at creating reusable, flexible, and type-independent code by",
      "level": 3,
      "page": 25
    },
    {
      "heading": "allowing algorithms and data structures to be written without specifying the types they will",
      "level": 3,
      "page": 25
    },
    {
      "heading": "operate on. Generic programming is extensively used in libraries and frameworks to create",
      "level": 3,
      "page": 25
    },
    {
      "heading": "data structures like lists, stacks, queues, and algorithms like sorting, searching.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Concurrent Programming​",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Concurrent Programming deals with the execution of multiple tasks or processes",
      "level": 3,
      "page": 25
    },
    {
      "heading": "simultaneously, improving performance and resource utilization. Concurrent programming is",
      "level": 3,
      "page": 25
    },
    {
      "heading": "utilized in various applications, including multi-threaded servers, parallel processing,",
      "level": 3,
      "page": 25
    },
    {
      "heading": "concurrent web servers, and high-performance computing.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Data Pipelines Overview",
      "level": 2,
      "page": 26
    },
    {
      "heading": "Data pipelines are a fundamental component of managing and processing data efficiently within",
      "level": 3,
      "page": 26
    },
    {
      "heading": "modern systems. These pipelines typically encompass 5 predominant phases: Collect, Ingest, Store,",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Compute, and Consume.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "1.​ Collect:​",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Data is acquired from data stores, data streams, and applications, sourced remotely from",
      "level": 3,
      "page": 26
    },
    {
      "heading": "devices, applications, or business systems.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "2.​ Ingest:​",
      "level": 3,
      "page": 26
    },
    {
      "heading": "During the ingestion process, data is loaded into systems and organized within event",
      "level": 3,
      "page": 26
    },
    {
      "heading": "queues.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "3.​ Store:​",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Post ingestion, organized data is stored in data warehouses, data lakes, and data",
      "level": 3,
      "page": 26
    },
    {
      "heading": "lakehouses, along with various systems like databases, ensuring post-ingestion storage.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "4.​ Compute:​",
      "level": 3,
      "page": 27
    },
    {
      "heading": "Data undergoes aggregation, cleansing, and manipulation to conform to company standards,",
      "level": 3,
      "page": 27
    },
    {
      "heading": "including tasks such as format conversion, data compression, and partitioning. This phase",
      "level": 3,
      "page": 27
    },
    {
      "heading": "employs both batch and stream processing techniques.",
      "level": 3,
      "page": 27
    },
    {
      "heading": "5.​ Consume:​",
      "level": 3,
      "page": 27
    },
    {
      "heading": "Processed data is made available for consumption through analytics and visualization tools,",
      "level": 3,
      "page": 27
    },
    {
      "heading": "The efficiency and effectiveness of each phase contribute to the overall success of data-driven",
      "level": 3,
      "page": 27
    },
    {
      "heading": "operations within an organization.",
      "level": 3,
      "page": 27
    },
    {
      "heading": "Over to you: What's your story with data-driven pipelines? How have they influenced your data",
      "level": 3,
      "page": 27
    },
    {
      "heading": "management game?​",
      "level": 3,
      "page": 27
    },
    {
      "heading": "API Vs SDK",
      "level": 2,
      "page": 28
    },
    {
      "heading": "API (Application Programming Interface) and SDK (Software Development Kit) are essential tools in",
      "level": 3,
      "page": 28
    },
    {
      "heading": "the software development world, but they serve distinct purposes:",
      "level": 3,
      "page": 28
    },
    {
      "heading": "communicate with each other.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "1.​ It defines how software components should interact.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "2.​ Facilitates data exchange and functionality access between software components.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "3.​ Typically consists of endpoints, requests, and responses.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "SDK: An SDK is a comprehensive package of tools, libraries, sample code, and documentation that",
      "level": 3,
      "page": 28
    },
    {
      "heading": "assists developers in building applications for a particular platform, framework, or hardware.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "1.​ Offers higher-level abstractions, simplifying development for a specific platform.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "2.​ Tailored to specific platforms or frameworks, ensuring compatibility and optimal performance",
      "level": 3,
      "page": 29
    },
    {
      "heading": "on that platform.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "3.​ Offer access to advanced features and capabilities specific to the platform, which might be",
      "level": 3,
      "page": 29
    },
    {
      "heading": "otherwise challenging to implement from scratch.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "The choice between APIs and SDKs depends on the development goals and requirements of the",
      "level": 3,
      "page": 29
    },
    {
      "heading": "project.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "Over to you: Which do you find yourself gravitating towards – APIs or SDKs – Every implementation",
      "level": 3,
      "page": 29
    },
    {
      "heading": "has a unique story to tell. What's yours?",
      "level": 3,
      "page": 29
    },
    {
      "heading": "A handy cheat sheet for the most popular cloud services",
      "level": 2,
      "page": 30
    },
    {
      "heading": "What’s included?",
      "level": 3,
      "page": 30
    },
    {
      "heading": "AWS, Azure, Google Cloud, Oracle Cloud, Alibaba Cloud",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Cloud servers",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Databases",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Message queues and streaming platforms",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Load balancing, DNS routing software",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Security",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Monitoring",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Over to you - which company is the best at naming things?",
      "level": 3,
      "page": 30
    },
    {
      "heading": "A nice cheat sheet of different monitoring infrastructure in",
      "level": 2,
      "page": 31
    },
    {
      "heading": "cloud services",
      "level": 2,
      "page": 31
    },
    {
      "heading": "This cheat sheet offers a concise yet comprehensive comparison of key monitoring elements across",
      "level": 3,
      "page": 31
    },
    {
      "heading": "the three major cloud providers and open-source / 3rd party tools.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Let's delve into the essential monitoring aspects covered:",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Data Collection: Gather information from diverse sources to enhance decision-making.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Data Storage: Safely store and manage data for future analysis and reference.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Data Analysis: Extract valuable insights from data to drive informed actions.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Alerting: Receive real-time notifications about critical events or anomalies.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Visualization: Present data in a visually comprehensible format for better understanding.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Reporting and Compliance: Generate reports and ensure adherence to regulatory standards.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Automation: Streamline processes and tasks through automated workflows.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "Integration: Seamlessly connect and exchange data between different systems or tools.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "Feedback Loops: Continuously refine strategies based on feedback and performance",
      "level": 3,
      "page": 32
    },
    {
      "heading": "analysis.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "Over to you: How do you prioritize and leverage these essential monitoring aspects in your domain",
      "level": 3,
      "page": 32
    },
    {
      "heading": "to achieve better outcomes and efficiency?",
      "level": 3,
      "page": 32
    },
    {
      "heading": "REST API Vs. GraphQL",
      "level": 2,
      "page": 33
    },
    {
      "heading": "When it comes to API design, REST and GraphQL each have their own strengths and weaknesses.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "REST",
      "level": 3,
      "page": 33
    },
    {
      "heading": "Uses standard HTTP methods like GET, POST, PUT, DELETE for CRUD operations.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "Works",
      "level": 3,
      "page": 33
    },
    {
      "heading": "well",
      "level": 3,
      "page": 33
    },
    {
      "heading": "when",
      "level": 3,
      "page": 33
    },
    {
      "heading": "you",
      "level": 3,
      "page": 33
    },
    {
      "heading": "need",
      "level": 3,
      "page": 33
    },
    {
      "heading": "simple,",
      "level": 3,
      "page": 33
    },
    {
      "heading": "uniform",
      "level": 3,
      "page": 33
    },
    {
      "heading": "interfaces",
      "level": 3,
      "page": 33
    },
    {
      "heading": "between",
      "level": 3,
      "page": 33
    },
    {
      "heading": "separate",
      "level": 3,
      "page": 33
    },
    {
      "heading": "services/applications.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "Caching strategies are straightforward to implement.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "The downside is it may require multiple roundtrips to assemble related data from separate",
      "level": 3,
      "page": 33
    },
    {
      "heading": "endpoints.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "GraphQL",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Provides a single endpoint for clients to query for precisely the data they need.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Clients specify the exact fields required in nested queries, and the server returns optimized",
      "level": 3,
      "page": 34
    },
    {
      "heading": "payloads containing just those fields.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Supports Mutations for modifying data and Subscriptions for real-time notifications.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Great for aggregating data from multiple sources and works well with rapidly evolving",
      "level": 3,
      "page": 34
    },
    {
      "heading": "frontend requirements.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "However, it shifts complexity to the client side and can allow abusive queries if not properly",
      "level": 3,
      "page": 34
    },
    {
      "heading": "safeguarded",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Caching strategies can be more complicated than REST.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "The best choice between REST and GraphQL depends on the specific requirements of the",
      "level": 3,
      "page": 34
    },
    {
      "heading": "application and development team. GraphQL is a good fit for complex or frequently changing",
      "level": 3,
      "page": 34
    },
    {
      "heading": "frontend needs, while REST suits applications where simple and consistent contracts are preferred.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "Key Use Cases for Load Balancers",
      "level": 2,
      "page": 35
    },
    {
      "heading": "The diagram below shows top 6 use cases where we use a load balancer.",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Traffic Distribution ​",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Load balancers evenly distribute incoming traffic among multiple servers, preventing any",
      "level": 3,
      "page": 35
    },
    {
      "heading": "single server from becoming overwhelmed. This helps maintain optimal performance,",
      "level": 3,
      "page": 35
    },
    {
      "heading": "scalability, and reliability of applications or websites.",
      "level": 3,
      "page": 35
    },
    {
      "heading": "High Availability ​",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Load balancers enhance system availability by rerouting traffic away from failed or unhealthy",
      "level": 3,
      "page": 35
    },
    {
      "heading": "servers to healthy ones. This ensures uninterrupted service even if certain servers",
      "level": 3,
      "page": 35
    },
    {
      "heading": "experience issues.",
      "level": 3,
      "page": 35
    },
    {
      "heading": "SSL Termination ​",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Load balancers can offload SSL/TLS encryption and decryption tasks from backend servers,",
      "level": 3,
      "page": 35
    },
    {
      "heading": "reducing their workload and improving overall performance.",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Session Persistence ​",
      "level": 3,
      "page": 36
    },
    {
      "heading": "For applications that require maintaining a user's session on a specific server, load balancers",
      "level": 3,
      "page": 36
    },
    {
      "heading": "can ensure that subsequent requests from a user are sent to the same server.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Scalability ​",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Load balancers facilitate horizontal scaling by effectively managing increased traffic.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Additional servers can be easily added to the pool, and the load balancer will distribute traffic",
      "level": 3,
      "page": 36
    },
    {
      "heading": "across all servers.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Health Monitoring ​",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Load balancers continuously monitor the health and performance of servers, removing failed",
      "level": 3,
      "page": 36
    },
    {
      "heading": "or unhealthy servers from the pool to maintain optimal performance.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "Top 6 Firewall Use Cases",
      "level": 2,
      "page": 37
    },
    {
      "heading": "Port-Based Rules ​",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Firewall rules can be set to allow or block traffic based on specific ports. For example,",
      "level": 3,
      "page": 37
    },
    {
      "heading": "allowing only traffic on ports 80 (HTTP) and 443 (HTTPS) for web browsing.",
      "level": 3,
      "page": 37
    },
    {
      "heading": "IP Address Filtering ​",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Rules can be configured to allow or deny traffic based on source or destination IP addresses.",
      "level": 3,
      "page": 37
    },
    {
      "heading": "This can include whitelisting trusted IP addresses or blacklisting known malicious ones.",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Protocol-Based Rules ​",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Firewalls can be configured to allow or block traffic based on specific network protocols such",
      "level": 3,
      "page": 37
    },
    {
      "heading": "as TCP, UDP, ICMP, etc. For instance, allowing only TCP traffic on port 22 (SSH).",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Time-Based Rules ​",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Firewalls can be configured to enforce rules based on specific times or schedules. This can",
      "level": 3,
      "page": 38
    },
    {
      "heading": "be useful for setting different access rules during business hours versus after-hours.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Stateful Inspection ​",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Stateful Inspection: Stateful firewalls monitor the state of active connections and allow traffic",
      "level": 3,
      "page": 38
    },
    {
      "heading": "only if it matches an established connection, preventing unauthorized access from the",
      "level": 3,
      "page": 38
    },
    {
      "heading": "outside.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Application-Based Rules ​",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Some firewalls offer application-level control by allowing or blocking traffic based on specific",
      "level": 3,
      "page": 38
    },
    {
      "heading": "applications or services. For instance, allowing or restricting access to certain applications",
      "level": 3,
      "page": 38
    },
    {
      "heading": "like Skype, BitTorrent, etc.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Types of memory. Which ones do you know?",
      "level": 2,
      "page": 39
    },
    {
      "heading": "Memory types vary by speed, size, and function, creating a multi-layered architecture that balances",
      "level": 3,
      "page": 39
    },
    {
      "heading": "cost with the need for rapid data access.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "By grasping the roles and capabilities of each memory type, developers and system architects can",
      "level": 3,
      "page": 39
    },
    {
      "heading": "design systems that effectively leverage the strengths of each storage layer, leading to improved",
      "level": 3,
      "page": 39
    },
    {
      "heading": "overall system performance and user experience.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Some of the common Memory types are:",
      "level": 3,
      "page": 39
    },
    {
      "heading": "1.​ Registers: ​",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Tiny, ultra-fast storage within the CPU for immediate data access.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "2.​ Caches: ​",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Small, quick memory located close to the CPU to speed up data retrieval.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "3.​ Main Memory (RAM): ​",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Larger, primary storage for currently executing programs and data.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "4.​ Solid-State Drives (SSDs): ​",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Fast, reliable storage with no moving parts, used for persistent data.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "5.​ Hard Disk Drives (HDDs): ​",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Mechanical drives with large capacities for long-term storage.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "6.​ Remote Secondary Storage: ​",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Offsite storage for data backup and archiving, accessible over a network.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Over to you: Which memory type resonates most with your tech projects and why? Share your",
      "level": 3,
      "page": 40
    },
    {
      "heading": "thoughts!",
      "level": 3,
      "page": 40
    },
    {
      "heading": "How Do C++, Java, Python Work?",
      "level": 2,
      "page": 41
    },
    {
      "heading": "The diagram shows how the compilation and execution work.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Compiled languages are compiled into machine code by the compiler. The machine code can later",
      "level": 3,
      "page": 41
    },
    {
      "heading": "be executed directly by the CPU. Examples: C, C++, Go.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "A bytecode language like Java, compiles the source code into bytecode first, then the JVM executes",
      "level": 3,
      "page": 41
    },
    {
      "heading": "the program. Sometimes the JIT (Just-In-Time) compiler compiles the source code into machine",
      "level": 3,
      "page": 41
    },
    {
      "heading": "code to speed up the execution. Examples: Java, C#",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Interpreted languages are not compiled. They are interpreted by the interpreter during runtime.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Examples: Python, Javascript, Ruby",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Compiled languages in general run faster than interpreted languages.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Over to you: which type of language do you prefer?",
      "level": 3,
      "page": 41
    },
    {
      "heading": "Top 6 Load Balancing Algorithms",
      "level": 2,
      "page": 42
    },
    {
      "heading": "Static Algorithms",
      "level": 3,
      "page": 42
    },
    {
      "heading": "1.​ Round robin​",
      "level": 3,
      "page": 42
    },
    {
      "heading": "The client requests are sent to different service instances in sequential order. The",
      "level": 3,
      "page": 42
    },
    {
      "heading": "services are usually required to be stateless.",
      "level": 3,
      "page": 42
    },
    {
      "heading": "2.​ Sticky round-robin​",
      "level": 3,
      "page": 42
    },
    {
      "heading": "This is an improvement of the round-robin algorithm. If Alice’s first request goes to service",
      "level": 3,
      "page": 42
    },
    {
      "heading": "A, the following requests go to service A as well.",
      "level": 3,
      "page": 42
    },
    {
      "heading": "3.​ Weighted round-robin​",
      "level": 3,
      "page": 42
    },
    {
      "heading": "The admin can specify the weight for each service. The ones with a higher weight handle",
      "level": 3,
      "page": 42
    },
    {
      "heading": "more requests than others.",
      "level": 3,
      "page": 42
    },
    {
      "heading": "4.​ Hash​",
      "level": 3,
      "page": 42
    },
    {
      "heading": "This algorithm applies a hash function on the incoming requests’ IP or URL. The requests",
      "level": 3,
      "page": 42
    },
    {
      "heading": "are routed to relevant instances based on the hash function result.",
      "level": 3,
      "page": 42
    },
    {
      "heading": "Dynamic Algorithms",
      "level": 3,
      "page": 42
    },
    {
      "heading": "5.​ Least connections​",
      "level": 3,
      "page": 43
    },
    {
      "heading": "A new request is sent to the service instance with the least concurrent connections.",
      "level": 3,
      "page": 43
    },
    {
      "heading": "6.​ Least response time​",
      "level": 3,
      "page": 43
    },
    {
      "heading": "A new request is sent to the service instance with the fastest response time.",
      "level": 3,
      "page": 43
    },
    {
      "heading": "How does Git work?",
      "level": 2,
      "page": 44
    },
    {
      "heading": "To begin with, it's essential to identify where our code is stored. The common assumption is that",
      "level": 3,
      "page": 44
    },
    {
      "heading": "there are only two locations - one on a remote server like Github and the other on our local machine.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "However, this isn't entirely accurate. Git maintains three local storages on our machine, which",
      "level": 3,
      "page": 44
    },
    {
      "heading": "means that our code can be found in four places:",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Working directory: where we edit files",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Staging area: a temporary location where files are kept for the next commit",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Local repository: contains the code that has been committed",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Remote repository: the remote server that stores the code",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Most Git commands primarily move files between these four locations.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Over to you: Do you know which storage location the \"git tag\" command operates on? This",
      "level": 3,
      "page": 44
    },
    {
      "heading": "command can add annotations to a commit.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "HTTP Cookies Explained With a Simple Diagram",
      "level": 2,
      "page": 45
    },
    {
      "heading": "HTTP, the language of the web, is naturally \"stateless.\" But hey, we all want that seamless,",
      "level": 3,
      "page": 45
    },
    {
      "heading": "continuous browsing experience, right? Enter the unsung heroes - Cookies!",
      "level": 3,
      "page": 45
    },
    {
      "heading": "So, here's the scoop in this cookie flyer:",
      "level": 3,
      "page": 45
    },
    {
      "heading": "1.​ HTTP is like a goldfish with no memory - it forgets you instantly! But cookies swoop in to the",
      "level": 3,
      "page": 45
    },
    {
      "heading": "rescue, adding that \"session secret sauce\" to your web interactions.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "2.​ Cookies? Think of them as little notes you pass to the web server, saying, \"Remember me,",
      "level": 3,
      "page": 45
    },
    {
      "heading": "please!\" And yes, they're stored there, like cherished mementos.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "3.​ Browsers are like cookie bouncers, making sure your cookies don't party crash at the wrong",
      "level": 3,
      "page": 45
    },
    {
      "heading": "website.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "4.​ Finally, meet the cookie celebrities - SameSite, Name, Value, Secure, Domain, and HttpOnly.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "They're the cool kids setting the rules in the cookie jar!",
      "level": 3,
      "page": 45
    },
    {
      "heading": "How does a ChatGPT-like system work?",
      "level": 2,
      "page": 46
    },
    {
      "heading": "We attempted to explain how it works in the diagram below. The process can be broken down into",
      "level": 3,
      "page": 47
    },
    {
      "heading": "two parts.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "1.​ Training. To train a ChatGPT model, there are two stages:",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Pre-training: In this stage, we train a GPT model (decoder-only transformer) on a",
      "level": 3,
      "page": 47
    },
    {
      "heading": "large chunk of internet data. The objective is to train a model that can predict future",
      "level": 3,
      "page": 47
    },
    {
      "heading": "words given a sentence in a way that is grammatically correct and semantically",
      "level": 3,
      "page": 47
    },
    {
      "heading": "meaningful similar to the internet data. After the pre-training stage, the model can",
      "level": 3,
      "page": 47
    },
    {
      "heading": "complete given sentences, but it is not capable of responding to questions.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Fine-tuning: This stage is a 3-step process that turns the pre-trained model into a",
      "level": 3,
      "page": 47
    },
    {
      "heading": "question-answering ChatGPT model:",
      "level": 3,
      "page": 47
    },
    {
      "heading": "1.​ Collect training data (questions and answers), and fine-tune the pre-trained",
      "level": 3,
      "page": 47
    },
    {
      "heading": "model on this data. The model takes a question as input and learns to",
      "level": 3,
      "page": 47
    },
    {
      "heading": "generate an answer similar to the training data.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "2.​ Collect more data (question, several answers) and train a reward model to",
      "level": 3,
      "page": 47
    },
    {
      "heading": "rank these answers from most relevant to least relevant.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "3.​ Use reinforcement learning (PPO optimization) to fine-tune the model so the",
      "level": 3,
      "page": 47
    },
    {
      "heading": "model's answers are more accurate.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "2.    Answer a prompt",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Step 1: The user enters the full question, “Explain how a classification algorithm",
      "level": 3,
      "page": 47
    },
    {
      "heading": "works”.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Step 2: The question is sent to a content moderation component. This component",
      "level": 3,
      "page": 47
    },
    {
      "heading": "ensures that the question does not violate safety guidelines and filters inappropriate",
      "level": 3,
      "page": 47
    },
    {
      "heading": "questions.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Steps 3-4: If the input passes content moderation, it is sent to the chatGPT model. If",
      "level": 3,
      "page": 47
    },
    {
      "heading": "the input doesn’t pass content moderation, it goes straight to template response",
      "level": 3,
      "page": 47
    },
    {
      "heading": "generation.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Step 5-6: Once the model generates the response, it is sent to a content moderation",
      "level": 3,
      "page": 47
    },
    {
      "heading": "component again. This ensures the generated response is safe, harmless, unbiased,",
      "level": 3,
      "page": 47
    },
    {
      "heading": "etc.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Step 7: If the input passes content moderation, it is shown to the user. If the input",
      "level": 3,
      "page": 47
    },
    {
      "heading": "doesn’t pass content moderation, it goes to template response generation and shows",
      "level": 3,
      "page": 47
    },
    {
      "heading": "a template answer to the user.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "A cheat sheet for system designs",
      "level": 2,
      "page": 48
    },
    {
      "heading": "The diagram below lists 15 core concepts when we design systems. The cheat sheet is",
      "level": 3,
      "page": 48
    },
    {
      "heading": "straightforward to go through one by one. Save it for future reference!",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Requirement gathering",
      "level": 3,
      "page": 48
    },
    {
      "heading": "System architecture",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Data design",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Domain design",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Scalability",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Reliability",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Availability",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Performance",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Security",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Maintainability",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Testing",
      "level": 3,
      "page": 48
    },
    {
      "heading": "User experience design",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Cost estimation",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Documentation",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Migration plan",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Cloud Disaster Recovery Strategies",
      "level": 2,
      "page": 50
    },
    {
      "heading": "An effective Disaster Recovery (DR) plan is not just a precaution; it's a necessity.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "The key to any robust DR strategy lies in understanding and setting two pivotal benchmarks:",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Recovery Time Objective (RTO) and Recovery Point Objective (RPO).",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Recovery Time Objective (RTO) refers to the maximum acceptable length of time that your",
      "level": 3,
      "page": 51
    },
    {
      "heading": "application or network can be offline after a disaster.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Recovery Point Objective (RPO), on the other hand, indicates the maximum acceptable",
      "level": 3,
      "page": 51
    },
    {
      "heading": "amount of data loss measured in time.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Let's explore four widely adopted DR strategies:",
      "level": 3,
      "page": 51
    },
    {
      "heading": "1.​ Backup and Restore Strategy:",
      "level": 3,
      "page": 51
    },
    {
      "heading": "This method involves regular backups of data and systems to facilitate post-disaster",
      "level": 3,
      "page": 51
    },
    {
      "heading": "recovery.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RTO: From several hours to a few days.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RPO: From a few hours up to the time of the last successful backup.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "2.​ Pilot Light Approach:",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Maintains crucial components in a ready-to-activate mode, enabling rapid scaling in",
      "level": 3,
      "page": 51
    },
    {
      "heading": "response to a disaster.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RTO: From a few minutes to several hours.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RPO: Depends on how often data is synchronized.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "3.​ Warm Standby Solution:",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Establishes a semi-active environment with current data to reduce recovery time.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RTO: Generally within a few minutes to hours.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RPO: Up to the last few minutes or hours.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "4.​ Hot Site / Multi-Site Configuration:",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Ensures a fully operational, duplicate environment that runs parallel to the primary system.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RTO: Almost immediate, often just a few minutes.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Typical RPO: Extremely minimal, usually only a few seconds old.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Over to you: What factors would influence your decision to choose a DR strategy?",
      "level": 3,
      "page": 51
    },
    {
      "heading": "Visualizing a SQL query",
      "level": 2,
      "page": 52
    },
    {
      "heading": "SQL statements are executed by the database system in several steps, including:",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Parsing the SQL statement and checking its validity",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Transforming the SQL into an internal representation, such as relational algebra",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Optimizing the internal representation and creating an execution plan that utilizes index",
      "level": 3,
      "page": 52
    },
    {
      "heading": "information",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Executing the plan and returning the results",
      "level": 3,
      "page": 52
    },
    {
      "heading": "How does REST API work?",
      "level": 2,
      "page": 53
    },
    {
      "heading": "What are its principles, methods, constraints, and best practices?",
      "level": 3,
      "page": 53
    },
    {
      "heading": "I hope the diagram below gives you a quick overview.",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Explaining 9 types of API testing",
      "level": 2,
      "page": 54
    },
    {
      "heading": "Smoke Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This is done after API development is complete. Simply validate if the APIs are working and",
      "level": 3,
      "page": 55
    },
    {
      "heading": "nothing breaks.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Functional Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This creates a test plan based on the functional requirements and compares the results with",
      "level": 3,
      "page": 55
    },
    {
      "heading": "the expected results.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Integration Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "communications and data transmissions are tested.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Regression Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This test ensures that bug fixes or new features shouldn’t break the existing behaviors of",
      "level": 3,
      "page": 55
    },
    {
      "heading": "APIs.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Load Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This tests applications’ performance by simulating different loads. Then we can calculate the",
      "level": 3,
      "page": 55
    },
    {
      "heading": "capacity of the application.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Stress Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "We deliberately create high loads to the APIs and test if the APIs are able to function",
      "level": 3,
      "page": 55
    },
    {
      "heading": "normally.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Security Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This tests the APIs against all possible external threats.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "UI Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This tests the UI interactions with the APIs to make sure the data can be displayed properly.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Fuzz Testing  ​",
      "level": 3,
      "page": 55
    },
    {
      "heading": "This injects invalid or unexpected input data into the API and tries to crash the API. In this",
      "level": 3,
      "page": 55
    },
    {
      "heading": "way, it identifies the API vulnerabilities.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Git Merge vs. Rebase vs.Squash Commit!",
      "level": 2,
      "page": 56
    },
    {
      "heading": "What are the differences?",
      "level": 3,
      "page": 56
    },
    {
      "heading": "When we 𝐦𝐞𝐫𝐠𝐞 𝐜𝐡𝐚𝐧𝐠𝐞𝐬 from one Git branch to another, we can use ‘git merge’ or ‘git rebase’. The",
      "level": 3,
      "page": 56
    },
    {
      "heading": "diagram below shows how the two commands work.",
      "level": 3,
      "page": 56
    },
    {
      "heading": "𝐆𝐢𝐭 𝐌𝐞𝐫𝐠𝐞",
      "level": 3,
      "page": 56
    },
    {
      "heading": "This creates a new commit G’ in the main branch. G’ ties the histories of both main and feature",
      "level": 3,
      "page": 56
    },
    {
      "heading": "branches.",
      "level": 3,
      "page": 56
    },
    {
      "heading": "Git merge is 𝐧𝐨𝐧-𝐝𝐞𝐬𝐭𝐫𝐮𝐜𝐭𝐢𝐯𝐞. Neither the main nor the feature branch is changed.",
      "level": 3,
      "page": 57
    },
    {
      "heading": "𝐆𝐢𝐭 𝐑𝐞𝐛𝐚𝐬𝐞",
      "level": 3,
      "page": 57
    },
    {
      "heading": "Git rebase moves the feature branch histories to the head of the main branch. It creates new",
      "level": 3,
      "page": 57
    },
    {
      "heading": "commits E’, F’, and G’ for each commit in the feature branch.",
      "level": 3,
      "page": 57
    },
    {
      "heading": "The benefit of rebase is that it has 𝐥𝐢𝐧𝐞𝐚𝐫 𝐜𝐨𝐦𝐦𝐢𝐭 𝐡𝐢𝐬𝐭𝐨𝐫𝐲.",
      "level": 3,
      "page": 57
    },
    {
      "heading": "Rebase can be dangerous if “the golden rule of git rebase” is not followed.",
      "level": 3,
      "page": 57
    },
    {
      "heading": "𝐓𝐡𝐞 𝐆𝐨𝐥𝐝𝐞𝐧 𝐑𝐮𝐥𝐞 𝐨𝐟 𝐆𝐢𝐭 𝐑𝐞𝐛𝐚𝐬𝐞",
      "level": 3,
      "page": 57
    },
    {
      "heading": "Never use it on public branches!",
      "level": 3,
      "page": 57
    },
    {
      "heading": "What is a cookie?",
      "level": 2,
      "page": 58
    },
    {
      "heading": "Imagine Bob goes to a coffee shop for the first time, orders a medium-sized espresso with two",
      "level": 3,
      "page": 58
    },
    {
      "heading": "sugars. The cashier records Bob’s identity and preferences on a card and hands it over to Bob with a",
      "level": 3,
      "page": 58
    },
    {
      "heading": "cup of coffee.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "The next time Bob goes to the cafe, he shows the cashier the preference card. The cashier",
      "level": 3,
      "page": 58
    },
    {
      "heading": "immediately knows who the customer is and what kind of coffee he likes.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "A cookie acts as the preference card. When we log in to a website, the server issues a cookie to us",
      "level": 3,
      "page": 59
    },
    {
      "heading": "with a small amount of data. The cookie is stored on the client side, so the next time we send a",
      "level": 3,
      "page": 59
    },
    {
      "heading": "request to the server with the cookie, the server knows our identity and preferences immediately",
      "level": 3,
      "page": 59
    },
    {
      "heading": "without looking into the database.",
      "level": 3,
      "page": 59
    },
    {
      "heading": "How does a VPN work?",
      "level": 2,
      "page": 60
    },
    {
      "heading": "This diagram below shows how we access the internet with and without VPNs.",
      "level": 3,
      "page": 60
    },
    {
      "heading": "A VPN, or Virtual Private Network, is a technology that creates a secure, encrypted connection over",
      "level": 3,
      "page": 60
    },
    {
      "heading": "a less secure network, such as the public internet. The primary purpose of a VPN is to provide",
      "level": 3,
      "page": 60
    },
    {
      "heading": "privacy and security to data and communications.",
      "level": 3,
      "page": 60
    },
    {
      "heading": "A VPN acts as a tunnel through which the encrypted data goes from one location to another. Any",
      "level": 3,
      "page": 60
    },
    {
      "heading": "external party cannot see the data transferring.",
      "level": 3,
      "page": 60
    },
    {
      "heading": "A VPN works in 4 steps:",
      "level": 3,
      "page": 60
    },
    {
      "heading": "Step 1 - Establish a secure tunnel between our device and the VPN server.",
      "level": 3,
      "page": 60
    },
    {
      "heading": "Step 2 - Encrypt the data transmitted.",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Step 3 - Mask our IP address, so it appears as if our internet activity is coming from the VPN",
      "level": 3,
      "page": 61
    },
    {
      "heading": "server.",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Step 4 - Our internet traffic is routed through the VPN server.",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Advantages of a VPN:",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Privacy",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Anonymity",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Security",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Encryption",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Masking the original IP address",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Disadvantages of a VPN:",
      "level": 3,
      "page": 61
    },
    {
      "heading": "VPN blocking",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Slow down connections",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Trust in VPN provider",
      "level": 3,
      "page": 61
    },
    {
      "heading": "Top Software Architectural Styles",
      "level": 2,
      "page": 62
    },
    {
      "heading": "In software development, architecture plays a crucial role in shaping the structure and behavior of",
      "level": 3,
      "page": 62
    },
    {
      "heading": "software systems. It provides a blueprint for system design, detailing how components interact with",
      "level": 3,
      "page": 62
    },
    {
      "heading": "each other to deliver specific functionality. They also offer solutions to common problems, saving",
      "level": 3,
      "page": 62
    },
    {
      "heading": "time and effort and leading to more robust and maintainable systems.",
      "level": 3,
      "page": 62
    },
    {
      "heading": "However, with the vast array of architectural styles and patterns available, it can take time to discern",
      "level": 3,
      "page": 63
    },
    {
      "heading": "which approach best suits a particular project or system. Aims to shed light on these concepts,",
      "level": 3,
      "page": 63
    },
    {
      "heading": "helping you make informed decisions in your architectural endeavors.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "To help you navigate the vast landscape of architectural styles and patterns, there is a cheat sheet",
      "level": 3,
      "page": 63
    },
    {
      "heading": "that encapsulates all. This cheat sheet is a handy reference guide that you can use to quickly recall",
      "level": 3,
      "page": 63
    },
    {
      "heading": "the main characteristics of each architectural style and pattern.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "Understanding Database Types",
      "level": 2,
      "page": 64
    },
    {
      "heading": "To make the best decision for our projects, it is essential to understand the various types of",
      "level": 3,
      "page": 64
    },
    {
      "heading": "databases available in the market. We need to consider key characteristics of different database",
      "level": 3,
      "page": 64
    },
    {
      "heading": "types, including popular options for each, and compare their use cases.",
      "level": 3,
      "page": 64
    },
    {
      "heading": "Cloud Security Cheat Sheet ​",
      "level": 2,
      "page": 65
    },
    {
      "heading": "Cloud security is the top priority for any business because it ensures the safety and privacy of their",
      "level": 3,
      "page": 65
    },
    {
      "heading": "digital assets in the cloud.",
      "level": 3,
      "page": 65
    },
    {
      "heading": "Having said that, it is not that simple, especially with so many services, applications, and potential",
      "level": 3,
      "page": 65
    },
    {
      "heading": "threats to consider.",
      "level": 3,
      "page": 65
    },
    {
      "heading": "The complexity of modern cloud environments requires diligent planning, robust security measures,",
      "level": 3,
      "page": 65
    },
    {
      "heading": "and continuous monitoring to protect against data breaches, cyberattacks, and compliance",
      "level": 3,
      "page": 65
    },
    {
      "heading": "violations.",
      "level": 3,
      "page": 65
    },
    {
      "heading": "Businesses must proactively invest in cloud security practices, stay informed about evolving threats,",
      "level": 3,
      "page": 65
    },
    {
      "heading": "and adapt their strategies to mitigate risks effectively and maintain trust with their customers and",
      "level": 3,
      "page": 65
    },
    {
      "heading": "partners.",
      "level": 3,
      "page": 65
    },
    {
      "heading": "Especially with multi-cloud implementations, the complexity grows. Keeping a watchful eye on the",
      "level": 3,
      "page": 66
    },
    {
      "heading": "services and resources scattered across multiple cloud providers can be challenging.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "It demands a comprehensive understanding of each cloud platform's unique security features,",
      "level": 3,
      "page": 66
    },
    {
      "heading": "configurations, and best practices.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "Happy to introduce the cloud security cheat sheet that maps the cloud services across three popular",
      "level": 3,
      "page": 66
    },
    {
      "heading": "cloud providers and helps you to quickly navigate the complexities of cloud security.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "Over to you: How do you track the security offerings available in the cloud?",
      "level": 3,
      "page": 66
    },
    {
      "heading": "GitOps Workflow - Simplified Visual Guide",
      "level": 2,
      "page": 67
    },
    {
      "heading": "GitOps brought a shift in how software and infrastructure are managed with Git as the central hub for",
      "level": 3,
      "page": 67
    },
    {
      "heading": "managing and automating the entire lifecycle of applications and infrastructure.",
      "level": 3,
      "page": 67
    },
    {
      "heading": "It's built on the principles of version control, collaboration, and continuous integration and",
      "level": 3,
      "page": 67
    },
    {
      "heading": "deployment (CI/CD).",
      "level": 3,
      "page": 67
    },
    {
      "heading": "Key features include:",
      "level": 3,
      "page": 68
    },
    {
      "heading": "1.​ Version Control and Collaboration:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Centralizing code, configurations, and infrastructure in Git for control and collaboration.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "2.​ Declarative System:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Describing the system's desired state for easier version control.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "3.​ Automated Delivery:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Automating deployment through Git-triggered processes, closely integrated with CI/CD",
      "level": 3,
      "page": 68
    },
    {
      "heading": "pipelines.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "4.​ Immutable Infrastructure:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Making changes via Git instead of directly in the live environment to prevent inconsistencies.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "5.​ Observability and Feedback:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Monitoring systems in real-time to align the actual state with Git's declared state.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "6.​ Security and Compliance:​",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Tracking changes in Git for security and compliance, with role-based access for added",
      "level": 3,
      "page": 68
    },
    {
      "heading": "control.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Over to you: Do you see GitOps' declarative approach speeding up your deployments?",
      "level": 3,
      "page": 68
    },
    {
      "heading": "How does “scan to pay” work?",
      "level": 2,
      "page": 69
    },
    {
      "heading": "How do you pay from your digital wallet, such as Paypal, Venmo, Paytm, by scanning the QR code?",
      "level": 3,
      "page": 69
    },
    {
      "heading": "To understand the process involved, we need to divide the “scan to pay” process into two",
      "level": 3,
      "page": 69
    },
    {
      "heading": "sub-processes:",
      "level": 3,
      "page": 69
    },
    {
      "heading": "1.​ Merchant generates a QR code and displays it on the screen",
      "level": 3,
      "page": 69
    },
    {
      "heading": "2.​ Consumer scans the QR code and pays",
      "level": 3,
      "page": 69
    },
    {
      "heading": "Here are the steps for generating the QR code:",
      "level": 3,
      "page": 70
    },
    {
      "heading": "1.​ When you want to pay for your shopping, the cashier tallies up all the goods and calculates",
      "level": 3,
      "page": 70
    },
    {
      "heading": "the total amount due, for example, $123.45. The checkout has an order ID of SN129803.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "The cashier clicks the “checkout” button.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "2.​ The cashier’s computer sends the order ID and the amount to PSP.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "3.​ The PSP saves this information to the database and generates a QR code URL.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "4.​ PSP’s Payment Gateway service reads the QR code URL.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "5.​ The payment gateway returns the QR code URL to the merchant’s computer.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "6.​ The merchant’s computer sends the QR code URL (or image) to the checkout counter.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "7.​ The checkout counter displays the QR code.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "These 7 steps complete in less than a second. Now it’s the consumer’s turn to pay from their digital",
      "level": 3,
      "page": 70
    },
    {
      "heading": "wallet by scanning the QR code:",
      "level": 3,
      "page": 70
    },
    {
      "heading": "1.​ The consumer opens their digital wallet app to scan the QR code.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "2.​ After confirming the amount is correct, the client clicks the “pay” button.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "3.​ The digital wallet App notifies the PSP that the consumer has paid the given QR code.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "4.​ The PSP payment gateway marks this QR code as paid and returns a success message to",
      "level": 3,
      "page": 70
    },
    {
      "heading": "the consumer’s digital wallet App.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "5.​ The PSP payment gateway notifies the merchant that the consumer has paid the given QR",
      "level": 3,
      "page": 70
    },
    {
      "heading": "code.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "How do Search Engines Work?",
      "level": 2,
      "page": 71
    },
    {
      "heading": "The diagram below shows a high-level walk-through of a search engine.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Step 1 - Crawling​",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Web Crawlers scan the internet for web pages. They follow the URL links from one page to",
      "level": 3,
      "page": 71
    },
    {
      "heading": "another and store URLs in the URL store. The crawlers discover new content, including web",
      "level": 3,
      "page": 71
    },
    {
      "heading": "pages, images, videos, and files.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Step 2 - Indexing​",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Once a web page is crawled, the search engine parses the page and indexes the content",
      "level": 3,
      "page": 71
    },
    {
      "heading": "found on the page in a database. The content is analyzed and categorized. For example,",
      "level": 3,
      "page": 71
    },
    {
      "heading": "keywords, site quality, content freshness, and many other factors are assessed to",
      "level": 3,
      "page": 71
    },
    {
      "heading": "understand what the page is about.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Step 3 - Ranking​",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Search engines use complex algorithms to determine the order of search results. These",
      "level": 3,
      "page": 71
    },
    {
      "heading": "algorithms consider various factors, including keywords, pages' relevance, content quality,",
      "level": 3,
      "page": 71
    },
    {
      "heading": "personalize results based on the user's past search history, location, device, and other",
      "level": 3,
      "page": 71
    },
    {
      "heading": "personal factors.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "Step 4 - Querying​",
      "level": 3,
      "page": 72
    },
    {
      "heading": "When a user performs a search, the search engine sifts through its index to provide the most",
      "level": 3,
      "page": 72
    },
    {
      "heading": "relevant results.",
      "level": 3,
      "page": 72
    },
    {
      "heading": "The Payments Ecosystem",
      "level": 2,
      "page": 73
    },
    {
      "heading": "How do fintech startups find new opportunities among so many payment companies? What do",
      "level": 3,
      "page": 73
    },
    {
      "heading": "PayPal, Stripe, and Square do exactly?",
      "level": 3,
      "page": 73
    },
    {
      "heading": "Steps 0-1: The cardholder opens an account in the issuing bank and gets the debit/credit card. The",
      "level": 3,
      "page": 74
    },
    {
      "heading": "merchant registers with ISO (Independent Sales Organization) or MSP (Member Service Provider)",
      "level": 3,
      "page": 74
    },
    {
      "heading": "for in-store sales. ISO/MSP partners with payment processors to open merchant accounts.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Steps 2-5: The acquiring process.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "The payment gateway accepts the purchase transaction and collects payment information. It is then",
      "level": 3,
      "page": 74
    },
    {
      "heading": "sent to a payment processor, which uses customer information to collect payments. The acquiring",
      "level": 3,
      "page": 74
    },
    {
      "heading": "processor sends the transaction to the card network. It also owns and operates the merchant’s",
      "level": 3,
      "page": 74
    },
    {
      "heading": "account during settlement, which doesn’t happen in real-time.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Steps 6-8: The issuing process.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "The issuing processor talks to the card network on the issuing bank’s behalf. It validates and",
      "level": 3,
      "page": 74
    },
    {
      "heading": "operates the customer’s account.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "I’ve listed some companies in different verticals in the diagram. Notice payment companies usually",
      "level": 3,
      "page": 74
    },
    {
      "heading": "start from one vertical, but later expand to multiple verticals.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Object-oriented Programming: A Primer",
      "level": 2,
      "page": 75
    },
    {
      "heading": "I wrote a blog post about this topic. It covers:",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Background of OOP",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Classes and Objects",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Cornerstones of Object-Oriented Programming",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Encapsulation",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Abstraction",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Inheritance",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Polymorphism",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Where do we cache data?",
      "level": 2,
      "page": 76
    },
    {
      "heading": "Data is cached everywhere, from the front end to the back end!",
      "level": 3,
      "page": 76
    },
    {
      "heading": "There are 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐥𝐚𝐲𝐞𝐫𝐬 along the flow.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "1.​ Client apps: HTTP responses can be cached by the browser. We request data over HTTP for",
      "level": 3,
      "page": 76
    },
    {
      "heading": "the first time, and it is returned with an expiry policy in the HTTP header; we request data",
      "level": 3,
      "page": 76
    },
    {
      "heading": "again, and the client app tries to retrieve the data from the browser cache first.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "2.​ CDN: CDN caches static web resources. The clients can retrieve data from a CDN node",
      "level": 3,
      "page": 76
    },
    {
      "heading": "nearby.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "3.​ Load Balancer: The load Balancer can cache resources as well.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "4.​ Messaging infra: Message brokers store messages on disk first, and then consumers",
      "level": 3,
      "page": 77
    },
    {
      "heading": "retrieve them at their own pace. Depending on the retention policy, the data is cached in",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Kafka clusters for a period of time.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "5.​ Services: There are multiple layers of cache in a service. If the data is not cached in the CPU",
      "level": 3,
      "page": 77
    },
    {
      "heading": "cache, the service will try to retrieve the data from memory. Sometimes the service has a",
      "level": 3,
      "page": 77
    },
    {
      "heading": "second-level cache to store data on disk.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "6.​ Distributed Cache: Distributed cache like Redis hold key-value pairs for multiple services in",
      "level": 3,
      "page": 77
    },
    {
      "heading": "memory. It provides much better read/write performance than the database.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "7.​ Full-text Search: we sometimes need to use full-text searches like Elastic Search for",
      "level": 3,
      "page": 77
    },
    {
      "heading": "document search or log search. A copy of data is indexed in the search engine as well.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "8.​ Database: Even in the database, we have different levels of caches:",
      "level": 3,
      "page": 77
    },
    {
      "heading": "WAL(Write-ahead Log): data is written to WAL first before building the B tree index",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Bufferpool: A memory area allocated to cache query results",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Materialized View: Pre-compute query results and store them in the database tables",
      "level": 3,
      "page": 77
    },
    {
      "heading": "for better query performance",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Transaction log: record all the transactions and database updates",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Replication Log: used to record the replication state in a database cluster",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Over to you: With the data cached at so many levels, how can we guarantee the 𝐬𝐞𝐧𝐬𝐢𝐭𝐢𝐯𝐞 𝐮𝐬𝐞𝐫 𝐝𝐚𝐭𝐚",
      "level": 3,
      "page": 77
    },
    {
      "heading": "is completely erased from the systems?",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Flowchart of how slack decides to send a notification",
      "level": 2,
      "page": 78
    },
    {
      "heading": "It is a great example of why a simple feature may take much longer to develop than many people",
      "level": 3,
      "page": 78
    },
    {
      "heading": "think.",
      "level": 3,
      "page": 78
    },
    {
      "heading": "When we have a great design, users may not notice the complexity because it feels like the feature",
      "level": 3,
      "page": 78
    },
    {
      "heading": "just working as intended.",
      "level": 3,
      "page": 78
    },
    {
      "heading": "What’s your takeaway from this diagram?",
      "level": 3,
      "page": 78
    },
    {
      "heading": "What is the best way to learn SQL?",
      "level": 2,
      "page": 79
    },
    {
      "heading": "In 1986, SQL (Structured Query Language) became a standard. Over the next 40 years, it became",
      "level": 3,
      "page": 79
    },
    {
      "heading": "the dominant language for relational database management systems. Reading the latest standard",
      "level": 3,
      "page": 79
    },
    {
      "heading": "(ANSI SQL 2016) can be time-consuming. How can I learn it?",
      "level": 3,
      "page": 79
    },
    {
      "heading": "There are 5 components of the SQL language:",
      "level": 3,
      "page": 79
    },
    {
      "heading": "DDL: data definition language, such as CREATE, ALTER, DROP",
      "level": 3,
      "page": 79
    },
    {
      "heading": "DQL: data query language, such as SELECT",
      "level": 3,
      "page": 79
    },
    {
      "heading": "DML: data manipulation language, such as INSERT, UPDATE, DELETE",
      "level": 3,
      "page": 79
    },
    {
      "heading": "DCL: data control language, such as GRANT, REVOKE",
      "level": 3,
      "page": 79
    },
    {
      "heading": "TCL: transaction control language, such as COMMIT, ROLLBACK",
      "level": 3,
      "page": 79
    },
    {
      "heading": "For a backend engineer, you may need to know most of it. As a data analyst, you may need to have",
      "level": 3,
      "page": 79
    },
    {
      "heading": "a good understanding of DQL. Select the topics that are most relevant to you.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Over to you: What does this SQL statement do in PostgreSQL: “select payload->ids->0 from",
      "level": 3,
      "page": 79
    },
    {
      "heading": "events”?",
      "level": 3,
      "page": 79
    },
    {
      "heading": "What is gRPC?",
      "level": 2,
      "page": 80
    },
    {
      "heading": "The diagram below shows important aspects of understanding gRPC.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "gRPC is a high-performance, open-source universal RPC (Remote Procedure Call) framework",
      "level": 3,
      "page": 80
    },
    {
      "heading": "initially developed by Google. It leverages HTTP/2 for transport, Protocol Buffers as the interface",
      "level": 3,
      "page": 80
    },
    {
      "heading": "description language, and provides features such as authentication, load balancing, and more.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "gRPC is designed to enable efficient and robust communication between services in a microservices",
      "level": 3,
      "page": 80
    },
    {
      "heading": "architecture, making it a popular choice for building distributed systems and APIs.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "Key Features of gRPC:",
      "level": 3,
      "page": 80
    },
    {
      "heading": "1.​ Protocol Buffers: By default, gRPC uses Protocol Buffers (proto files) as its interface",
      "level": 3,
      "page": 80
    },
    {
      "heading": "definition language (IDL). This makes gRPC messages smaller and faster compared to",
      "level": 3,
      "page": 80
    },
    {
      "heading": "JSON or XML.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "2.​ HTTP/2 Based Transport: gRPC uses HTTP/2 for transport, which allows for many",
      "level": 3,
      "page": 80
    },
    {
      "heading": "improvements over HTTP/1.x.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "3.​ Multiple Language Support: gRPC supports a wide range of programming languages.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "4.​ Bi-Directional Streaming: gRPC supports streaming requests and responses, allowing for the",
      "level": 3,
      "page": 81
    },
    {
      "heading": "development of sophisticated real-time applications with bidirectional communication like",
      "level": 3,
      "page": 81
    },
    {
      "heading": "chat services.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "How do live streaming platforms like YouTube Live, TikTok",
      "level": 2,
      "page": 82
    },
    {
      "heading": "Live, or Twitch work? ​",
      "level": 2,
      "page": 82
    },
    {
      "heading": "Live streaming is challenging because the video content is sent over the internet in near real-time.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Video processing is compute-intensive. Sending a large volume of video content over the internet",
      "level": 3,
      "page": 82
    },
    {
      "heading": "takes time. These factors make live streaming challenging.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "The diagram below explains what happens behind the scenes to make this possible.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Step 1: The streamer starts their stream. The source could be any video and audio source wired up",
      "level": 3,
      "page": 82
    },
    {
      "heading": "to an encoder",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Step 2: To provide the best upload condition for the streamer, most live streaming platforms provide",
      "level": 3,
      "page": 83
    },
    {
      "heading": "point-of-presence servers worldwide. The streamer connects to a point-of-presence server closest to",
      "level": 3,
      "page": 83
    },
    {
      "heading": "them.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Step 3: The incoming video stream is transcoded to different resolutions, and divided into smaller",
      "level": 3,
      "page": 83
    },
    {
      "heading": "video segments a few seconds in length.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Step 4: The video segments are packaged into different live streaming formats that video players",
      "level": 3,
      "page": 83
    },
    {
      "heading": "can understand. The most common live-streaming format is HLS, or HTTP Live Streaming.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Step 5: The resulting HLS manifest and video chunks from the packaging step are cached by the",
      "level": 3,
      "page": 83
    },
    {
      "heading": "CDN.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Step 6: Finally, the video starts to arrive at the viewer’s video player.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Step 7-8: To support replay, videos can be optionally stored in storage such as Amazon S3.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Linux Boot Process Illustrated",
      "level": 2,
      "page": 84
    },
    {
      "heading": "The diagram below shows the steps.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Step 1 - When we turn on the power, BIOS (Basic Input/Output System) or UEFI (Unified Extensible",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Firmware Interface) firmware is loaded from non-volatile memory, and executes POST (Power On",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Self Test).",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Step 2 - BIOS/UEFI detects the devices connected to the system, including CPU, RAM, and storage.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Step 3 - Choose a booting device to boot the OS from. This can be the hard drive, the network",
      "level": 3,
      "page": 85
    },
    {
      "heading": "server, or CD ROM.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "Step 4 - BIOS/UEFI runs the boot loader (GRUB), which provides a menu to choose the OS or the",
      "level": 3,
      "page": 85
    },
    {
      "heading": "kernel functions.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "Step 5 - After the kernel is ready, we now switch to the user space. The kernel starts up systemd as",
      "level": 3,
      "page": 85
    },
    {
      "heading": "the first user-space process, which manages the processes and services, probes all remaining",
      "level": 3,
      "page": 85
    },
    {
      "heading": "hardware, mounts filesystems, and runs a desktop environment.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "units are executed as well.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "Step 7 - The system runs a set of startup scripts and configures the environment.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "Step 8 - The users are presented with a login window. The system is now ready.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "How does Visa make money?",
      "level": 2,
      "page": 86
    },
    {
      "heading": "Why is the credit card called “𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐩𝐫𝐨𝐟𝐢𝐭𝐚𝐛𝐥𝐞 product in banks”? How does VISA/Mastercard",
      "level": 3,
      "page": 86
    },
    {
      "heading": "make money?",
      "level": 3,
      "page": 86
    },
    {
      "heading": "The diagram below shows the economics of the credit card payment flow.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "1. The cardholder pays a merchant $100 to buy a product.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "2. The merchant benefits from the use of the credit card with higher sales volume, and needs to",
      "level": 3,
      "page": 86
    },
    {
      "heading": "compensate the issuer and the card network for providing the payment service. The acquiring bank",
      "level": 3,
      "page": 86
    },
    {
      "heading": "sets a fee with the merchant, called the “𝐦𝐞𝐫𝐜𝐡𝐚𝐧𝐭 𝐝𝐢𝐬𝐜𝐨𝐮𝐧𝐭 𝐟𝐞𝐞.”",
      "level": 3,
      "page": 86
    },
    {
      "heading": "3 - 4. The acquiring bank keeps $0.25 as the 𝐚𝐜𝐪𝐮𝐢𝐫𝐢𝐧𝐠 𝐦𝐚𝐫𝐤𝐮𝐩, and $1.75 is paid to the issuing",
      "level": 3,
      "page": 87
    },
    {
      "heading": "bank as the 𝐢𝐧𝐭𝐞𝐫𝐜𝐡𝐚𝐧𝐠𝐞 𝐟𝐞𝐞. The merchant discount fee should cover the interchange fee.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "The interchange fee is set by the card network because it is less efficient for each issuing bank to",
      "level": 3,
      "page": 87
    },
    {
      "heading": "negotiate fees with each merchant.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "5. The card network sets up the 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 𝐚𝐬𝐬𝐞𝐬𝐬𝐦𝐞𝐧𝐭𝐬 𝐚𝐧𝐝 𝐟𝐞𝐞𝐬 with each bank, which pays the card",
      "level": 3,
      "page": 87
    },
    {
      "heading": "network for its services every month. For example, VISA charges a 0.11% assessment, plus a",
      "level": 3,
      "page": 87
    },
    {
      "heading": "$0.0195 usage fee, for every swipe.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "6. The cardholder pays the issuing bank for its services.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "Why should the issuing bank be compensated?",
      "level": 3,
      "page": 87
    },
    {
      "heading": "The issuer pays the merchant even if the cardholder fails to pay the issuer.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "The issuer pays the merchant before the cardholder pays the issuer.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "The issuer has other operating costs, including managing customer accounts, providing",
      "level": 3,
      "page": 87
    },
    {
      "heading": "statements, fraud detection, risk management, clearing & settlement, etc.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "Over to you: Does the card network charge the same interchange fee for big merchants as for small",
      "level": 3,
      "page": 87
    },
    {
      "heading": "merchants?",
      "level": 3,
      "page": 87
    },
    {
      "heading": "Session, Cookie, JWT, Token, SSO, and OAuth 2.0 Explained",
      "level": 2,
      "page": 88
    },
    {
      "heading": "in One Diagram",
      "level": 2,
      "page": 88
    },
    {
      "heading": "When you login to a website, your identity needs to be managed. Here is how different solutions",
      "level": 3,
      "page": 88
    },
    {
      "heading": "work:",
      "level": 3,
      "page": 88
    },
    {
      "heading": "Session - The server stores your identity and gives the browser a session ID cookie. This",
      "level": 3,
      "page": 88
    },
    {
      "heading": "allows the server to track login state. But cookies don't work well across devices.",
      "level": 3,
      "page": 88
    },
    {
      "heading": "Token - Your identity is encoded into a token sent to the browser. The browser sends this",
      "level": 3,
      "page": 88
    },
    {
      "heading": "token on future requests for authentication. No server session storage is required. But tokens",
      "level": 3,
      "page": 88
    },
    {
      "heading": "need encryption/decryption.",
      "level": 3,
      "page": 88
    },
    {
      "heading": "JWT - JSON Web Tokens standardize identity tokens using digital signatures for trust. The",
      "level": 3,
      "page": 88
    },
    {
      "heading": "signature is contained in the token so no server session is needed.",
      "level": 3,
      "page": 88
    },
    {
      "heading": "SSO - Single Sign On uses a central authentication service. This allows a single login to",
      "level": 3,
      "page": 89
    },
    {
      "heading": "work across multiple sites.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "OAuth2 - Allows limited access to your data on one site by another site, without giving away",
      "level": 3,
      "page": 89
    },
    {
      "heading": "passwords.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "QR Code - Encodes a random token into a QR code for mobile login. Scanning the code logs",
      "level": 3,
      "page": 89
    },
    {
      "heading": "you in without typing a password.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "Over to you: QR code logins are gaining popularity. Do you know how it works?",
      "level": 3,
      "page": 89
    },
    {
      "heading": "How do we manage configurations in a system?",
      "level": 2,
      "page": 90
    },
    {
      "heading": "The diagram shows a comparison between traditional configuration management and IaC",
      "level": 3,
      "page": 90
    },
    {
      "heading": "(Infrastructure as Code).",
      "level": 3,
      "page": 90
    },
    {
      "heading": "Configuration Management​",
      "level": 3,
      "page": 90
    },
    {
      "heading": "The practice is designed to manage and provision IT infrastructure through systematic and",
      "level": 3,
      "page": 90
    },
    {
      "heading": "repeatable processes. This is critical for ensuring that the system performs as intended.​",
      "level": 3,
      "page": 90
    },
    {
      "heading": "Traditional configuration management focuses on maintaining the desired state of the",
      "level": 3,
      "page": 90
    },
    {
      "heading": "system's configuration items, such as servers, network devices, and applications, after they",
      "level": 3,
      "page": 90
    },
    {
      "heading": "have been provisioned.​",
      "level": 3,
      "page": 90
    },
    {
      "heading": "It usually involves initial manual setup by DevOps. Changes are managed by step-by-step",
      "level": 3,
      "page": 90
    },
    {
      "heading": "commands.​",
      "level": 3,
      "page": 90
    },
    {
      "heading": "What is IaC?​",
      "level": 3,
      "page": 91
    },
    {
      "heading": "IaC, on the hand, represents a shift in how infrastructure is provisioned and managed,",
      "level": 3,
      "page": 91
    },
    {
      "heading": "treating infrastructure setup and changes as software development practices.​",
      "level": 3,
      "page": 91
    },
    {
      "heading": "IaC automates the provisioning of infrastructure, starting and managing the system through",
      "level": 3,
      "page": 91
    },
    {
      "heading": "code. It often uses a declarative approach, where the desired state of the infrastructure is",
      "level": 3,
      "page": 91
    },
    {
      "heading": "described.​",
      "level": 3,
      "page": 91
    },
    {
      "heading": "Tools like Terraform, AWS CloudFormation, Chef, and Puppet are used to define",
      "level": 3,
      "page": 91
    },
    {
      "heading": "infrastructure in code files that are source controlled.​",
      "level": 3,
      "page": 91
    },
    {
      "heading": "IaC represents an evolution towards automation, repeatability, and the application of",
      "level": 3,
      "page": 91
    },
    {
      "heading": "software development practices to infrastructure management.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "What is CSS (Cascading Style Sheets)?",
      "level": 2,
      "page": 92
    },
    {
      "heading": "Front-end development requires not only content presentation, but also good-looking. CSS is a",
      "level": 3,
      "page": 92
    },
    {
      "heading": "markup language used to describe how elements on a web page should be rendered.",
      "level": 3,
      "page": 92
    },
    {
      "heading": "▶️ What CSS does?",
      "level": 3,
      "page": 92
    },
    {
      "heading": "CSS separates the content and presentation of a document. In the early days of web development,",
      "level": 3,
      "page": 92
    },
    {
      "heading": "HTML acted as both content and style.",
      "level": 3,
      "page": 92
    },
    {
      "heading": "CSS divides structure (HTML) and style (CSS). This has many benefits, for example, when we",
      "level": 3,
      "page": 93
    },
    {
      "heading": "change the color scheme of a web page, all we need to do is to tweak the CSS file.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "▶️How CSS works?",
      "level": 3,
      "page": 93
    },
    {
      "heading": "CSS consists of a selector and a set of properties, which can be thought of as individual rules.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "Selectors are used to locate HTML elements that we want to change the style of, and properties are",
      "level": 3,
      "page": 93
    },
    {
      "heading": "the specific style descriptions for those elements, such as color, size, position, etc.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "For example, if we want to make all the text in a paragraph blue, we write CSS code like this:",
      "level": 3,
      "page": 93
    },
    {
      "heading": "p { color: blue; }",
      "level": 3,
      "page": 93
    },
    {
      "heading": "Here “p” is the selector and “color: blue” is the attribute that declares the color of the paragraph text",
      "level": 3,
      "page": 93
    },
    {
      "heading": "to be blue.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "▶️ Cascading in CSS",
      "level": 3,
      "page": 93
    },
    {
      "heading": "The concept of cascading is crucial to understanding CSS.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "When multiple style rules conflict, the browser needs to decide which rule to use based on a specific",
      "level": 3,
      "page": 93
    },
    {
      "heading": "prioritization rule. The one with the highest weight wins. The weight can be determined by a variety",
      "level": 3,
      "page": 93
    },
    {
      "heading": "of factors, including selector type and the order of the source.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "▶️ Powerful Layout Capabilities of CSS",
      "level": 3,
      "page": 93
    },
    {
      "heading": "In the past, CSS was only used for simple visual effects such as text colors, font styles, or",
      "level": 3,
      "page": 93
    },
    {
      "heading": "backgrounds. Today, CSS has evolved into a powerful layout tool capable of handling complex",
      "level": 3,
      "page": 93
    },
    {
      "heading": "design layouts.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "The “Flexbox” and “Grid” layout modules are two popular CSS layout modules that make it easy to",
      "level": 3,
      "page": 93
    },
    {
      "heading": "create responsive designs and precise placement of web elements, so web developers no longer",
      "level": 3,
      "page": 93
    },
    {
      "heading": "have to rely on complex tables or floating layouts.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "▶️ CSS Animation",
      "level": 3,
      "page": 93
    },
    {
      "heading": "Animation and interactive elements can greatly enhance the user experience.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "CSS3 introduces animation features that allow us to transform and animate elements without using",
      "level": 3,
      "page": 93
    },
    {
      "heading": "JavaScript. For example, “@keyframes” rule defines animation sequences, and the `transition`",
      "level": 3,
      "page": 93
    },
    {
      "heading": "property can be used to set animated transitions from one state to another.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "▶️ Responsive Design",
      "level": 3,
      "page": 93
    },
    {
      "heading": "CSS allows the layout and style of a website to be adapted to different screen sizes and resolutions,",
      "level": 3,
      "page": 93
    },
    {
      "heading": "so that we can provide an optimized browsing experience for different devices such as cell phones,",
      "level": 3,
      "page": 93
    },
    {
      "heading": "tablets and computers.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "What is GraphQL? Is it a replacement for the REST API?",
      "level": 2,
      "page": 94
    },
    {
      "heading": "The diagram below explains different aspects of GraphQL.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "GraphQL is a query language for APIs and a runtime for executing those queries by using a type",
      "level": 3,
      "page": 94
    },
    {
      "heading": "system you define for your data. It was developed internally by Meta in 2012 before being publicly",
      "level": 3,
      "page": 94
    },
    {
      "heading": "released in 2015.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "Unlike the more traditional REST API, GraphQL allows clients to request exactly the data they need,",
      "level": 3,
      "page": 94
    },
    {
      "heading": "making it possible to fetch data from multiple sources with a single query. This efficiency in data",
      "level": 3,
      "page": 94
    },
    {
      "heading": "retrieval can lead to improved performance for web and mobile applications.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "GraphQL servers sit in between the client and the backend services. It can aggregate multiple REST",
      "level": 3,
      "page": 94
    },
    {
      "heading": "requests into one query. GraphQL server organizes the resources in a graph.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "GraphQL supports queries, mutations (applying data modifications to resources), and subscriptions",
      "level": 3,
      "page": 95
    },
    {
      "heading": "(receiving notifications on schema modifications).",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Benefits of GraphQL:",
      "level": 3,
      "page": 95
    },
    {
      "heading": "1.​ GraphQL is more efficient in data fetching.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "2.​ GraphQL returns more accurate results.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "3.​ GraphQL has a strong type system to manage the structure of entities, reducing errors.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "4.​ GraphQL is suitable for managing complex microservices.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Disadvantages of GraphQL",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Increased complexity.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Over fetching by design",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Caching complexity",
      "level": 3,
      "page": 95
    },
    {
      "heading": "System Design Blueprint: The Ultimate Guide",
      "level": 2,
      "page": 96
    },
    {
      "heading": "We've created a template to tackle various system design problems in interviews.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Hope this checklist is useful to guide your discussions during the interview process.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "This briefly touches on the following discussion points:",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Load Balancing",
      "level": 3,
      "page": 96
    },
    {
      "heading": "API Gateway",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Communication Protocols",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Content Delivery Network (CDN)",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Database",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Cache",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Message Queue",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Unique ID Generation",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Scalability",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Availability",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Performance",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Security",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Fault Tolerance and Resilience",
      "level": 3,
      "page": 97
    },
    {
      "heading": "And more",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Polling Vs Webhooks",
      "level": 2,
      "page": 98
    },
    {
      "heading": "Polling",
      "level": 3,
      "page": 98
    },
    {
      "heading": "Polling involves repeatedly checking the external service or endpoint at fixed intervals to retrieve",
      "level": 3,
      "page": 98
    },
    {
      "heading": "updated information.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "It’s like constantly asking, “Do you have something new for me?” even where there might not be any",
      "level": 3,
      "page": 98
    },
    {
      "heading": "update.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "This approach is resource-intensive and inefficient.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "Also, you get updates only when you ask for it, thereby missing any real-time information.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "However, developers have more control over when and how the data is fetched.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "- Webhooks",
      "level": 3,
      "page": 99
    },
    {
      "heading": "Webhooks are like having a built-in notification system.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "You don’t continuously ask for information.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "Instead you create an endpoint in your application server and provide it as a callback to the external",
      "level": 3,
      "page": 99
    },
    {
      "heading": "service (such as a payment processor or a shipping vendor)",
      "level": 3,
      "page": 99
    },
    {
      "heading": "Every time something interesting happens, the external service calls the endpoint and provides the",
      "level": 3,
      "page": 99
    },
    {
      "heading": "information.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "This makes webhooks ideal for dealing with real-time updates because data is pushed to your",
      "level": 3,
      "page": 99
    },
    {
      "heading": "application as soon as it’s available.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "So, when to use Polling or Webhook?",
      "level": 3,
      "page": 99
    },
    {
      "heading": "Polling is a solid option when there is some infrastructural limitation that prevents the use of",
      "level": 3,
      "page": 99
    },
    {
      "heading": "webhooks. Also, with webhooks there is a risk of missed notifications due to network issues, hence",
      "level": 3,
      "page": 99
    },
    {
      "heading": "proper retry mechanisms are needed.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "Webhooks are recommended for applications that need instant data delivery. Also, webhooks are",
      "level": 3,
      "page": 99
    },
    {
      "heading": "efficient in terms of resource utilization especially in high throughput environments.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "How are notifications pushed to our phones or PCs?",
      "level": 2,
      "page": 100
    },
    {
      "heading": "A messaging solution (Firebase) can be used to support the notification push.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "The diagram below shows how Firebase Cloud Messaging (FCM) works.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "FCM is a cross-platform messaging solution that can compose, send, queue, and route notifications",
      "level": 3,
      "page": 100
    },
    {
      "heading": "reliably. It provides a unified API between message senders (app servers) and receivers (client",
      "level": 3,
      "page": 100
    },
    {
      "heading": "apps). The app developer can use this solution to drive user retention.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "Steps 1 - 2: When the client app starts for the first time, the client app sends credentials to FCM,",
      "level": 3,
      "page": 100
    },
    {
      "heading": "including Sender ID, API Key, and App ID. FCM generates Registration Token for the client app",
      "level": 3,
      "page": 100
    },
    {
      "heading": "instance (so the Registration Token is also called Instance ID). This token must be included in the",
      "level": 3,
      "page": 100
    },
    {
      "heading": "notifications.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "Step 3: The client app sends the Registration Token to the app server. The app server caches the",
      "level": 3,
      "page": 100
    },
    {
      "heading": "token for subsequent communications. Over time, the app server has too many tokens to maintain,",
      "level": 3,
      "page": 100
    },
    {
      "heading": "so the recommended practice is to store the token with timestamps and to remove stale tokens from",
      "level": 3,
      "page": 100
    },
    {
      "heading": "time to time.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "Step 4: There are two ways to send messages. One is to compose messages directly in the console",
      "level": 3,
      "page": 101
    },
    {
      "heading": "GUI (Step 4.1,) and the other is to send the messages from the app server (Step 4.2.) We can use",
      "level": 3,
      "page": 101
    },
    {
      "heading": "the Firebase Admin SDK or HTTP for the latter.",
      "level": 3,
      "page": 101
    },
    {
      "heading": "Step 5: FCM receives the messages, and queues the messages in the storage if the devices are not",
      "level": 3,
      "page": 101
    },
    {
      "heading": "online.",
      "level": 3,
      "page": 101
    },
    {
      "heading": "Step 6: FCM forwards the messages to platform-level transport. This transport layer handles",
      "level": 3,
      "page": 101
    },
    {
      "heading": "platform-specific configurations.",
      "level": 3,
      "page": 101
    },
    {
      "heading": "Step 7: The messages are routed to the targeted devices. The notifications can be displayed",
      "level": 3,
      "page": 101
    },
    {
      "heading": "according to the configurations sent from the app server [1].",
      "level": 3,
      "page": 101
    },
    {
      "heading": "Over to you: We can also send messages to a “topic” (just like Kafka) in Step 4. When should the",
      "level": 3,
      "page": 101
    },
    {
      "heading": "client app subscribe to the topic?",
      "level": 3,
      "page": 101
    },
    {
      "heading": "Reference Material: Google firebase documentation",
      "level": 3,
      "page": 101
    },
    {
      "heading": "9 best practices for developing microservices",
      "level": 2,
      "page": 102
    },
    {
      "heading": "When we develop microservices, we need to follow the following best practices:",
      "level": 3,
      "page": 102
    },
    {
      "heading": "1.​ Use separate data storage for each microservice",
      "level": 3,
      "page": 102
    },
    {
      "heading": "2.​ Keep code at a similar level of maturity",
      "level": 3,
      "page": 102
    },
    {
      "heading": "3.​ Separate build for each microservice",
      "level": 3,
      "page": 102
    },
    {
      "heading": "4.​ Assign each microservice with a single responsibility",
      "level": 3,
      "page": 102
    },
    {
      "heading": "5.​ Deploy into containers",
      "level": 3,
      "page": 102
    },
    {
      "heading": "6.​ Design stateless services",
      "level": 3,
      "page": 102
    },
    {
      "heading": "7.​ Adopt domain-driven design",
      "level": 3,
      "page": 102
    },
    {
      "heading": "8.​ Design micro frontend",
      "level": 3,
      "page": 102
    },
    {
      "heading": "9.​ Orchestrating microservices",
      "level": 3,
      "page": 102
    },
    {
      "heading": "Oauth 2.0 Explained With Simple Terms",
      "level": 2,
      "page": 103
    },
    {
      "heading": "OAuth 2.0 is a powerful and secure framework that allows different applications to securely interact",
      "level": 3,
      "page": 103
    },
    {
      "heading": "with each other on behalf of users without sharing sensitive credentials.",
      "level": 3,
      "page": 103
    },
    {
      "heading": "The entities involved in OAuth are the User, the Server, and the Identity Provider (IDP).",
      "level": 3,
      "page": 103
    },
    {
      "heading": "What Can an OAuth Token Do?",
      "level": 3,
      "page": 103
    },
    {
      "heading": "When you use OAuth, you get an OAuth token that represents your identity and permissions. This",
      "level": 3,
      "page": 103
    },
    {
      "heading": "token can do a few important things:",
      "level": 3,
      "page": 103
    },
    {
      "heading": "Single Sign-On (SSO): With an OAuth token, you can log into multiple services or apps using just",
      "level": 3,
      "page": 104
    },
    {
      "heading": "one login, making life easier and safer.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "Authorization Across Systems: The OAuth token allows you to share your authorization or access",
      "level": 3,
      "page": 104
    },
    {
      "heading": "rights across various systems, so you don't have to log in separately everywhere.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "Accessing User Profile: Apps with an OAuth token can access certain parts of your user profile that",
      "level": 3,
      "page": 104
    },
    {
      "heading": "you allow, but they won't see everything.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "Remember, OAuth 2.0 is all about keeping you and your data safe while making your online",
      "level": 3,
      "page": 104
    },
    {
      "heading": "experiences seamless and hassle-free across different applications and services.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "Over to you: Imagine you have a magical power to grant one wish to OAuth 2.0. What would that",
      "level": 3,
      "page": 104
    },
    {
      "heading": "be? Maybe your suggestions actually lead to OAuth 3.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "How do companies ship code to production?",
      "level": 2,
      "page": 105
    },
    {
      "heading": "The diagram below illustrates the typical workflow.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Step 1: The process starts with a product owner creating user stories based on requirements.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Step 2: The dev team picks up the user stories from the backlog and puts them into a sprint for a",
      "level": 3,
      "page": 105
    },
    {
      "heading": "two-week dev cycle.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Step 3: The developers commit source code into the code repository Git.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "threshold, and gates in SonarQube.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Step 5: Once the build is successful, the build is stored in artifactory. Then the build is deployed into",
      "level": 3,
      "page": 106
    },
    {
      "heading": "the dev environment.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Step 6: There might be multiple dev teams working on different features. The features need to be",
      "level": 3,
      "page": 106
    },
    {
      "heading": "tested independently, so they are deployed to QA1 and QA2.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Step 7: The QA team picks up the new QA environments and performs QA testing, regression",
      "level": 3,
      "page": 106
    },
    {
      "heading": "testing, and performance testing.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Steps 8: Once the QA builds pass the QA team’s verification, they are deployed to the UAT",
      "level": 3,
      "page": 106
    },
    {
      "heading": "environment.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Step 9: If the UAT testing is successful, the builds become release candidates and will be deployed",
      "level": 3,
      "page": 106
    },
    {
      "heading": "to the production environment on schedule.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Step 10: SRE (Site Reliability Engineering) team is responsible for prod monitoring.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Over to you: what's your company's release process look like?",
      "level": 3,
      "page": 106
    },
    {
      "heading": "How do we manage sensitive data in a system?",
      "level": 2,
      "page": 107
    },
    {
      "heading": "The cheat sheet below shows a list of guidelines.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "🔹 What is Sensitive Data?",
      "level": 3,
      "page": 107
    },
    {
      "heading": "Personal Identifiable Information (PII), health information, intellectual property, financial information,",
      "level": 3,
      "page": 107
    },
    {
      "heading": "education and legal records are all sensitive data.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "Most countries have laws and regulations that require the protection of sensitive data. For example,",
      "level": 3,
      "page": 107
    },
    {
      "heading": "the General Data Protection Regulation (GDPR) in the European Union sets stringent rules for data",
      "level": 3,
      "page": 107
    },
    {
      "heading": "and sanctions against the violating entity.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "When we design systems, we need to design for data protection.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "🔹 Encryption & Key Management",
      "level": 3,
      "page": 108
    },
    {
      "heading": "The data transmission needs to be encrypted using SSL. Passwords shouldn’t be stored in plain",
      "level": 3,
      "page": 108
    },
    {
      "heading": "text.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "For key storage, we design different roles including password applicant, password manager and",
      "level": 3,
      "page": 108
    },
    {
      "heading": "auditor, all holding one piece of the key. We will need all three keys to open a lock.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "🔹 Data Desensitization",
      "level": 3,
      "page": 108
    },
    {
      "heading": "Data desensitization, also known as data anonymization or data sanitization, refers to the process of",
      "level": 3,
      "page": 108
    },
    {
      "heading": "removing or modifying personal information from a dataset so that individuals cannot be readily",
      "level": 3,
      "page": 108
    },
    {
      "heading": "identified. This practice is crucial in protecting individuals' privacy and ensuring compliance with data",
      "level": 3,
      "page": 108
    },
    {
      "heading": "protection laws and regulations. Data desensitization is often used when sharing data externally,",
      "level": 3,
      "page": 108
    },
    {
      "heading": "such as for research or statistical analysis, or even internally within an organization, to limit access",
      "level": 3,
      "page": 108
    },
    {
      "heading": "to sensitive information.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "Algorithms like GCM store cipher data and keys separately so that hackers are not able to decipher",
      "level": 3,
      "page": 108
    },
    {
      "heading": "the user data.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "🔹 Minimal Data Permissions",
      "level": 3,
      "page": 108
    },
    {
      "heading": "To protect sensitive data, we should grant minimal permissions to the users. Often we design",
      "level": 3,
      "page": 108
    },
    {
      "heading": "Role-Based Access Control (RBAC) to restrict access to authorized users based on their roles within",
      "level": 3,
      "page": 108
    },
    {
      "heading": "an organization. It is a widely used access control mechanism that simplifies the management of",
      "level": 3,
      "page": 108
    },
    {
      "heading": "user permissions, ensuring that users have access to only the information and resources necessary",
      "level": 3,
      "page": 108
    },
    {
      "heading": "for their roles.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "🔹 Data Lifecycle Management",
      "level": 3,
      "page": 108
    },
    {
      "heading": "When we develop data products like reports or data feeds, we need to design a process to maintain",
      "level": 3,
      "page": 108
    },
    {
      "heading": "data quality. Data developers should be granted with necessary permissions during development.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "After the data is online, they should be revoked from the data access.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "Cloud Load Balancer Cheat Sheet",
      "level": 2,
      "page": 109
    },
    {
      "heading": "Efficient load balancing is vital for optimizing the performance and availability of your applications in",
      "level": 3,
      "page": 109
    },
    {
      "heading": "the cloud.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "However, managing load balancers can be overwhelming, given the various types and configuration",
      "level": 3,
      "page": 109
    },
    {
      "heading": "options available.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "In today's multi-cloud landscape, mastering load balancing is essential to ensure seamless user",
      "level": 3,
      "page": 109
    },
    {
      "heading": "experiences and maximize resource utilization, especially when orchestrating applications across",
      "level": 3,
      "page": 109
    },
    {
      "heading": "multiple cloud providers. Having the right knowledge is key to overcoming these challenges and",
      "level": 3,
      "page": 109
    },
    {
      "heading": "achieving consistent, reliable application delivery.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "In selecting the appropriate load balancer type, it's essential to consider factors such as application",
      "level": 3,
      "page": 110
    },
    {
      "heading": "traffic patterns, scalability requirements, and security considerations. By carefully evaluating your",
      "level": 3,
      "page": 110
    },
    {
      "heading": "specific use case, you can make informed decisions that enhance your cloud infrastructure's",
      "level": 3,
      "page": 110
    },
    {
      "heading": "efficiency and reliability.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "This Cloud Load Balancer cheat sheet would help you in simplifying the decision-making process",
      "level": 3,
      "page": 110
    },
    {
      "heading": "and helping you implement the most effective load balancing strategy for your cloud-based",
      "level": 3,
      "page": 110
    },
    {
      "heading": "applications.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "Over to you: What factors do you believe are most crucial in choosing the right load balancer type for",
      "level": 3,
      "page": 110
    },
    {
      "heading": "your applications?",
      "level": 3,
      "page": 110
    },
    {
      "heading": "What does ACID mean?",
      "level": 2,
      "page": 111
    },
    {
      "heading": "The diagram below explains what ACID means in the context of a database transaction.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "🔹 Atomicity",
      "level": 3,
      "page": 111
    },
    {
      "heading": "The writes in a transaction are executed all at once and cannot be broken into smaller parts. If there",
      "level": 3,
      "page": 111
    },
    {
      "heading": "are faults when executing the transaction, the writes in the transaction are rolled back.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "So atomicity means “all or nothing”.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "🔹 Consistency",
      "level": 3,
      "page": 111
    },
    {
      "heading": "Unlike “consistency” in CAP theorem, which means every read receives the most recent write or an",
      "level": 3,
      "page": 111
    },
    {
      "heading": "error, here consistency means preserving database invariants. Any data written by a transaction",
      "level": 3,
      "page": 111
    },
    {
      "heading": "must be valid according to all defined rules and maintain the database in a good state.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "🔹 Isolation",
      "level": 3,
      "page": 111
    },
    {
      "heading": "When there are concurrent writes from two different transactions, the two transactions are isolated",
      "level": 3,
      "page": 112
    },
    {
      "heading": "from each other. The most strict isolation is “serializability”, where each transaction acts like it is the",
      "level": 3,
      "page": 112
    },
    {
      "heading": "only transaction running in the database. However, this is hard to implement in reality, so we often",
      "level": 3,
      "page": 112
    },
    {
      "heading": "adopt loser isolation level.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "🔹 Durability",
      "level": 3,
      "page": 112
    },
    {
      "heading": "Data is persisted after a transaction is committed even in a system failure. In a distributed system,",
      "level": 3,
      "page": 112
    },
    {
      "heading": "this means the data is replicated to some other nodes.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "CAP, BASE, SOLID, KISS, What do these acronyms mean?",
      "level": 2,
      "page": 113
    },
    {
      "heading": "The diagram below explains the common acronyms in system designs.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "🔹 CAP",
      "level": 3,
      "page": 113
    },
    {
      "heading": "CAP theorem states that any distributed data store can only provide two of the following three",
      "level": 3,
      "page": 113
    },
    {
      "heading": "guarantees:",
      "level": 3,
      "page": 113
    },
    {
      "heading": "1. Consistency - Every read receives the most recent write or an error.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "2. Availability - Every request receives a response.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "3. Partition tolerance - The system continues to operate in network faults.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "However, this theorem was criticized for being too narrow for distributed systems, and we shouldn’t",
      "level": 3,
      "page": 113
    },
    {
      "heading": "use it to categorize the databases. Network faults are guaranteed to happen in distributed systems,",
      "level": 3,
      "page": 113
    },
    {
      "heading": "and we must deal with this in any distributed systems.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "You can read more on this in “Please stop calling databases CP or AP” by Martin Kleppmann.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "🔹 BASE",
      "level": 3,
      "page": 113
    },
    {
      "heading": "The ACID (Atomicity-Consistency-Isolation-Durability) model used in relational databases is too strict",
      "level": 3,
      "page": 114
    },
    {
      "heading": "for NoSQL databases. The BASE principle offers more flexibility, choosing availability over",
      "level": 3,
      "page": 114
    },
    {
      "heading": "consistency. It states that the states will eventually be consistent.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "🔹 SOLID",
      "level": 3,
      "page": 114
    },
    {
      "heading": "SOLID principle is quite famous in OOP. There are 5 components to it.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "1. SRP (Single Responsibility Principle)",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Each unit of code should have one responsibility.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "2. OCP (Open Close Principle)",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Units of code should be open for extension but closed for modification.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "3. LSP (Liskov Substitution Principle)",
      "level": 3,
      "page": 114
    },
    {
      "heading": "A subclass should be able to be substituted by its base class.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "4. ISP (Interface Segregation Principle)",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Expose multiple interfaces with specific responsibilities.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "5. DIP (Dependency Inversion Principle)",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Use abstractions to decouple dependencies in the system.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "🔹 KISS",
      "level": 3,
      "page": 114
    },
    {
      "heading": "\"Keep it simple, stupid!\" is a design principle first noted by the U.S. Navy in 1960. It states that most",
      "level": 3,
      "page": 114
    },
    {
      "heading": "systems work best if they are kept simple.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Over to you: Have you invented any acronyms in your career?",
      "level": 3,
      "page": 114
    },
    {
      "heading": "System Design cheat sheet",
      "level": 2,
      "page": 115
    },
    {
      "heading": "We are often asked to design for high availability, high scalability, and high throughput. What do they",
      "level": 3,
      "page": 115
    },
    {
      "heading": "mean exactly?",
      "level": 3,
      "page": 115
    },
    {
      "heading": "The diagram below is a system design cheat sheet with common solutions.",
      "level": 3,
      "page": 115
    },
    {
      "heading": "1.​ High Availability​",
      "level": 3,
      "page": 115
    },
    {
      "heading": "This means we need to ensure a high agreed level of uptime. We often describe the design",
      "level": 3,
      "page": 115
    },
    {
      "heading": "target as “3 nines” or “4 nines”. “4 nines”, 99.99% uptime, means the service can only be",
      "level": 3,
      "page": 115
    },
    {
      "heading": "down 8.64 seconds per day.​",
      "level": 3,
      "page": 115
    },
    {
      "heading": "To achieve high availability, we need to design redundancy in the system. There are several",
      "level": 3,
      "page": 116
    },
    {
      "heading": "ways to do this:",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Hot-hot: two instances receive the same input and send the output to the",
      "level": 3,
      "page": 116
    },
    {
      "heading": "downstream service. In case one side is down, the other side can immediately take",
      "level": 3,
      "page": 116
    },
    {
      "heading": "over. Since both sides send output to the downstream, the downstream system",
      "level": 3,
      "page": 116
    },
    {
      "heading": "needs to dedupe.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Hot-warm: two instances receive the same input and only the hot side sends the",
      "level": 3,
      "page": 116
    },
    {
      "heading": "output to the downstream service. In case the hot side is down, the warm side takes",
      "level": 3,
      "page": 116
    },
    {
      "heading": "over and starts to send output to the downstream service.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Single-leader cluster: one leader instance receives data from the upstream system",
      "level": 3,
      "page": 116
    },
    {
      "heading": "and replicates to other replicas.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Leaderless cluster: there is no leader in this type of cluster. Any write will get",
      "level": 3,
      "page": 116
    },
    {
      "heading": "replicated to other instances. As long as the number of write instances plus the",
      "level": 3,
      "page": 116
    },
    {
      "heading": "number of read instances are larger than the total number of instances, we should",
      "level": 3,
      "page": 116
    },
    {
      "heading": "get valid data.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "2.​ High Throughput​",
      "level": 3,
      "page": 116
    },
    {
      "heading": "This means the service needs to handle a high number of requests given a period of time.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Commonly used metrics are QPS (query per second) or TPS (transaction per second).​",
      "level": 3,
      "page": 116
    },
    {
      "heading": "To achieve high throughput, we often add caches to the architecture so that the request can",
      "level": 3,
      "page": 116
    },
    {
      "heading": "return without hitting slower I/O devices like databases or disks. We can also increase the",
      "level": 3,
      "page": 116
    },
    {
      "heading": "number of threads for computation-intensive tasks. However, adding too many threads can",
      "level": 3,
      "page": 116
    },
    {
      "heading": "deteriorate the performance. We then need to identify the bottlenecks in the system and",
      "level": 3,
      "page": 116
    },
    {
      "heading": "increase its throughput. Using asynchronous processing can often effectively isolate",
      "level": 3,
      "page": 116
    },
    {
      "heading": "heavy-lifting components.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "3.​ High Scalability​",
      "level": 3,
      "page": 116
    },
    {
      "heading": "This means a system can quickly and easily extend to accommodate more volume",
      "level": 3,
      "page": 116
    },
    {
      "heading": "(horizontal scalability) or more functionalities (vertical scalability). Normally we watch the",
      "level": 3,
      "page": 116
    },
    {
      "heading": "response time to decide if we need to scale the system.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "How will you design the Stack Overflow website?",
      "level": 2,
      "page": 117
    },
    {
      "heading": "If your answer is on-premise servers and monolith (on the right), you would likely fail the interview,",
      "level": 3,
      "page": 117
    },
    {
      "heading": "but that's how it is built in reality!",
      "level": 3,
      "page": 117
    },
    {
      "heading": "𝐖𝐡𝐚𝐭 𝐩𝐞𝐨𝐩𝐥𝐞 𝐭𝐡𝐢𝐧𝐤 𝐢𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐥𝐨𝐨𝐤 𝐥𝐢𝐤𝐞",
      "level": 3,
      "page": 117
    },
    {
      "heading": "The interviewer is probably expecting something on the left side.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "1.​ Microservice is used to decompose the system into small components.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "2.​ Each service has its own database. Use cache heavily.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "3.​ The service is sharded.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "4.​ The services talk to each other asynchronously through message queues.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "5.​ The service is implemented using Event Sourcing with CQRS.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "6.​ Showing off knowledge in distributed systems such as eventual consistency, CAP theorem,",
      "level": 3,
      "page": 117
    },
    {
      "heading": "etc.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "𝐖𝐡𝐚𝐭 𝐢𝐭 𝐚𝐜𝐭𝐮𝐚𝐥𝐥𝐲 𝐢𝐬",
      "level": 3,
      "page": 118
    },
    {
      "heading": "Stack Overflow serves all the traffic with only 9 on-premise web servers, and it’s on monolith! It has",
      "level": 3,
      "page": 118
    },
    {
      "heading": "its own servers and does not run on the cloud.",
      "level": 3,
      "page": 118
    },
    {
      "heading": "This is contrary to all our popular beliefs these days.",
      "level": 3,
      "page": 118
    },
    {
      "heading": "Over to you: what is good architecture, the one that looks fancy during the interview or the one that",
      "level": 3,
      "page": 118
    },
    {
      "heading": "works in reality?",
      "level": 3,
      "page": 118
    },
    {
      "heading": "A nice cheat sheet of different cloud services",
      "level": 2,
      "page": 119
    },
    {
      "heading": "What’s included?",
      "level": 3,
      "page": 119
    },
    {
      "heading": "AWS, Azure, Google Cloud, Oracle Cloud, Alibaba Cloud",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Cloud servers",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Databases",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Message queues and streaming platforms",
      "level": 3,
      "page": 120
    },
    {
      "heading": "Load balancing, DNS routing software",
      "level": 3,
      "page": 120
    },
    {
      "heading": "Security",
      "level": 3,
      "page": 120
    },
    {
      "heading": "Monitoring​",
      "level": 3,
      "page": 120
    },
    {
      "heading": "The one-line change that reduced clone times by a whopping",
      "level": 2,
      "page": 121
    },
    {
      "heading": "99%, says Pinterest",
      "level": 2,
      "page": 121
    },
    {
      "heading": "While it may sound cliché, small changes can definitely create a big impact.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "The Engineering Productivity team at Pinterest witnessed this first-hand.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "They made a small change in the Jenkins build pipeline of their monorepo codebase called",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Pinboard.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "And it brought down clone times from 40 minutes to a staggering 30 seconds.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "For reference, Pinboard is the oldest and largest monorepo at Pinterest. Some facts about it:",
      "level": 3,
      "page": 122
    },
    {
      "heading": "350K commits",
      "level": 3,
      "page": 122
    },
    {
      "heading": "20 GB in size when cloned fully",
      "level": 3,
      "page": 122
    },
    {
      "heading": "60K git pulls on every business day",
      "level": 3,
      "page": 122
    },
    {
      "heading": "Cloning monorepos having a lot of code and history is time consuming. This was exactly what was",
      "level": 3,
      "page": 122
    },
    {
      "heading": "happening with Pinboard.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "The build pipeline (written in Groovy) started with a “Checkout” stage where the repository was",
      "level": 3,
      "page": 122
    },
    {
      "heading": "cloned for the build and test steps.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "The clone options were set to shallow clone, no fetching of tags and only fetching the last 50",
      "level": 3,
      "page": 122
    },
    {
      "heading": "commits.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "But it missed a vital piece of optimization.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "The Checkout step didn’t use the Git refspec option.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "This meant that Git was effectively fetching all refspecs for every build. For the Pinboard monorepo,",
      "level": 3,
      "page": 122
    },
    {
      "heading": "it meant fetching more than 2500 branches.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "𝐒𝐨 - 𝐰𝐡𝐚𝐭 𝐰𝐚𝐬 𝐭𝐡𝐞 𝐟𝐢𝐱?",
      "level": 3,
      "page": 122
    },
    {
      "heading": "The team simply added the refspec option and specified which ref they cared about. It was the",
      "level": 3,
      "page": 122
    },
    {
      "heading": "“master” branch in this case.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "This single change allowed Git clone to deal with only one branch and significantly reduced the",
      "level": 3,
      "page": 122
    },
    {
      "heading": "overall build time of the monorepo.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "Best ways to test system functionality",
      "level": 2,
      "page": 123
    },
    {
      "heading": "It ensures that a system or software application performs as expected, meets user requirements,",
      "level": 3,
      "page": 123
    },
    {
      "heading": "and operates reliably.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "Here we delve into the best ways:",
      "level": 3,
      "page": 123
    },
    {
      "heading": "1.​ Unit Testing: Ensures individual code components work correctly in isolation.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "2.​ Integration Testing: Verifies that different system parts function seamlessly together.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "3.​ System Testing: Assesses the entire system's compliance with user requirements and",
      "level": 3,
      "page": 124
    },
    {
      "heading": "performance.",
      "level": 3,
      "page": 124
    },
    {
      "heading": "4.​ Load Testing: Tests a system's ability to handle high workloads and identifies performance",
      "level": 3,
      "page": 124
    },
    {
      "heading": "issues.",
      "level": 3,
      "page": 124
    },
    {
      "heading": "5.​ Error Testing: Evaluates how the software handles invalid inputs and error conditions.",
      "level": 3,
      "page": 124
    },
    {
      "heading": "6.​ Test Automation: Automates test case execution for efficiency, repeatability, and error",
      "level": 3,
      "page": 124
    },
    {
      "heading": "reduction.",
      "level": 3,
      "page": 124
    },
    {
      "heading": "Over to you: How do you approach testing system functionality in your software development or",
      "level": 3,
      "page": 124
    },
    {
      "heading": "engineering projects?",
      "level": 3,
      "page": 124
    },
    {
      "heading": "Encoding vs Encryption vs Tokenization​",
      "level": 2,
      "page": 125
    },
    {
      "heading": "Encoding, encryption, and tokenization are three distinct processes that handle data in different",
      "level": 3,
      "page": 125
    },
    {
      "heading": "ways for various purposes, including data transmission, security, and compliance.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "In system designs, we need to select the right approach for handling sensitive information.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "🔹 Encoding​",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Encoding converts data into a different format using a scheme that can be easily reversed.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Examples include Base64 encoding, which encodes binary data into ASCII characters, making it",
      "level": 3,
      "page": 125
    },
    {
      "heading": "easier to transmit data over media that are designed to deal with textual data.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Encoding is not meant for securing data. The encoded data can be easily decoded using the same",
      "level": 3,
      "page": 125
    },
    {
      "heading": "scheme without the need for a key.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "🔹 Encryption​",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Encryption involves complex algorithms that use keys for transforming data. Encryption can be",
      "level": 3,
      "page": 125
    },
    {
      "heading": "symmetric (using the same key for encryption and decryption) or asymmetric (using a public key for",
      "level": 3,
      "page": 125
    },
    {
      "heading": "encryption and a private key for decryption).",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Encryption is designed to protect data confidentiality by transforming readable data (plaintext) into",
      "level": 3,
      "page": 126
    },
    {
      "heading": "an unreadable format (ciphertext) using an algorithm and a secret key. Only those with the correct",
      "level": 3,
      "page": 126
    },
    {
      "heading": "key can decrypt and access the original data.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "🔹 Tokenization​",
      "level": 3,
      "page": 126
    },
    {
      "heading": "Tokenization is the process of substituting sensitive data with non-sensitive placeholders called",
      "level": 3,
      "page": 126
    },
    {
      "heading": "tokens. The mapping between the original data and the token is stored securely in a token vault.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "These tokens can be used in various systems and processes without exposing the original data,",
      "level": 3,
      "page": 126
    },
    {
      "heading": "reducing the risk of data breaches.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "Tokenization is often used for protecting credit card information, personal identification numbers, and",
      "level": 3,
      "page": 126
    },
    {
      "heading": "other sensitive data. Tokenization is highly secure, as the tokens do not contain any part of the",
      "level": 3,
      "page": 126
    },
    {
      "heading": "original data and thus cannot be reverse-engineered to reveal the original data. It is particularly",
      "level": 3,
      "page": 126
    },
    {
      "heading": "useful for compliance with regulations like PCI DSS.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "Kubernetes Tools Stack Wheel",
      "level": 2,
      "page": 127
    },
    {
      "heading": "Kubernetes tools continually evolve, offering enhanced capabilities and simplifying container",
      "level": 3,
      "page": 127
    },
    {
      "heading": "orchestration. The innumerable choice of tools speaks about the vastness and the scope of this",
      "level": 3,
      "page": 127
    },
    {
      "heading": "dynamic ecosystem, catering to diverse needs in the world of containerization.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "In fact, getting to know about the existing tools themselves can be a significant endeavor. With new",
      "level": 3,
      "page": 127
    },
    {
      "heading": "tools and updates being introduced regularly, staying informed about their features, compatibility,",
      "level": 3,
      "page": 127
    },
    {
      "heading": "and best practices becomes essential for Kubernetes practitioners, ensuring they can make",
      "level": 3,
      "page": 127
    },
    {
      "heading": "informed decisions and adapt to the ever-changing landscape effectively.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "This tool stack streamlines the decision-making process and keeps up with that evolution, ultimately",
      "level": 3,
      "page": 128
    },
    {
      "heading": "helping you to choose the right combination of tools for your use cases.",
      "level": 3,
      "page": 128
    },
    {
      "heading": "Over to you: I am sure there would be a few awesome tools that are missing here. Which one would",
      "level": 3,
      "page": 128
    },
    {
      "heading": "you like to add?​",
      "level": 3,
      "page": 128
    },
    {
      "heading": "How does Docker work?",
      "level": 2,
      "page": 129
    },
    {
      "heading": "The diagram below shows the architecture of Docker and how it works when we run “docker build”,",
      "level": 3,
      "page": 129
    },
    {
      "heading": "“docker pull” and “docker run”.",
      "level": 3,
      "page": 129
    },
    {
      "heading": "There are 3 components in Docker architecture:",
      "level": 3,
      "page": 129
    },
    {
      "heading": "🔹 Docker client",
      "level": 3,
      "page": 129
    },
    {
      "heading": "The docker client talks to the Docker daemon.",
      "level": 3,
      "page": 129
    },
    {
      "heading": "🔹 Docker host",
      "level": 3,
      "page": 129
    },
    {
      "heading": "The Docker daemon listens for Docker API requests and manages Docker objects such as images,",
      "level": 3,
      "page": 129
    },
    {
      "heading": "containers, networks, and volumes.",
      "level": 3,
      "page": 129
    },
    {
      "heading": "🔹 Docker registry",
      "level": 3,
      "page": 130
    },
    {
      "heading": "A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Let’s take the “docker run” command as an example.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "1.​ Docker pulls the image from the registry.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "2.​ Docker creates a new container.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "3.​ Docker allocates a read-write filesystem to the container.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "4.​ Docker creates a network interface to connect the container to the default network.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "5.​ Docker starts the container.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Top 6 Database Models",
      "level": 2,
      "page": 131
    },
    {
      "heading": "The diagram below shows top 6 data models.",
      "level": 3,
      "page": 131
    },
    {
      "heading": "🔹 Flat Model",
      "level": 3,
      "page": 131
    },
    {
      "heading": "The flat data model is one of the simplest forms of database models. It organizes data into a single",
      "level": 3,
      "page": 131
    },
    {
      "heading": "table where each row represents a record and each column represents an attribute. This model is",
      "level": 3,
      "page": 131
    },
    {
      "heading": "similar to a spreadsheet and is straightforward to understand and implement. However, it lacks the",
      "level": 3,
      "page": 132
    },
    {
      "heading": "ability to efficiently handle complex relationships between data entities.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "🔹 Hierarchical Model",
      "level": 3,
      "page": 132
    },
    {
      "heading": "The hierarchical data model organizes data into a tree-like structure, where each record has a single",
      "level": 3,
      "page": 132
    },
    {
      "heading": "parent but can have multiple children. This model is efficient for scenarios with a clear \"parent-child\"",
      "level": 3,
      "page": 132
    },
    {
      "heading": "relationship among data entities. However, it struggles with many-to-many relationships and can",
      "level": 3,
      "page": 132
    },
    {
      "heading": "become complex and rigid.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "🔹 Relational Model",
      "level": 3,
      "page": 132
    },
    {
      "heading": "Introduced by E.F. Codd in 1970, the relational model represents data in tables (relations), consisting",
      "level": 3,
      "page": 132
    },
    {
      "heading": "of rows (tuples) and columns (attributes). It supports data integrity and avoids redundancy through",
      "level": 3,
      "page": 132
    },
    {
      "heading": "the use of keys and normalization. The relational model's strength lies in its flexibility and the",
      "level": 3,
      "page": 132
    },
    {
      "heading": "simplicity of its query language, SQL (Structured Query Language), making it the most widely used",
      "level": 3,
      "page": 132
    },
    {
      "heading": "data model for traditional database systems. It efficiently handles many-to-many relationships and",
      "level": 3,
      "page": 132
    },
    {
      "heading": "supports complex queries and transactions.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "🔹 Star Schema",
      "level": 3,
      "page": 132
    },
    {
      "heading": "The star schema is a specialized data model used in data warehousing for OLAP (Online Analytical",
      "level": 3,
      "page": 132
    },
    {
      "heading": "Processing) applications. It features a central fact table that contains measurable, quantitative data,",
      "level": 3,
      "page": 132
    },
    {
      "heading": "surrounded by dimension tables that contain descriptive attributes related to the fact data. This",
      "level": 3,
      "page": 132
    },
    {
      "heading": "model is optimized for query performance in analytical applications, offering simplicity and fast data",
      "level": 3,
      "page": 132
    },
    {
      "heading": "retrieval by minimizing the number of joins needed for queries.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "🔹 Snowflake Model",
      "level": 3,
      "page": 132
    },
    {
      "heading": "The snowflake model is a variation of the star schema where the dimension tables are normalized",
      "level": 3,
      "page": 132
    },
    {
      "heading": "into multiple related tables, reducing redundancy and improving data integrity. This results in a",
      "level": 3,
      "page": 132
    },
    {
      "heading": "structure that resembles a snowflake. While the snowflake model can lead to more complex queries",
      "level": 3,
      "page": 132
    },
    {
      "heading": "due to the increased number of joins, it offers benefits in terms of storage efficiency and can be",
      "level": 3,
      "page": 132
    },
    {
      "heading": "advantageous in scenarios where dimension tables are large or frequently updated.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "🔹 Network Model",
      "level": 3,
      "page": 132
    },
    {
      "heading": "The network data model allows each record to have multiple parents and children, forming a graph",
      "level": 3,
      "page": 132
    },
    {
      "heading": "structure that can represent complex relationships between data entities. This model overcomes",
      "level": 3,
      "page": 132
    },
    {
      "heading": "some of the hierarchical model's limitations by efficiently handling many-to-many relationships.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "How do we detect node failures in distributed systems?",
      "level": 2,
      "page": 133
    },
    {
      "heading": "The diagram below shows top 6 Heartbeat Detection Mechanisms.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "Heartbeat mechanisms are crucial in distributed systems for monitoring the health and status of",
      "level": 3,
      "page": 133
    },
    {
      "heading": "various components. Here are several types of heartbeat detection mechanisms commonly used in",
      "level": 3,
      "page": 133
    },
    {
      "heading": "distributed systems:",
      "level": 3,
      "page": 133
    },
    {
      "heading": "🔹 Push-Based Heartbeat",
      "level": 3,
      "page": 133
    },
    {
      "heading": "The most basic form of heartbeat involves a periodic signal sent from one node to another or to a",
      "level": 3,
      "page": 133
    },
    {
      "heading": "monitoring service. If the heartbeat signals stop arriving within a specified interval, the system",
      "level": 3,
      "page": 133
    },
    {
      "heading": "assumes that the node has failed. This is simple to implement, but network congestion can lead to",
      "level": 3,
      "page": 133
    },
    {
      "heading": "false positives.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "🔹 Pull-Based Heartbeat",
      "level": 3,
      "page": 133
    },
    {
      "heading": "Instead of nodes sending heartbeats actively, a central monitor might periodically \"pull\" status",
      "level": 3,
      "page": 133
    },
    {
      "heading": "information from nodes. It reduces network traffic but might increase latency in failure detection.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "🔹 Heartbeat with Health Check",
      "level": 3,
      "page": 134
    },
    {
      "heading": "This includes diagnostic information about the node's health in the heartbeat signal. This information",
      "level": 3,
      "page": 134
    },
    {
      "heading": "can include CPU usage, memory usage, or application-specific metrics. It Provides more detailed",
      "level": 3,
      "page": 134
    },
    {
      "heading": "information about the node, allowing for more nuanced decision-making. However, it Increases",
      "level": 3,
      "page": 134
    },
    {
      "heading": "complexity and potential for larger network overhead.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "🔹 Heartbeat with Timestamps",
      "level": 3,
      "page": 134
    },
    {
      "heading": "Heartbeats that include timestamps can help the receiving node or service determine not just if a",
      "level": 3,
      "page": 134
    },
    {
      "heading": "node is alive, but also if there are network delays affecting communication.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "🔹 Heartbeat with Acknowledgement",
      "level": 3,
      "page": 134
    },
    {
      "heading": "The receiver of the heartbeat message must send back an acknowledgment in this model. This",
      "level": 3,
      "page": 134
    },
    {
      "heading": "ensures that not only is the sender alive, but the network path between the sender and receiver is",
      "level": 3,
      "page": 134
    },
    {
      "heading": "also functional.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "🔹 Heartbeat with Quorum",
      "level": 3,
      "page": 134
    },
    {
      "heading": "In some distributed systems, especially those involving consensus protocols like Paxos or Raft, the",
      "level": 3,
      "page": 134
    },
    {
      "heading": "concept of a quorum (a majority of nodes) is used. Heartbeats might be used to establish or maintain",
      "level": 3,
      "page": 134
    },
    {
      "heading": "a quorum, ensuring that a sufficient number of nodes are operational for the system to make",
      "level": 3,
      "page": 134
    },
    {
      "heading": "decisions. This brings complexity in implementation and managing quorum changes as nodes join or",
      "level": 3,
      "page": 134
    },
    {
      "heading": "leave the system.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "10 Good Coding Principles to improve code quality",
      "level": 2,
      "page": 135
    },
    {
      "heading": "Software development requires good system designs and coding standards. We list 10 good",
      "level": 3,
      "page": 135
    },
    {
      "heading": "coding principles in the diagram below.​",
      "level": 3,
      "page": 135
    },
    {
      "heading": "1.​ Follow Code Specifications​",
      "level": 3,
      "page": 135
    },
    {
      "heading": "When we write code, it is important to follow the industry's well-established norms, like “PEP",
      "level": 3,
      "page": 135
    },
    {
      "heading": "8”, “Google Java Style”, adhering to a set of agreed-upon code specifications ensures that",
      "level": 3,
      "page": 135
    },
    {
      "heading": "the quality of the code is consistent and readable.",
      "level": 3,
      "page": 135
    },
    {
      "heading": "2.​ Documentation and Comments​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Good code should be clearly documented and commented to explain complex logic and",
      "level": 3,
      "page": 136
    },
    {
      "heading": "decisions, and comments should explain why a certain approach was taken (“Why”) rather",
      "level": 3,
      "page": 136
    },
    {
      "heading": "than what exactly is being done (“What”). Documentation and comments should be clear,",
      "level": 3,
      "page": 136
    },
    {
      "heading": "concise, and continuously updated.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "3.​ Robustness​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Good code should be able to handle a variety of unexpected situations and inputs without",
      "level": 3,
      "page": 136
    },
    {
      "heading": "crashing or producing unpredictable results. Most common approach is to catch and handle",
      "level": 3,
      "page": 136
    },
    {
      "heading": "exceptions.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "4.​ Follow the SOLID principle​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "“Single Responsibility”, “Open/Closed”, “Liskov Substitution”, “Interface Segregation”, and",
      "level": 3,
      "page": 136
    },
    {
      "heading": "“Dependency Inversion” - these five principles (SOLID for short) are the cornerstones of",
      "level": 3,
      "page": 136
    },
    {
      "heading": "writing code that scales and is easy to maintain.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "5.​ Make Testing Easy​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Testability of software is particularly important. Good code should be easy to test, both by",
      "level": 3,
      "page": 136
    },
    {
      "heading": "trying to reduce the complexity of each component, and by supporting automated testing to",
      "level": 3,
      "page": 136
    },
    {
      "heading": "ensure that it behaves as expected.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "6.​ Abstraction​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Abstraction requires us to extract the core logic and hide the complexity, thus making the",
      "level": 3,
      "page": 136
    },
    {
      "heading": "code more flexible and generic. Good code should have a moderate level of abstraction,",
      "level": 3,
      "page": 136
    },
    {
      "heading": "neither over-designed nor neglecting long-term expandability and maintainability.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "7.​ Utilize Design Patterns, but don't over-design​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Design patterns can help us solve some common problems. However, every pattern has its",
      "level": 3,
      "page": 136
    },
    {
      "heading": "applicable scenarios. Overusing or misusing design patterns may make your code more",
      "level": 3,
      "page": 136
    },
    {
      "heading": "complex and difficult to understand.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "8.​ Reduce Global Dependencies​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "We can get bogged down in dependencies and confusing state management if we use global",
      "level": 3,
      "page": 136
    },
    {
      "heading": "variables and instances. Good code should rely on localized state and parameter passing.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Functions should be side-effect free.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "9.​ Continuous Refactoring​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Good code is maintainable and extensible. Continuous refactoring reduces technical debt by",
      "level": 3,
      "page": 136
    },
    {
      "heading": "identifying and fixing problems as early as possible.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "10.​Security is a Top Priority​",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Good code should avoid common security vulnerabilities.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Over to you: which one do you prefer, and with which one do you disagree?",
      "level": 3,
      "page": 136
    },
    {
      "heading": "15 Open-Source Projects That Changed the World",
      "level": 2,
      "page": 137
    },
    {
      "heading": "To come up with the list, we tried to look at the overall impact these projects have created on the",
      "level": 3,
      "page": 137
    },
    {
      "heading": "industry and related technologies. Also, we’ve focused on projects that have led to a big change in",
      "level": 3,
      "page": 137
    },
    {
      "heading": "the day-to-day lives of many software developers across the world.",
      "level": 3,
      "page": 137
    },
    {
      "heading": "Web Development",
      "level": 3,
      "page": 137
    },
    {
      "heading": "Node.js: The cross-platform server-side Javascript runtime that brought JS to server-side",
      "level": 3,
      "page": 137
    },
    {
      "heading": "development",
      "level": 3,
      "page": 137
    },
    {
      "heading": "React: The library that became the foundation of many web development frameworks.",
      "level": 3,
      "page": 137
    },
    {
      "heading": "Apache HTTP Server: The highly versatile web server loved by enterprises and startups",
      "level": 3,
      "page": 138
    },
    {
      "heading": "alike. Served as inspiration for many other web servers over the years.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Data Management",
      "level": 3,
      "page": 138
    },
    {
      "heading": "PostgreSQL: An open-source relational database management system that provided a",
      "level": 3,
      "page": 138
    },
    {
      "heading": "high-quality alternative to costly systems",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Redis: The super versatile data store that can be used a cache, message broker and even",
      "level": 3,
      "page": 138
    },
    {
      "heading": "general-purpose storage",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Elasticsearch: A scale solution to search, analyze and visualize large volumes of data",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Developer Tools",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Git: Free and open-source version control tool that allows developer collaboration across the",
      "level": 3,
      "page": 138
    },
    {
      "heading": "globe.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "VSCode: One of the most popular source code editors in the world",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Jupyter Notebook: The web application that lets developers share live code, equations,",
      "level": 3,
      "page": 138
    },
    {
      "heading": "visualizations and narrative text.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Machine Learning & Big Data",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Tensorflow: The leading choice to leverage machine learning techniques",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Apache Spark: Standard tool for big data processing and analytics platforms",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Kafka: Standard platform for building real-time data pipelines and applications.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "DevOps & Containerization",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Docker: The open source solution that allows developers to package and deploy applications",
      "level": 3,
      "page": 138
    },
    {
      "heading": "in a consistent and portable way.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Kubernetes: The heart of Cloud-Native architecture and a platform to manage multiple",
      "level": 3,
      "page": 138
    },
    {
      "heading": "containers",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Linux: The OS that democratized the world of software development.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Over to you: Do you agree with the list? What did we miss?",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Reverse proxy vs. API gateway vs. load balancer​",
      "level": 2,
      "page": 139
    },
    {
      "heading": "As modern websites and applications are like busy beehives, we use a variety of tools to manage",
      "level": 3,
      "page": 139
    },
    {
      "heading": "the buzz. Here we'll explore three superheroes: Reverse Proxy, API Gateway, and Load Balancer.",
      "level": 3,
      "page": 139
    },
    {
      "heading": "🔹Reverse Proxy: change identity",
      "level": 3,
      "page": 139
    },
    {
      "heading": "Fetching data secretly, keeping servers hidden.",
      "level": 3,
      "page": 139
    },
    {
      "heading": "Perfect for shielding sensitive websites from cyber-attacks and prying eyes.",
      "level": 3,
      "page": 139
    },
    {
      "heading": "🔹API Gateway: postman",
      "level": 3,
      "page": 139
    },
    {
      "heading": "Delivers requests to the right services.",
      "level": 3,
      "page": 140
    },
    {
      "heading": "Ideal for bustling applications with numerous intercommunicating services.",
      "level": 3,
      "page": 140
    },
    {
      "heading": "🔹Load Balancer: traffic cop",
      "level": 3,
      "page": 140
    },
    {
      "heading": "Directs traffic evenly across servers, preventing bottlenecks",
      "level": 3,
      "page": 140
    },
    {
      "heading": "Essential for popular websites with heavy traffic and high demand.",
      "level": 3,
      "page": 140
    },
    {
      "heading": "In a nutshell, choose a Reverse Proxy for stealth, an API Gateway for organized communications,",
      "level": 3,
      "page": 140
    },
    {
      "heading": "and a Load Balancer for traffic control. Sometimes, it's wise to have all three - they make a super",
      "level": 3,
      "page": 140
    },
    {
      "heading": "team that keeps your digital kingdom safe and efficient.",
      "level": 3,
      "page": 140
    },
    {
      "heading": "Linux Performance Observability Tools",
      "level": 2,
      "page": 141
    },
    {
      "heading": "Popular interview question: how to diagnose a mysterious process that’s taking too much CPU,",
      "level": 3,
      "page": 141
    },
    {
      "heading": "memory, IO, etc?",
      "level": 3,
      "page": 141
    },
    {
      "heading": "The diagram below illustrates helpful tools in a Linux system.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "🔹‘iostat’ - reports CPU and input/output statistics of the system.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "🔹‘netstat’ - displays statistical data related to IP, TCP, UDP, and ICMP protocols.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "🔹‘lsof’ - lists open files of the current system.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "🔹‘pidstat’ - monitors the utilization of system resources by all or specified processes, including",
      "level": 3,
      "page": 141
    },
    {
      "heading": "CPU, memory, device IO, task switching, threads, etc.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "Top 9 website performance metrics you cannot ignore",
      "level": 2,
      "page": 142
    },
    {
      "heading": "Load Time: This is the time taken by the web browser to download and display the webpage. It’s",
      "level": 3,
      "page": 142
    },
    {
      "heading": "measured in milliseconds.",
      "level": 3,
      "page": 142
    },
    {
      "heading": "Time to First Byte (TTFB): It’s the time taken by the browser to receive the first byte of data from the",
      "level": 3,
      "page": 142
    },
    {
      "heading": "web server. TTFB is crucial because it indicates the general ability of the server to handle traffic.",
      "level": 3,
      "page": 142
    },
    {
      "heading": "Request Count: The number of HTTP requests a browser has to make to fully load the page. The",
      "level": 3,
      "page": 143
    },
    {
      "heading": "lower this count, the faster a website will feel to the user.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "DOMContentLoaded (DCL): This is the time it takes for the full HTML code of a webpage to be",
      "level": 3,
      "page": 143
    },
    {
      "heading": "loaded. The faster this happens, the faster users can see useful functionality. This time doesn’t",
      "level": 3,
      "page": 143
    },
    {
      "heading": "include loading CSS and other assets",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Time to above-the-fold load: “Above the fold” is the area of a webpage that fits in a browser window",
      "level": 3,
      "page": 143
    },
    {
      "heading": "without a user having to scroll down. This is the content that is first seen by the user and often",
      "level": 3,
      "page": 143
    },
    {
      "heading": "dictates whether they’ll continue reading the webpage.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "First Contentful Paint (FCP): This is the time at which content first begins to be “painted” by the",
      "level": 3,
      "page": 143
    },
    {
      "heading": "browser. It can be a text, image, or even background color.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Page Size: This is the total file size of all content and assets that appear on the page. Over the last",
      "level": 3,
      "page": 143
    },
    {
      "heading": "several years, the page size of websites has been growing constantly. The bigger the size of a",
      "level": 3,
      "page": 143
    },
    {
      "heading": "webpage, the longer it will take to load",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Round Trip Time (RTT): This is the amount of time a round trip takes. A round trip constitutes a",
      "level": 3,
      "page": 143
    },
    {
      "heading": "request traveling from the browser to the origin server and the response from the server going to the",
      "level": 3,
      "page": 143
    },
    {
      "heading": "browser. Reducing RTT is one of the key approaches to improving a website’s performance.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Render Blocking Resources: Some resources block other parts of the page from being loaded. It’s",
      "level": 3,
      "page": 143
    },
    {
      "heading": "important to track the number of such resources. The more render-blocking resources a webpage",
      "level": 3,
      "page": 143
    },
    {
      "heading": "has, the greater the delay for the browser to load the page.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Over to you - What other website performance metrics do you track?",
      "level": 3,
      "page": 143
    },
    {
      "heading": "How do we manage data?",
      "level": 2,
      "page": 144
    },
    {
      "heading": "Here are the top 6 data management patterns.​",
      "level": 3,
      "page": 144
    },
    {
      "heading": "🔹 Cache Aside",
      "level": 3,
      "page": 144
    },
    {
      "heading": "When an application needs to access data, it first checks the cache. If the data is not present (a",
      "level": 3,
      "page": 144
    },
    {
      "heading": "cache miss), it fetches the data from the data store, stores it in the cache, and then returns the data",
      "level": 3,
      "page": 144
    },
    {
      "heading": "to the user. This pattern is particularly useful for scenarios where data is read frequently but updated",
      "level": 3,
      "page": 144
    },
    {
      "heading": "less often.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "🔹 Materialized View",
      "level": 3,
      "page": 144
    },
    {
      "heading": "A Materialized View is a database object that contains the results of a query. It is physically stored,",
      "level": 3,
      "page": 144
    },
    {
      "heading": "meaning the data is actually computed and stored on disk, as opposed to being dynamically",
      "level": 3,
      "page": 144
    },
    {
      "heading": "generated upon each request. This can significantly speed up query times for complex calculations",
      "level": 3,
      "page": 144
    },
    {
      "heading": "or aggregations that would otherwise need to be computed on the fly. Materialized views are",
      "level": 3,
      "page": 144
    },
    {
      "heading": "especially beneficial in data warehousing and business intelligence scenarios where query",
      "level": 3,
      "page": 144
    },
    {
      "heading": "performance is critical.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "🔹 CQRS",
      "level": 3,
      "page": 144
    },
    {
      "heading": "CQRS is an architectural pattern that separates the models for reading and writing data. This means",
      "level": 3,
      "page": 145
    },
    {
      "heading": "that the data structures used for querying data (reads) are separated from the structures used for",
      "level": 3,
      "page": 145
    },
    {
      "heading": "updating data (writes). This separation allows for optimization of each operation independently,",
      "level": 3,
      "page": 145
    },
    {
      "heading": "improving performance, scalability, and security. CQRS can be particularly useful in complex",
      "level": 3,
      "page": 145
    },
    {
      "heading": "systems where the read and write operations have very different requirements.",
      "level": 3,
      "page": 145
    },
    {
      "heading": "🔹 Event Sourcing",
      "level": 3,
      "page": 145
    },
    {
      "heading": "Event Sourcing is a pattern where changes to the application state are stored as a sequence of",
      "level": 3,
      "page": 145
    },
    {
      "heading": "events. Instead of storing just the current state of data in a domain, Event Sourcing stores a log of all",
      "level": 3,
      "page": 145
    },
    {
      "heading": "the changes (events) that have occurred over time. This allows the application to reconstruct past",
      "level": 3,
      "page": 145
    },
    {
      "heading": "states and provides an audit trail of changes. Event Sourcing is beneficial in scenarios requiring",
      "level": 3,
      "page": 145
    },
    {
      "heading": "complex business transactions, auditability, and the ability to rollback or replay events.",
      "level": 3,
      "page": 145
    },
    {
      "heading": "🔹 Index Table",
      "level": 3,
      "page": 145
    },
    {
      "heading": "The Index Table pattern involves creating additional tables in a database that are optimized for",
      "level": 3,
      "page": 145
    },
    {
      "heading": "specific query operations. These tables act as secondary indexes and are designed to speed up the",
      "level": 3,
      "page": 145
    },
    {
      "heading": "retrieval of data without requiring a full scan of the primary data store. Index tables are particularly",
      "level": 3,
      "page": 145
    },
    {
      "heading": "useful in scenarios with large datasets and where certain queries are performed frequently.",
      "level": 3,
      "page": 145
    },
    {
      "heading": "🔹 Sharding",
      "level": 3,
      "page": 145
    },
    {
      "heading": "Sharding is a data partitioning pattern where data is divided into smaller, more manageable pieces,",
      "level": 3,
      "page": 145
    },
    {
      "heading": "or \"shards\", each of which can be stored on different database servers. This pattern is used to",
      "level": 3,
      "page": 145
    },
    {
      "heading": "distribute the data across multiple machines to improve scalability and performance. Sharding is",
      "level": 3,
      "page": 145
    },
    {
      "heading": "particularly effective in high-volume applications, as it allows for horizontal scaling, spreading the",
      "level": 3,
      "page": 145
    },
    {
      "heading": "load across multiple servers to handle more users and transactions.",
      "level": 3,
      "page": 145
    },
    {
      "heading": "Comparing Different API Clients: Postman vs. Insomnia vs.",
      "level": 2,
      "page": 146
    },
    {
      "heading": "ReadyAPI vs. Thunder Client vs. Hoppscotch",
      "level": 2,
      "page": 146
    },
    {
      "heading": "Postman is a widely used API lifecycle platform. It emerges as a comprehensive and versatile API",
      "level": 3,
      "page": 146
    },
    {
      "heading": "client suitable for enterprise-level development. Its support for a wide range of protocols, robust",
      "level": 3,
      "page": 146
    },
    {
      "heading": "feature set, and strong performance make it a top choice for complex projects. With an intuitive",
      "level": 3,
      "page": 146
    },
    {
      "heading": "design, collaboration features, and a large community, Postman excels in scenarios requiring",
      "level": 3,
      "page": 146
    },
    {
      "heading": "extensive functionality and community support.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "Insomnia is a powerful API client with extensive features and being completely open-source makes it",
      "level": 3,
      "page": 146
    },
    {
      "heading": "a good choice for developers seeking flexibility and continuous growth. Insomnia is suited for those",
      "level": 3,
      "page": 146
    },
    {
      "heading": "who value an open-source environment and an active community.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "ReadyAPI, with its simplicity and focus on smaller projects, is an ideal choice for scenarios where a",
      "level": 3,
      "page": 146
    },
    {
      "heading": "lightweight and responsive tool is preferred. It provides essential features, making it suitable for",
      "level": 3,
      "page": 146
    },
    {
      "heading": "projects with less complexity. However, it may not be the best fit for larger, more intricate endeavors",
      "level": 3,
      "page": 147
    },
    {
      "heading": "that require extensive functionality.",
      "level": 3,
      "page": 147
    },
    {
      "heading": "ThunderClient, a VS Code plugin, is free and user-friendly, catering to developers who prefer an",
      "level": 3,
      "page": 147
    },
    {
      "heading": "integrated testing environment. However, it lacks extensive features and community support, crucial",
      "level": 3,
      "page": 147
    },
    {
      "heading": "for larger or complex projects, rendering it more appropriate for smaller teams with simpler",
      "level": 3,
      "page": 147
    },
    {
      "heading": "requirements. Additionally, its reliance on Visual Studio Code may restrict its appeal to users who",
      "level": 3,
      "page": 147
    },
    {
      "heading": "prefer alternative development environments. Experienced users accustomed to feature-rich tools",
      "level": 3,
      "page": 147
    },
    {
      "heading": "may encounter a learning curve and might find ThunderClient lacking in certain functionalities.",
      "level": 3,
      "page": 147
    },
    {
      "heading": "Hoppscotch, a free and open-source tool, focuses on functionality over design, offering a lightweight",
      "level": 3,
      "page": 147
    },
    {
      "heading": "web version with support for various protocols. While it lacks extensive documentation and",
      "level": 3,
      "page": 147
    },
    {
      "heading": "community support, it provides a cost-effective solution for developers seeking simplicity.",
      "level": 3,
      "page": 147
    },
    {
      "heading": "How does gRPC work?​",
      "level": 2,
      "page": 148
    },
    {
      "heading": "RPC (Remote Procedure Call) is called “𝐫𝐞𝐦𝐨𝐭𝐞” because it enables communications between",
      "level": 3,
      "page": 148
    },
    {
      "heading": "remote services when services are deployed to different servers under microservice architecture.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "From the user’s point of view, it acts like a local function call.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "The diagram below illustrates the overall data flow for 𝐠𝐑𝐏𝐂.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "Step 1: A REST call is made from the client. The request body is usually in JSON format.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "Steps 2 - 4: The order service (gRPC client) receives the REST call, transforms it, and makes an",
      "level": 3,
      "page": 148
    },
    {
      "heading": "RPC call to the payment service. gPRC encodes the 𝐜𝐥𝐢𝐞𝐧𝐭 𝐬𝐭𝐮𝐛 into a binary format and sends it to",
      "level": 3,
      "page": 148
    },
    {
      "heading": "the low-level transport layer.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "Step 5: gRPC sends the packets over the network via HTTP2. Because of binary encoding and",
      "level": 3,
      "page": 149
    },
    {
      "heading": "network optimizations, gRPC is said to be 5X faster than JSON.",
      "level": 3,
      "page": 149
    },
    {
      "heading": "Steps 6 - 8: The payment service (gRPC server) receives the packets from the network, decodes",
      "level": 3,
      "page": 149
    },
    {
      "heading": "them, and invokes the server application.",
      "level": 3,
      "page": 149
    },
    {
      "heading": "Steps 9 - 11: The result is returned from the server application, and gets encoded and sent to the",
      "level": 3,
      "page": 149
    },
    {
      "heading": "transport layer.",
      "level": 3,
      "page": 149
    },
    {
      "heading": "Steps 12 - 14: The order service receives the packets, decodes them, and sends the result to the",
      "level": 3,
      "page": 149
    },
    {
      "heading": "client application.",
      "level": 3,
      "page": 149
    },
    {
      "heading": "Over to you: Have you used gPRC in your project? What are some of its limitations?",
      "level": 3,
      "page": 149
    },
    {
      "heading": "How is data sent over the network? Why do we need so many layers in the OSI model?",
      "level": 3,
      "page": 150
    },
    {
      "heading": "The diagram below shows how data is encapsulated and de-encapsulated when transmitting over",
      "level": 3,
      "page": 150
    },
    {
      "heading": "the network.",
      "level": 3,
      "page": 150
    },
    {
      "heading": "Step 1: When Device A sends data to Device B over the network via the HTTP protocol, it is first",
      "level": 3,
      "page": 150
    },
    {
      "heading": "added an HTTP header at the application layer.",
      "level": 3,
      "page": 150
    },
    {
      "heading": "Step 2: Then a TCP or a UDP header is added to the data. It is encapsulated into TCP segments at",
      "level": 3,
      "page": 150
    },
    {
      "heading": "Step 3: The segments are then encapsulated with an IP header at the network layer. The IP header",
      "level": 3,
      "page": 150
    },
    {
      "heading": "contains the source/destination IP addresses.",
      "level": 3,
      "page": 150
    },
    {
      "heading": "addresses.",
      "level": 3,
      "page": 150
    },
    {
      "heading": "Step 5: The encapsulated frames are sent to the physical layer and sent over the network in binary",
      "level": 3,
      "page": 151
    },
    {
      "heading": "bits.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "Steps 6-10: When Device B receives the bits from the network, it performs the de-encapsulation",
      "level": 3,
      "page": 151
    },
    {
      "heading": "process, which is a reverse processing of the encapsulation process. The headers are removed",
      "level": 3,
      "page": 151
    },
    {
      "heading": "layer by layer, and eventually, Device B can read the data.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "We need layers in the network model because each layer focuses on its own responsibilities. Each",
      "level": 3,
      "page": 151
    },
    {
      "heading": "layer can rely on the headers for processing instructions and does not need to know the meaning of",
      "level": 3,
      "page": 151
    },
    {
      "heading": "the data from the last layer.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "Over to you: Do you know which layer is responsible for resending lost data?",
      "level": 3,
      "page": 151
    },
    {
      "heading": "Have you heard of the 12-Factor App?",
      "level": 2,
      "page": 152
    },
    {
      "heading": "The \"12 Factor App\" offers a set of best practices for building modern software applications.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Following these 12 principles can help developers and teams in building reliable, scalable, and",
      "level": 3,
      "page": 152
    },
    {
      "heading": "manageable applications.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Here's a brief overview of each principle:",
      "level": 3,
      "page": 152
    },
    {
      "heading": "1.​ Codebase:​",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Have one place to keep all your code, and manage it using version control like Git.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "2.​ Dependencies:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "List all the things your app needs to work properly, and make sure they're easy to install.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "3.​ Config:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Keep important settings like database credentials separate from your code, so you can",
      "level": 3,
      "page": 153
    },
    {
      "heading": "change them without rewriting code.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "4.​ Backing Services:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Use other services (like databases or payment processors) as separate components that",
      "level": 3,
      "page": 153
    },
    {
      "heading": "your app connects to.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "5.​ Build, Release, Run:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Make a clear distinction between preparing your app, releasing it, and running it in",
      "level": 3,
      "page": 153
    },
    {
      "heading": "production.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "6.​ Processes:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Design your app so that each part doesn't rely on a specific computer or memory. It's like",
      "level": 3,
      "page": 153
    },
    {
      "heading": "making LEGO blocks that fit together.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "7.​ Port Binding:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Let your app be accessible through a network port, and make sure it doesn't store critical",
      "level": 3,
      "page": 153
    },
    {
      "heading": "information on a single computer.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "8.​ Concurrency:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Make your app able to handle more work by adding more copies of the same thing, like",
      "level": 3,
      "page": 153
    },
    {
      "heading": "hiring more workers for a busy restaurant.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "9.​ Disposability:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Your app should start quickly and shut down gracefully, like turning off a light switch instead",
      "level": 3,
      "page": 153
    },
    {
      "heading": "of yanking out the power cord.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "10.​Dev/Prod Parity:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Ensure that what you use for developing your app is very similar to what you use in",
      "level": 3,
      "page": 153
    },
    {
      "heading": "production, to avoid surprises.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "11.​Logs:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Keep a record of what happens in your app so you can understand and fix issues, like a",
      "level": 3,
      "page": 153
    },
    {
      "heading": "diary for your software.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "12.​Admin Processes:​",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Run special tasks separately from your app, like doing maintenance work in a workshop",
      "level": 3,
      "page": 153
    },
    {
      "heading": "instead of on the factory floor.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Over to you: Where do you think these principles can have the most impact in improving software",
      "level": 3,
      "page": 153
    },
    {
      "heading": "development practices?",
      "level": 3,
      "page": 153
    },
    {
      "heading": "How does Redis architecture evolve?",
      "level": 2,
      "page": 154
    },
    {
      "heading": "Redis is a popular in-memory cache. How did it evolve to the architecture it is today?",
      "level": 3,
      "page": 154
    },
    {
      "heading": "🔹 2010 - Standalone Redis",
      "level": 3,
      "page": 154
    },
    {
      "heading": "When Redis 1.0 was released in 2010, the architecture was quite simple. It is usually used as a",
      "level": 3,
      "page": 154
    },
    {
      "heading": "cache to the business application.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "However, Redis stores data in memory. When we restart Redis, we will lose all the data and the",
      "level": 3,
      "page": 155
    },
    {
      "heading": "traffic directly hits the database.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "🔹 2013 - Persistence",
      "level": 3,
      "page": 155
    },
    {
      "heading": "When Redis 2.8 was released in 2013, it addressed the previous restrictions. Redis introduced RDB",
      "level": 3,
      "page": 155
    },
    {
      "heading": "in-memory snapshots to persist data. It also supports AOF (Append-Only-File), where each write",
      "level": 3,
      "page": 155
    },
    {
      "heading": "command is written to an AOF file.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "🔹 2013 - Replication",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Redis 2.8 also added replication to increase availability. The primary instance handles real-time read",
      "level": 3,
      "page": 155
    },
    {
      "heading": "and write requests, while replica synchronizes the primary's data.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "🔹 2013 - Sentinel",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Redis 2.8 introduced Sentinel to monitor the Redis instances in real time. is a system designed to",
      "level": 3,
      "page": 155
    },
    {
      "heading": "help managing Redis instances. It performs the following four tasks: monitoring, notification,",
      "level": 3,
      "page": 155
    },
    {
      "heading": "automatic failover and configuration provider.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "🔹 2015 - Cluster",
      "level": 3,
      "page": 155
    },
    {
      "heading": "In 2015, Redis 3.0 was released. It added Redis clusters.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "A Redis cluster is a distributed database solution that manages data through sharding. The data is",
      "level": 3,
      "page": 155
    },
    {
      "heading": "divided into 16384 slots, and each node is responsible for a portion of the slot.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "🔹 Looking Ahead",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Redis is popular because of its high performance and rich data structures that dramatically reduce",
      "level": 3,
      "page": 155
    },
    {
      "heading": "the complexity of developing a business application.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "In 2017, Redis 5.0 was released, adding the stream data type.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "In 2020, Redis 6.0 was released, introducing the multi-threaded I/O in the network module. Redis",
      "level": 3,
      "page": 155
    },
    {
      "heading": "model is divided into the network module and the main processing module. The Redis developers",
      "level": 3,
      "page": 155
    },
    {
      "heading": "the network module tends to become a bottleneck in the system.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Over to you - have you used Redis before? If so, for what use case?",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Cloud Cost Reduction Techniques",
      "level": 2,
      "page": 156
    },
    {
      "heading": "Irrational Cloud Cost is the biggest challenge many organizations are battling as they navigate the",
      "level": 3,
      "page": 156
    },
    {
      "heading": "complexities of cloud computing.",
      "level": 3,
      "page": 156
    },
    {
      "heading": "Efficiently managing these costs is crucial for optimizing cloud usage and maintaining financial",
      "level": 3,
      "page": 156
    },
    {
      "heading": "health.",
      "level": 3,
      "page": 156
    },
    {
      "heading": "The following techniques can help businesses effectively control and minimize their cloud expenses.",
      "level": 3,
      "page": 156
    },
    {
      "heading": "1. Reduce Usage:",
      "level": 3,
      "page": 156
    },
    {
      "heading": "Fine-tune the volume and scale of resources to ensure efficiency without compromising on the",
      "level": 3,
      "page": 157
    },
    {
      "heading": "performance of applications (e.g., downsizing instances, minimizing storage space, consolidating",
      "level": 3,
      "page": 157
    },
    {
      "heading": "services).",
      "level": 3,
      "page": 157
    },
    {
      "heading": "2. Terminate Idle Resources:",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Locate and eliminate resources that are not in active use, such as dormant instances, databases, or",
      "level": 3,
      "page": 157
    },
    {
      "heading": "storage units.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "3. Right Sizing:",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Adjust instance sizes to adequately meet the demands of your applications, ensuring neither",
      "level": 3,
      "page": 157
    },
    {
      "heading": "underuse nor overuse.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "4. Shutdown Resources During Off-Peak Times:",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Set up automatic mechanisms or schedules for turning off non-essential resources when they are",
      "level": 3,
      "page": 157
    },
    {
      "heading": "not in use, especially during low-activity periods.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "5. Reserve to Reduce Rate:",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Adopt cost-effective pricing models like Reserved Instances or Savings Plans that align with your",
      "level": 3,
      "page": 157
    },
    {
      "heading": "specific workload needs.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Bonus Tip: Consider using Spot Instances and lower-tier storage options for additional cost savings.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "6. Optimize Data Transfers:",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Utilize methods such as data compression and Content Delivery Networks (CDNs) to cut down on",
      "level": 3,
      "page": 157
    },
    {
      "heading": "bandwidth expenses, and strategically position resources to reduce data transfer costs, focusing on",
      "level": 3,
      "page": 157
    },
    {
      "heading": "intra-region transfers.",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Over to you: Which technique fits in well with your current cloud infra setup?",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Linux file permission illustrated​",
      "level": 2,
      "page": 158
    },
    {
      "heading": "To understand Linux file permissions, we need to understand Ownership and Permission.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "𝐎𝐰𝐧𝐞𝐫𝐬𝐡𝐢𝐩",
      "level": 3,
      "page": 158
    },
    {
      "heading": "Every file or directory is assigned 3 types of owner:",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Owner: the owner is the user who created the file or directory.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Group: a group can have multiple users. All users in the group have the same permissions to",
      "level": 3,
      "page": 158
    },
    {
      "heading": "access the file or directory.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Other: other means those users who are not owners or members of the group.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "𝐏𝐞𝐫𝐦𝐢𝐬𝐬𝐢𝐨𝐧",
      "level": 3,
      "page": 158
    },
    {
      "heading": "There are only three types of permissions for a file or directory.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Read (r): the read permission allows the user to read a file.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Write (w): the write permission allows the user to change the content of the file.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "🔹Execute (x): the execute permission allows a file to be executed.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "Over to you: what are some of the commonly used Linux commands to change file permissions?",
      "level": 3,
      "page": 158
    },
    {
      "heading": "There are over 1,000 engineering blogs. Here are my top 9",
      "level": 2,
      "page": 159
    },
    {
      "heading": "favorites",
      "level": 2,
      "page": 159
    },
    {
      "heading": "Netflix TechBlog",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Uber Blog",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Cloudflare Blog",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Engineering at Meta",
      "level": 3,
      "page": 159
    },
    {
      "heading": "LinkedIn Engineering",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Discord Blog",
      "level": 3,
      "page": 159
    },
    {
      "heading": "AWS Architecture",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Slack Engineering",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Stripe Blog",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Over to you - What are some of your favorite engineering blogs?",
      "level": 3,
      "page": 160
    },
    {
      "heading": "9 Best Practices for Building Microservices",
      "level": 2,
      "page": 161
    },
    {
      "heading": "Creating a system using microservices is extremely difficult unless you follow some strong",
      "level": 3,
      "page": 161
    },
    {
      "heading": "principles.",
      "level": 3,
      "page": 161
    },
    {
      "heading": "1 - Design For Failure",
      "level": 3,
      "page": 161
    },
    {
      "heading": "A distributed system with microservices is going to fail.",
      "level": 3,
      "page": 161
    },
    {
      "heading": "You must design the system to tolerate failure at multiple levels such as infrastructure, database,",
      "level": 3,
      "page": 162
    },
    {
      "heading": "and individual services. Use circuit breakers, bulkheads, or graceful degradation methods to deal",
      "level": 3,
      "page": 162
    },
    {
      "heading": "with failures.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "2 - Build Small Services",
      "level": 3,
      "page": 162
    },
    {
      "heading": "A microservice should not do multiple things at once.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "A good microservice is designed to do one thing well.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "3 - Use lightweight protocols for communication",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Communication is the core of a distributed system.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Microservices must talk to each other using lightweight protocols. Options include REST, gRPC, or",
      "level": 3,
      "page": 162
    },
    {
      "heading": "message brokers.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "4 - Implement service discovery",
      "level": 3,
      "page": 162
    },
    {
      "heading": "To communicate with each other, microservices need to discover each other over the network.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Implement service discovery using tools such as Consul, Eureka, or Kubernetes Services",
      "level": 3,
      "page": 162
    },
    {
      "heading": "5 - Data Ownership",
      "level": 3,
      "page": 162
    },
    {
      "heading": "In microservices, data should be owned and managed by the individual services.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "The goal should be to reduce coupling between services so that they can evolve independently.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "6 - Use resiliency patterns",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Implement specific resiliency patterns to improve the availability of the services.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Examples: retry policies, caching, and rate limiting.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "7 - Security at all levels",
      "level": 3,
      "page": 162
    },
    {
      "heading": "In a microservices-based system, the attack surface is quite large. You must implement security at",
      "level": 3,
      "page": 162
    },
    {
      "heading": "every level of the service communication path.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "8 - Centralized logging",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Logs are important to finding issues in a system. With multiple services, they become critical.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "9 - Use containerization techniques",
      "level": 3,
      "page": 162
    },
    {
      "heading": "To deploy microservices in an isolated manner, use containerization techniques.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Tools like Docker and Kubernetes can help with this as they are meant to simplify the scaling and",
      "level": 3,
      "page": 162
    },
    {
      "heading": "deployment of a microservice.",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Over to you: what other best practice would you recommend?",
      "level": 3,
      "page": 162
    },
    {
      "heading": "Roadmap for Learning Cyber Security",
      "level": 2,
      "page": 163
    },
    {
      "heading": "By Henry Jiang. Redrawn by ByteByteGo.",
      "level": 3,
      "page": 163
    },
    {
      "heading": "Cybersecurity is crucial for protecting information and systems from theft, damage, and unauthorized",
      "level": 3,
      "page": 163
    },
    {
      "heading": "access. Whether you're a beginner or looking to advance your technical skills, there are numerous",
      "level": 3,
      "page": 163
    },
    {
      "heading": "resources and paths you can take to learn more about cybersecurity. Here are some structured",
      "level": 3,
      "page": 163
    },
    {
      "heading": "suggestions to help you get started or deepen your knowledge:",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Security Architecture",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Frameworks & Standards",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Application Security",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Risk Assessment",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Enterprise Risk Management",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Threat Intelligence",
      "level": 3,
      "page": 163
    },
    {
      "heading": "🔹 Security Operation",
      "level": 3,
      "page": 163
    },
    {
      "heading": "How does Javascript Work?",
      "level": 2,
      "page": 164
    },
    {
      "heading": "The cheat sheet below shows most important characteristics of Javascript.",
      "level": 3,
      "page": 164
    },
    {
      "heading": "🔹 Interpreted Language",
      "level": 3,
      "page": 164
    },
    {
      "heading": "JavaScript code is executed by the browser or JavaScript engine rather than being compiled into",
      "level": 3,
      "page": 164
    },
    {
      "heading": "machine language beforehand. This makes it highly portable across different platforms. Modern",
      "level": 3,
      "page": 164
    },
    {
      "heading": "engines such as V8 utilize Just-In-Time (JIT) technology to compile code into directly executable",
      "level": 3,
      "page": 164
    },
    {
      "heading": "machine code.",
      "level": 3,
      "page": 164
    },
    {
      "heading": "🔹 Function is First-Class Citizen",
      "level": 3,
      "page": 164
    },
    {
      "heading": "In JavaScript, functions are treated as first-class citizens, meaning they can be stored in variables,",
      "level": 3,
      "page": 164
    },
    {
      "heading": "passed as arguments to other functions, and returned from functions.",
      "level": 3,
      "page": 164
    },
    {
      "heading": "🔹 Dynamic Typing",
      "level": 3,
      "page": 165
    },
    {
      "heading": "JavaScript is a loosely typed or dynamic language, meaning we don't have to declare a variable's",
      "level": 3,
      "page": 165
    },
    {
      "heading": "type ahead of time, and the type can change at runtime.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Client-Side Execution",
      "level": 3,
      "page": 165
    },
    {
      "heading": "JavaScript supports asynchronous programming, allowing operations like reading files, making",
      "level": 3,
      "page": 165
    },
    {
      "heading": "HTTP requests, or querying databases to run in the background and trigger callbacks or promises",
      "level": 3,
      "page": 165
    },
    {
      "heading": "when complete. This is particularly useful in web development for improving performance and user",
      "level": 3,
      "page": 165
    },
    {
      "heading": "experience.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Prototype-Based OOP",
      "level": 3,
      "page": 165
    },
    {
      "heading": "Unlike class-based object-oriented languages, JavaScript uses prototypes for inheritance. This",
      "level": 3,
      "page": 165
    },
    {
      "heading": "means that objects can inherit properties and methods from other objects.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Automatic Garbage Collection",
      "level": 3,
      "page": 165
    },
    {
      "heading": "Garbage collection in JavaScript is a form of automatic memory management. The primary goal of",
      "level": 3,
      "page": 165
    },
    {
      "heading": "garbage collection is to reclaim memory occupied by objects that are no longer in use by the",
      "level": 3,
      "page": 165
    },
    {
      "heading": "program, which helps prevent memory leaks and optimizes the performance of the application.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Compared with Other Languages",
      "level": 3,
      "page": 165
    },
    {
      "heading": "JavaScript is special compared to programming languages like Python or Java because of its",
      "level": 3,
      "page": 165
    },
    {
      "heading": "position as a major language for web development.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "While Python is known to provide good code readability and versatility, and Java is known for its",
      "level": 3,
      "page": 165
    },
    {
      "heading": "structure and robustness, JavaScript is an interpreted language that runs directly on the browser",
      "level": 3,
      "page": 165
    },
    {
      "heading": "without compilation, emphasizing flexibility and dynamism.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Relationship with Typescript",
      "level": 3,
      "page": 165
    },
    {
      "heading": "TypeScript is a superset of JavaScript, which means that it extends JavaScript by adding features to",
      "level": 3,
      "page": 165
    },
    {
      "heading": "the language, most notably type annotations. This relationship allows any valid JavaScript code to",
      "level": 3,
      "page": 165
    },
    {
      "heading": "also be considered valid TypeScript code.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "🔹 Popular Javascript Frameworks",
      "level": 3,
      "page": 165
    },
    {
      "heading": "React is known for its flexibility and large number of community-driven plugins, while Vue is clean",
      "level": 3,
      "page": 165
    },
    {
      "heading": "and intuitive with highly integrated and responsive features. Angular, on the other hand, offers a strict",
      "level": 3,
      "page": 165
    },
    {
      "heading": "set of development specifications for enterprise-level JS development.",
      "level": 3,
      "page": 165
    },
    {
      "heading": "Can Kafka Lose Messages?",
      "level": 2,
      "page": 166
    },
    {
      "heading": "Error handling is one of the most important aspects of building reliable systems.",
      "level": 3,
      "page": 166
    },
    {
      "heading": "Today, we will discuss an important topic: Can Kafka lose messages?",
      "level": 3,
      "page": 166
    },
    {
      "heading": "A common belief among many developers is that Kafka, by its very design, guarantees no message",
      "level": 3,
      "page": 166
    },
    {
      "heading": "loss. However, understanding the nuances of Kafka's architecture and configuration is essential to",
      "level": 3,
      "page": 166
    },
    {
      "heading": "truly grasp how and when it might lose messages, and more importantly, how to prevent such",
      "level": 3,
      "page": 166
    },
    {
      "heading": "scenarios.",
      "level": 3,
      "page": 166
    },
    {
      "heading": "The diagram below shows how a message can be lost during its lifecycle in Kafka.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "🔹 Producer",
      "level": 3,
      "page": 167
    },
    {
      "heading": "When we call producer.send() to send a message, it doesn't get sent to the broker directly. There are",
      "level": 3,
      "page": 167
    },
    {
      "heading": "two threads and a queue involved in the message-sending process:",
      "level": 3,
      "page": 167
    },
    {
      "heading": "1. Application thread",
      "level": 3,
      "page": 167
    },
    {
      "heading": "2. Record accumulator",
      "level": 3,
      "page": 167
    },
    {
      "heading": "3. Sender thread (I/O thread)",
      "level": 3,
      "page": 167
    },
    {
      "heading": "We need to configure proper ‘acks’ and ‘retries’ for the producer to make sure messages are sent to",
      "level": 3,
      "page": 167
    },
    {
      "heading": "the broker.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "🔹 Broker",
      "level": 3,
      "page": 167
    },
    {
      "heading": "A broker cluster should not lose messages when it is functioning normally. However, we need to",
      "level": 3,
      "page": 167
    },
    {
      "heading": "understand which extreme situations might lead to message loss:",
      "level": 3,
      "page": 167
    },
    {
      "heading": "1. The messages are usually flushed to the disk asynchronously for higher I/O throughput, so if the",
      "level": 3,
      "page": 167
    },
    {
      "heading": "instance is down before the flush happens, the messages are lost.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "2. The replicas in the Kafka cluster need to be properly configured to hold a valid copy of the data.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "The determinism in data synchronization is important.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "🔹 Consumer",
      "level": 3,
      "page": 167
    },
    {
      "heading": "Kafka offers different ways to commit messages. Auto-committing might acknowledge the",
      "level": 3,
      "page": 167
    },
    {
      "heading": "processing of records before they are actually processed. When the consumer is down in the middle",
      "level": 3,
      "page": 167
    },
    {
      "heading": "of processing, some records may never be processed.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "A good practice is to combine both synchronous and asynchronous commits, where we use",
      "level": 3,
      "page": 167
    },
    {
      "heading": "asynchronous commits in the processing loop for higher throughput and synchronous commits in",
      "level": 3,
      "page": 167
    },
    {
      "heading": "exception handling to make sure the the last offset is always committed.",
      "level": 3,
      "page": 167
    },
    {
      "heading": "You're Decent at Linux if You Know What Those Directories",
      "level": 2,
      "page": 168
    },
    {
      "heading": "Mean :)",
      "level": 2,
      "page": 168
    },
    {
      "heading": "The Linux file system used to resemble an unorganized town where individuals constructed their",
      "level": 3,
      "page": 168
    },
    {
      "heading": "houses wherever they pleased. However, in 1994, the Filesystem Hierarchy Standard (FHS) was",
      "level": 3,
      "page": 168
    },
    {
      "heading": "introduced to bring order to the Linux file system.",
      "level": 3,
      "page": 168
    },
    {
      "heading": "By implementing a standard like the FHS, software can ensure a consistent layout across various",
      "level": 3,
      "page": 168
    },
    {
      "heading": "Linux distributions. Nonetheless, not all Linux distributions strictly adhere to this standard. They often",
      "level": 3,
      "page": 168
    },
    {
      "heading": "incorporate their own unique elements or cater to specific requirements.",
      "level": 3,
      "page": 168
    },
    {
      "heading": "To become proficient in this standard, you can begin by exploring. Utilize commands such as \"cd\" for",
      "level": 3,
      "page": 169
    },
    {
      "heading": "navigation and \"ls\" for listing directory contents. Imagine the file system as a tree, starting from the",
      "level": 3,
      "page": 169
    },
    {
      "heading": "root (/). With time, it will become second nature to you, transforming you into a skilled Linux",
      "level": 3,
      "page": 169
    },
    {
      "heading": "administrator.",
      "level": 3,
      "page": 169
    },
    {
      "heading": "Have fun exploring!",
      "level": 3,
      "page": 169
    },
    {
      "heading": "Netflix's Tech Stack",
      "level": 2,
      "page": 170
    },
    {
      "heading": "This post is based on research from many Netflix engineering blogs and open-source projects. If you",
      "level": 3,
      "page": 170
    },
    {
      "heading": "come across any inaccuracies, please feel free to inform us.",
      "level": 3,
      "page": 170
    },
    {
      "heading": "Mobile and web: Netflix has adopted Swift and Kotlin to build native mobile apps. For its web",
      "level": 3,
      "page": 170
    },
    {
      "heading": "application, it uses React.",
      "level": 3,
      "page": 170
    },
    {
      "heading": "Frontend/server communication: GraphQL.",
      "level": 3,
      "page": 170
    },
    {
      "heading": "Backend services: Netflix relies on ZUUL, Eureka, the Spring Boot framework, and other",
      "level": 3,
      "page": 171
    },
    {
      "heading": "technologies.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Databases: Netflix utilizes EV cache, Cassandra, CockroachDB, and other databases.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Messaging/streaming: Netflix employs Apache Kafka and Fink for messaging and streaming",
      "level": 3,
      "page": 171
    },
    {
      "heading": "purposes.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Video storage: Netflix uses S3 and Open Connect for video storage.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Data processing: Netflix utilizes Flink and Spark for data processing, which is then visualized using",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Tableau. Redshift is used for processing structured data warehouse information.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "CI/CD: Netflix employs various tools such as JIRA, Confluence, PagerDuty, Jenkins, Gradle, Chaos",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Monkey, Spinnaker, Altas, and more for CI/CD processes.",
      "level": 3,
      "page": 171
    },
    {
      "heading": "Top 5 Kafka use cases",
      "level": 2,
      "page": 172
    },
    {
      "heading": "Kafka was originally built for massive log processing. It retains messages until expiration and lets",
      "level": 3,
      "page": 172
    },
    {
      "heading": "consumers pull messages at their own pace.",
      "level": 3,
      "page": 172
    },
    {
      "heading": "Let’s review the popular Kafka use cases.",
      "level": 3,
      "page": 172
    },
    {
      "heading": "- Log processing and analysis",
      "level": 3,
      "page": 172
    },
    {
      "heading": "- Data streaming in recommendations",
      "level": 3,
      "page": 172
    },
    {
      "heading": "- System monitoring and alerting",
      "level": 3,
      "page": 172
    },
    {
      "heading": "- CDC (Change data capture)",
      "level": 3,
      "page": 172
    },
    {
      "heading": "- System migration",
      "level": 3,
      "page": 173
    },
    {
      "heading": "Top 6 Cloud Messaging Patterns.",
      "level": 2,
      "page": 174
    },
    {
      "heading": "How do services communicate with each other? The diagram below shows 6 cloud messaging",
      "level": 3,
      "page": 174
    },
    {
      "heading": "patterns.",
      "level": 3,
      "page": 174
    },
    {
      "heading": "🔹 Asynchronous Request-Reply",
      "level": 3,
      "page": 174
    },
    {
      "heading": "This pattern aims at providing determinism for long-running backend tasks. It decouples backend",
      "level": 3,
      "page": 175
    },
    {
      "heading": "processing from frontend clients.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "In the diagram below, the client makes a synchronous call to the API, triggering a long-running",
      "level": 3,
      "page": 175
    },
    {
      "heading": "operation on the backend. The API returns an HTTP 202 (Accepted) status code, acknowledging",
      "level": 3,
      "page": 175
    },
    {
      "heading": "that the request has been received for processing.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "🔹 Publisher-Subscriber",
      "level": 3,
      "page": 175
    },
    {
      "heading": "This pattern targets decoupling senders from consumers, and avoiding blocking the sender to wait",
      "level": 3,
      "page": 175
    },
    {
      "heading": "for a response.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "🔹 Claim Check",
      "level": 3,
      "page": 175
    },
    {
      "heading": "This pattern solves the transmision of large messages. It stores the whole message payload into a",
      "level": 3,
      "page": 175
    },
    {
      "heading": "database and transmits only the reference to the message, which will be used later to retrieve the",
      "level": 3,
      "page": 175
    },
    {
      "heading": "payload from the database.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "🔹 Priority Queue",
      "level": 3,
      "page": 175
    },
    {
      "heading": "This pattern prioritizes requests sent to services so that requests with a higher priority are received",
      "level": 3,
      "page": 175
    },
    {
      "heading": "and processed more quickly than those with a lower priority.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "🔹 Saga",
      "level": 3,
      "page": 175
    },
    {
      "heading": "Saga is used to manage data consistency across multiple services in distributed systems, especially",
      "level": 3,
      "page": 175
    },
    {
      "heading": "in microservices architectures where each service manages its own database.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "The saga pattern addresses the challenge of maintaining data consistency without relying on",
      "level": 3,
      "page": 175
    },
    {
      "heading": "distributed transactions, which are difficult to scale and can negatively impact system performance.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "🔹 Competing Consumers",
      "level": 3,
      "page": 175
    },
    {
      "heading": "This pattern enables multiple concurrent consumers to process messages received on the same",
      "level": 3,
      "page": 175
    },
    {
      "heading": "messaging channel. There is no need to configure complex coordination between the consumers.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "However, this pattern cannot guarantee message ordering.",
      "level": 3,
      "page": 175
    },
    {
      "heading": "How Netflix Really Uses Java?",
      "level": 2,
      "page": 176
    },
    {
      "heading": "Netflix is predominantly a Java shop.",
      "level": 3,
      "page": 176
    },
    {
      "heading": "Every backend application (including internal apps, streaming, and movie production apps) at Netflix",
      "level": 3,
      "page": 176
    },
    {
      "heading": "is a Java application.",
      "level": 3,
      "page": 176
    },
    {
      "heading": "However, the Java stack is not static and has gone through multiple iterations over the years.",
      "level": 3,
      "page": 176
    },
    {
      "heading": "Here are the details of those iterations:",
      "level": 3,
      "page": 176
    },
    {
      "heading": "1 - API Gateway",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Netflix follows a microservices architecture. Every piece of functionality and data is owned by a",
      "level": 3,
      "page": 177
    },
    {
      "heading": "microservice built using Java (initially version 8)",
      "level": 3,
      "page": 177
    },
    {
      "heading": "This means that rendering one screen (such as the List of List of Movies or LOLOMO) involved",
      "level": 3,
      "page": 177
    },
    {
      "heading": "fetching data from 10s of microservices. But making all these calls from the client created a",
      "level": 3,
      "page": 177
    },
    {
      "heading": "performance problem.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Netflix initially used the API Gateway pattern using Zuul to handle the orchestration.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "2 - BFFs with Groovy & RxJava",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Using a single gateway for multiple clients was a problem for Netflix because each client (such as",
      "level": 3,
      "page": 177
    },
    {
      "heading": "TV, mobile apps, or web browser) had subtle differences.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "To handle this, Netflix used the Backend-for-Frontend (BFF) pattern. Zuul was moved to the role of a",
      "level": 3,
      "page": 177
    },
    {
      "heading": "proxy",
      "level": 3,
      "page": 177
    },
    {
      "heading": "In this pattern, every frontend or UI gets its own mini backend that performs the request fanout and",
      "level": 3,
      "page": 177
    },
    {
      "heading": "orchestration for multiple services.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "The BFFs were built using Groovy scripts and the service fanout was done using RxJava for thread",
      "level": 3,
      "page": 177
    },
    {
      "heading": "management.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "3 - GraphQL Federation",
      "level": 3,
      "page": 177
    },
    {
      "heading": "The Groovy and RxJava approach required more work from the UI developers in creating the",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Groovy scripts. Also, reactive programming is generally hard.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Recently, Netflix moved to GraphQL Federation. With GraphQL, a client can specify exactly what set",
      "level": 3,
      "page": 177
    },
    {
      "heading": "of fields it needs, thereby solving the problem of overfetching and underfetching with REST APIs.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "The GraphQL Federation takes care of calling the necessary microservices to fetch the data.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "These microservices are called Domain Graph Service (DGS) and are built using Java 17, Spring",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Boot 3, and Spring Boot Netflix OSS packages. The move from Java 8 to Java 17 resulted in 20%",
      "level": 3,
      "page": 177
    },
    {
      "heading": "CPU gains.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "More recently, Netflix has started to migrate to Java 21 to take advantage of features like virtual",
      "level": 3,
      "page": 177
    },
    {
      "heading": "threads.",
      "level": 3,
      "page": 177
    },
    {
      "heading": "Top 9 Architectural Patterns for Data and Communication",
      "level": 2,
      "page": 178
    },
    {
      "heading": "Flow",
      "level": 2,
      "page": 178
    },
    {
      "heading": "🔹 Peer-to-Peer",
      "level": 3,
      "page": 178
    },
    {
      "heading": "The Peer-to-Peer pattern involves direct communication between two components without the need",
      "level": 3,
      "page": 178
    },
    {
      "heading": "for a central coordinator.",
      "level": 3,
      "page": 178
    },
    {
      "heading": "🔹 API Gateway",
      "level": 3,
      "page": 178
    },
    {
      "heading": "An API Gateway acts as a single entry point for all client requests to the backend services of an",
      "level": 3,
      "page": 178
    },
    {
      "heading": "application.",
      "level": 3,
      "page": 178
    },
    {
      "heading": "🔹 Pub-Sub",
      "level": 3,
      "page": 179
    },
    {
      "heading": "The Pub-Sub pattern decouples the producers of messages (publishers) from the consumers of",
      "level": 3,
      "page": 179
    },
    {
      "heading": "messages (subscribers) through a message broker.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 Request-Response",
      "level": 3,
      "page": 179
    },
    {
      "heading": "This is one of the most fundamental integration patterns, where a client sends a request to a server",
      "level": 3,
      "page": 179
    },
    {
      "heading": "and waits for a response.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 Event Sourcing",
      "level": 3,
      "page": 179
    },
    {
      "heading": "Event Sourcing involves storing the state changes of an application as a sequence of events.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 ETL",
      "level": 3,
      "page": 179
    },
    {
      "heading": "ETL is a data integration pattern used to gather data from multiple sources, transform it into a",
      "level": 3,
      "page": 179
    },
    {
      "heading": "structured format, and load it into a destination database.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 Batching",
      "level": 3,
      "page": 179
    },
    {
      "heading": "Batching involves accumulating data over a period or until a certain threshold is met before",
      "level": 3,
      "page": 179
    },
    {
      "heading": "processing it as a single group.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 Streaming Processing",
      "level": 3,
      "page": 179
    },
    {
      "heading": "Streaming Processing allows for the continuous ingestion, processing, and analysis of data streams",
      "level": 3,
      "page": 179
    },
    {
      "heading": "in real-time.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "🔹 Orchestration",
      "level": 3,
      "page": 179
    },
    {
      "heading": "Orchestration involves a central coordinator (an orchestrator) managing the interactions between",
      "level": 3,
      "page": 179
    },
    {
      "heading": "distributed components or services to achieve a workflow or business process.",
      "level": 3,
      "page": 179
    },
    {
      "heading": "What Are the Most Important AWS Services To Learn?",
      "level": 2,
      "page": 180
    },
    {
      "heading": "Since its inception in 2006, AWS has rapidly evolved from simple offerings like S3 and EC2 to an",
      "level": 3,
      "page": 180
    },
    {
      "heading": "expansive, versatile cloud ecosystem.",
      "level": 3,
      "page": 180
    },
    {
      "heading": "Today, AWS provides a highly reliable, scalable infrastructure platform with over 200 services in the",
      "level": 3,
      "page": 180
    },
    {
      "heading": "cloud, powering hundreds of thousands of businesses in 190 countries around the world.",
      "level": 3,
      "page": 180
    },
    {
      "heading": "For both newcomers and seasoned professionals, navigating the broad set of AWS services is no",
      "level": 3,
      "page": 180
    },
    {
      "heading": "small feat.",
      "level": 3,
      "page": 180
    },
    {
      "heading": "From computing power, storage options, and networking capabilities to database management,",
      "level": 3,
      "page": 181
    },
    {
      "heading": "analytics, and machine learning, AWS provides a wide array of tools that can be daunting to",
      "level": 3,
      "page": 181
    },
    {
      "heading": "understand and master.",
      "level": 3,
      "page": 181
    },
    {
      "heading": "Each service is tailored to specific needs and use cases, requiring a deep understanding of not just",
      "level": 3,
      "page": 181
    },
    {
      "heading": "the services themselves, but also how they interact and integrate within an IT ecosystem.",
      "level": 3,
      "page": 181
    },
    {
      "heading": "This attached illustration can serve as both a starting point and a quick reference for anyone looking",
      "level": 3,
      "page": 181
    },
    {
      "heading": "to demystify AWS and focus their efforts on the services that matter most.",
      "level": 3,
      "page": 181
    },
    {
      "heading": "It provides a visual roadmap, outlining the foundational services that underpin cloud computing",
      "level": 3,
      "page": 181
    },
    {
      "heading": "essentials, as well as advanced services catering to specific needs like serverless architectures,",
      "level": 3,
      "page": 181
    },
    {
      "heading": "DevOps, and machine learning.",
      "level": 3,
      "page": 181
    },
    {
      "heading": "8 Key Data Structures That Power Modern Databases",
      "level": 2,
      "page": 182
    },
    {
      "heading": "🔹Skiplist: a common in-memory index type. Used in Redis",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹Hash index: a very common implementation of the “Map” data structure (or “Collection”)",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹SSTable: immutable on-disk “Map” implementation",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹LSM tree: Skiplist + SSTable. High write throughput",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹B-tree: disk-based solution. Consistent read/write performance",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹Inverted index: used for document indexing. Used in Lucene",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹Suffix tree: for string pattern search",
      "level": 3,
      "page": 182
    },
    {
      "heading": "🔹R-tree: multi-dimension search, such as finding the nearest neighbor",
      "level": 3,
      "page": 182
    },
    {
      "heading": "How do we design effective and safe APIs?",
      "level": 2,
      "page": 183
    },
    {
      "heading": "The diagram below shows typical API designs with a shopping cart example.",
      "level": 3,
      "page": 183
    },
    {
      "heading": "Note that API design is not just URL path design. Most of the time, we need to choose the proper",
      "level": 3,
      "page": 183
    },
    {
      "heading": "resource names, identifiers, and path patterns. It is equally important to design proper HTTP header",
      "level": 3,
      "page": 183
    },
    {
      "heading": "fields or to design effective rate-limiting rules within the API gateway.",
      "level": 3,
      "page": 183
    },
    {
      "heading": "Who are the Fantastic Four of System Design?",
      "level": 2,
      "page": 184
    },
    {
      "heading": "Scalability, Availability, Reliability, and Performance.",
      "level": 3,
      "page": 184
    },
    {
      "heading": "They are the most critical components to crafting successful software systems.",
      "level": 3,
      "page": 184
    },
    {
      "heading": "Let’s look at each of them with implementation techniques:",
      "level": 3,
      "page": 184
    },
    {
      "heading": "1 - Scalability",
      "level": 3,
      "page": 184
    },
    {
      "heading": "Scalability ensures that your application can handle more load without compromising performance.",
      "level": 3,
      "page": 184
    },
    {
      "heading": "2 - Availability",
      "level": 3,
      "page": 185
    },
    {
      "heading": "Availability makes sure that your application is always ready to serve the users and downtime is",
      "level": 3,
      "page": 185
    },
    {
      "heading": "minimal.",
      "level": 3,
      "page": 185
    },
    {
      "heading": "3 - Reliability",
      "level": 3,
      "page": 185
    },
    {
      "heading": "Reliability is about building software that consistently delivers correct results.",
      "level": 3,
      "page": 185
    },
    {
      "heading": "4 - Performance",
      "level": 3,
      "page": 185
    },
    {
      "heading": "Performance is the ability of a system to carry out its tasks at an expected rate under peak load",
      "level": 3,
      "page": 185
    },
    {
      "heading": "using available resources.",
      "level": 3,
      "page": 185
    },
    {
      "heading": "Over to you: What are the other pillars of system design and strategies you’ve come across?",
      "level": 3,
      "page": 185
    },
    {
      "heading": "How do we design a secure system?",
      "level": 2,
      "page": 186
    },
    {
      "heading": "Designing secure systems is important for a multitude of reasons, spanning from protecting sensitive",
      "level": 3,
      "page": 186
    },
    {
      "heading": "information to ensuring the stability and reliability of the infrastructure. As developers, we should",
      "level": 3,
      "page": 186
    },
    {
      "heading": "design and implement these security guidelines by default.",
      "level": 3,
      "page": 186
    },
    {
      "heading": "The diagram below is a pragmatic cheat sheet with the use cases and key design points.",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Authentication",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Authorization",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Encryption",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Vulnerability",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Audit & Compliance",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Network Security",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Terminal Security",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Emergency Responses",
      "level": 3,
      "page": 186
    },
    {
      "heading": "🔹 Container Security",
      "level": 3,
      "page": 187
    },
    {
      "heading": "🔹 API Security",
      "level": 3,
      "page": 187
    },
    {
      "heading": "🔹 3rd-Party Vendor Management",
      "level": 3,
      "page": 187
    },
    {
      "heading": "🔹 Disaster Recovery",
      "level": 3,
      "page": 187
    },
    {
      "heading": "Things Every Developer Should Know: Concurrency is NOT",
      "level": 2,
      "page": 188
    },
    {
      "heading": "parallelism.",
      "level": 2,
      "page": 188
    },
    {
      "heading": "In system design, it is important to understand the difference between concurrency and parallelism.",
      "level": 3,
      "page": 188
    },
    {
      "heading": "As Rob Pyke(one of the creators of GoLang) stated:“ Concurrency is about 𝐝𝐞𝐚𝐥𝐢𝐧𝐠 𝐰𝐢𝐭𝐡 lots of things",
      "level": 3,
      "page": 188
    },
    {
      "heading": "at once. Parallelism is about 𝐝𝐨𝐢𝐧𝐠 lots of things at once.\" This distinction emphasizes that",
      "level": 3,
      "page": 188
    },
    {
      "heading": "concurrency is more about the 𝐝𝐞𝐬𝐢𝐠𝐧 of a program, while parallelism is about the 𝐞𝐱𝐞𝐜𝐮𝐭𝐢𝐨𝐧.",
      "level": 3,
      "page": 188
    },
    {
      "heading": "Concurrency is about dealing with multiple things at once. It involves structuring a program to handle",
      "level": 3,
      "page": 188
    },
    {
      "heading": "multiple tasks simultaneously, where the tasks can start, run, and complete in overlapping time",
      "level": 3,
      "page": 188
    },
    {
      "heading": "periods, but not necessarily at the same instant.",
      "level": 3,
      "page": 188
    },
    {
      "heading": "Concurrency is about the composition of independently executing processes and describes a",
      "level": 3,
      "page": 189
    },
    {
      "heading": "program's ability to manage multiple tasks by making progress on them without necessarily",
      "level": 3,
      "page": 189
    },
    {
      "heading": "completing one before it starts another.",
      "level": 3,
      "page": 189
    },
    {
      "heading": "Parallelism, on the other hand, refers to the simultaneous execution of multiple computations. It is",
      "level": 3,
      "page": 189
    },
    {
      "heading": "the technique of running two or more tasks or computations at the same time, utilizing multiple",
      "level": 3,
      "page": 189
    },
    {
      "heading": "processors or cores within a computer to perform several operations concurrently. Parallelism",
      "level": 3,
      "page": 189
    },
    {
      "heading": "requires hardware with multiple processing units, and its primary goal is to increase the throughput",
      "level": 3,
      "page": 189
    },
    {
      "heading": "and computational speed of a system.",
      "level": 3,
      "page": 189
    },
    {
      "heading": "In practical terms, concurrency enables a program to remain responsive to input, perform",
      "level": 3,
      "page": 189
    },
    {
      "heading": "background tasks, and handle multiple operations in a seemingly simultaneous manner, even on a",
      "level": 3,
      "page": 189
    },
    {
      "heading": "single-core processor. It's particularly useful in I/O-bound and high-latency operations where",
      "level": 3,
      "page": 189
    },
    {
      "heading": "programs need to wait for external events, such as file, network, or user interactions.",
      "level": 3,
      "page": 189
    },
    {
      "heading": "Parallelism, with its ability to perform multiple operations at the same time, is crucial in CPU-bound",
      "level": 3,
      "page": 189
    },
    {
      "heading": "tasks where computational speed and throughput are the bottlenecks. Applications that require",
      "level": 3,
      "page": 189
    },
    {
      "heading": "heavy mathematical computations, data analysis, image processing, and real-time processing can",
      "level": 3,
      "page": 189
    },
    {
      "heading": "significantly benefit from parallel execution.",
      "level": 3,
      "page": 189
    },
    {
      "heading": "HTTPS, SSL Handshake, and Data Encryption Explained to",
      "level": 2,
      "page": 190
    },
    {
      "heading": "Kids.",
      "level": 2,
      "page": 190
    },
    {
      "heading": "HTTPS: Safeguards your data from eavesdroppers and breaches. Understand how encryption and",
      "level": 3,
      "page": 190
    },
    {
      "heading": "digital certificates create an impregnable shield.",
      "level": 3,
      "page": 190
    },
    {
      "heading": "SSL Handshake: Behind the Scenes — Witness the cryptographic protocols that establish a secure",
      "level": 3,
      "page": 191
    },
    {
      "heading": "connection. Experience the intricate exchange of keys and negotiation.",
      "level": 3,
      "page": 191
    },
    {
      "heading": "Secure Data Transmission: Navigating the Tunnel — Journey through the encrypted tunnel forged by",
      "level": 3,
      "page": 191
    },
    {
      "heading": "HTTPS. Learn how your information travels while shielded from cyber threats.",
      "level": 3,
      "page": 191
    },
    {
      "heading": "HTML's Role: Peek into HTML's role in structuring the web. Uncover how hyperlinks and content",
      "level": 3,
      "page": 191
    },
    {
      "heading": "come together seamlessly. And why is it called HYPER TEXT.",
      "level": 3,
      "page": 191
    },
    {
      "heading": "Over to you: In this ever-evolving digital landscape, what emerging technologies do you foresee",
      "level": 3,
      "page": 191
    },
    {
      "heading": "shaping the future of cybersecurity or the web?",
      "level": 3,
      "page": 191
    },
    {
      "heading": "Top 5 Software Architectural Patterns",
      "level": 2,
      "page": 192
    },
    {
      "heading": "In software development, architecture plays a crucial role in shaping the structure and behavior of",
      "level": 3,
      "page": 192
    },
    {
      "heading": "software systems. It provides a blueprint for system design, detailing how components interact with",
      "level": 3,
      "page": 192
    },
    {
      "heading": "each other to deliver specific functionality. They also offer solutions to common problems, saving",
      "level": 3,
      "page": 192
    },
    {
      "heading": "time and effort and leading to more robust and maintainable systems.",
      "level": 3,
      "page": 192
    },
    {
      "heading": "However, with the vast array of architectural styles and patterns available, it can take time to discern",
      "level": 3,
      "page": 193
    },
    {
      "heading": "which approach best suits a particular project or system. Aims to shed light on these concepts,",
      "level": 3,
      "page": 193
    },
    {
      "heading": "helping you make informed decisions in your architectural endeavors.",
      "level": 3,
      "page": 193
    },
    {
      "heading": "To help you navigate the vast landscape of architectural styles and patterns, there is a cheat sheet",
      "level": 3,
      "page": 193
    },
    {
      "heading": "that encapsulates all. This cheat sheet is a handy reference guide that you can use to quickly recall",
      "level": 3,
      "page": 193
    },
    {
      "heading": "the main characteristics of each architectural style and pattern.",
      "level": 3,
      "page": 193
    },
    {
      "heading": "Top 6 Tools to Turn Code into Beautiful Diagrams",
      "level": 2,
      "page": 194
    },
    {
      "heading": "- Diagrams",
      "level": 3,
      "page": 194
    },
    {
      "heading": "- Go Diagrams",
      "level": 3,
      "page": 194
    },
    {
      "heading": "- Mermaid",
      "level": 3,
      "page": 194
    },
    {
      "heading": "- PlantUML",
      "level": 3,
      "page": 194
    },
    {
      "heading": "- ASCII diagrams",
      "level": 3,
      "page": 194
    },
    {
      "heading": "- Markmap",
      "level": 3,
      "page": 194
    },
    {
      "heading": "Everything is a trade-off.",
      "level": 2,
      "page": 195
    },
    {
      "heading": "Everything is a compromise.",
      "level": 3,
      "page": 195
    },
    {
      "heading": "There is no right or wrong design.",
      "level": 3,
      "page": 195
    },
    {
      "heading": "The diagram below shows some of the most important trade-offs.",
      "level": 3,
      "page": 195
    },
    {
      "heading": "🔹 Cost vs. Performance",
      "level": 3,
      "page": 195
    },
    {
      "heading": "🔹 Reliability vs. Scalability",
      "level": 3,
      "page": 195
    },
    {
      "heading": "🔹 Performance vs. Consistency",
      "level": 3,
      "page": 195
    },
    {
      "heading": "🔹 Security vs. Flexibility",
      "level": 3,
      "page": 195
    },
    {
      "heading": "🔹 Development Speed vs. Quality",
      "level": 3,
      "page": 195
    },
    {
      "heading": "Over to you: What trade-offs have you made in the past?",
      "level": 3,
      "page": 196
    },
    {
      "heading": "What is DevSecOps?",
      "level": 2,
      "page": 197
    },
    {
      "heading": "DevSecOps emerged as a natural evolution of DevOps practices with a focus on integrating security",
      "level": 3,
      "page": 197
    },
    {
      "heading": "into the software development and deployment process. The term \"DevSecOps\" represents the",
      "level": 3,
      "page": 197
    },
    {
      "heading": "convergence of Development (Dev), Security (Sec), and Operations (Ops) practices, emphasizing",
      "level": 3,
      "page": 197
    },
    {
      "heading": "the importance of security throughout the software development lifecycle.",
      "level": 3,
      "page": 197
    },
    {
      "heading": "The diagram below shows the important concepts in DevSecOps.",
      "level": 3,
      "page": 197
    },
    {
      "heading": "1 . Automated Security Checks",
      "level": 3,
      "page": 198
    },
    {
      "heading": "2 . Continuous Monitoring",
      "level": 3,
      "page": 198
    },
    {
      "heading": "3 . CI/CD Automation",
      "level": 3,
      "page": 198
    },
    {
      "heading": "4 . Infrastructure as Code (IaC)",
      "level": 3,
      "page": 198
    },
    {
      "heading": "5 . Container Security",
      "level": 3,
      "page": 198
    },
    {
      "heading": "6 . Secret Management",
      "level": 3,
      "page": 198
    },
    {
      "heading": "7 . Threat Modeling",
      "level": 3,
      "page": 198
    },
    {
      "heading": "8. Quality Assurance (QA) Integration",
      "level": 3,
      "page": 198
    },
    {
      "heading": "9 . Collaboration and Communication",
      "level": 3,
      "page": 198
    },
    {
      "heading": "10 . Vulnerability Management",
      "level": 3,
      "page": 198
    },
    {
      "heading": "Top 8 Cache Eviction Strategies.",
      "level": 2,
      "page": 199
    },
    {
      "heading": "🔹 LRU (Least Recently Used)",
      "level": 3,
      "page": 199
    },
    {
      "heading": "LRU eviction strategy removes the least recently accessed items first. This approach is based on the",
      "level": 3,
      "page": 199
    },
    {
      "heading": "principle that items accessed recently are more likely to be accessed again in the near future.",
      "level": 3,
      "page": 199
    },
    {
      "heading": "🔹 MRU (Most Recently Used)",
      "level": 3,
      "page": 199
    },
    {
      "heading": "Contrary to LRU, the MRU algorithm removes the most recently used items first. This strategy can",
      "level": 3,
      "page": 200
    },
    {
      "heading": "be useful in scenarios where the most recently accessed items are less likely to be accessed again",
      "level": 3,
      "page": 200
    },
    {
      "heading": "soon.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 SLRU (Segmented LRU)",
      "level": 3,
      "page": 200
    },
    {
      "heading": "SLRU divides the cache into two segments: a probationary segment and a protected segment. New",
      "level": 3,
      "page": 200
    },
    {
      "heading": "items are initially placed into the probationary segment. If an item in the probationary segment is",
      "level": 3,
      "page": 200
    },
    {
      "heading": "accessed again, it is promoted to the protected segment.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 LFU (Least Frequently Used)",
      "level": 3,
      "page": 200
    },
    {
      "heading": "LFU algorithm evicts the items with the lowest access frequency.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 FIFO (First In First Out)",
      "level": 3,
      "page": 200
    },
    {
      "heading": "FIFO is one of the simplest caching strategies, where the cache behaves in a queue-like manner,",
      "level": 3,
      "page": 200
    },
    {
      "heading": "evicting the oldest items first, regardless of their access patterns or frequency.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 TTL (Time-to-Live)",
      "level": 3,
      "page": 200
    },
    {
      "heading": "While not strictly an eviction algorithm, TTL is a strategy where each cache item is given a specific",
      "level": 3,
      "page": 200
    },
    {
      "heading": "lifespan.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 Two-Tiered Caching",
      "level": 3,
      "page": 200
    },
    {
      "heading": "In Two-Tiered Caching strategy, we use an in-memory cache for the first layer and a distributed",
      "level": 3,
      "page": 200
    },
    {
      "heading": "cache for the second layer.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "🔹 RR (Random Replacement)",
      "level": 3,
      "page": 200
    },
    {
      "heading": "Random Replacement algorithm randomly selects a cache item and evicts it to make space for new",
      "level": 3,
      "page": 200
    },
    {
      "heading": "items. This method is also simple to implement and does not require tracking access patterns or",
      "level": 3,
      "page": 200
    },
    {
      "heading": "frequencies.",
      "level": 3,
      "page": 200
    },
    {
      "heading": "Linux Boot Process Explained",
      "level": 2,
      "page": 201
    },
    {
      "heading": "Almost every software engineer has used Linux before, but only a handful know how its Boot",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Process works :) Let's dive in.",
      "level": 3,
      "page": 201
    },
    {
      "heading": "The diagram below shows the steps.",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Step 1 - When we turn on the power, BIOS (Basic Input/Output System) or UEFI (Unified Extensible",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Firmware Interface) firmware is loaded from non-volatile memory, and executes POST (Power On",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Self Test).",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Step 2 - BIOS/UEFI detects the devices connected to the system, including CPU, RAM, and storage.",
      "level": 3,
      "page": 201
    },
    {
      "heading": "Step 3 - Choose a booting device to boot the OS from. This can be the hard drive, the network",
      "level": 3,
      "page": 202
    },
    {
      "heading": "server, or CD ROM.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "Step 4 - BIOS/UEFI runs the boot loader (GRUB), which provides a menu to choose the OS or the",
      "level": 3,
      "page": 202
    },
    {
      "heading": "kernel functions.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "Step 5 - After the kernel is ready, we now switch to the user space. The kernel starts up systemd as",
      "level": 3,
      "page": 202
    },
    {
      "heading": "the first user-space process, which manages the processes and services, probes all remaining",
      "level": 3,
      "page": 202
    },
    {
      "heading": "hardware, mounts filesystems, and runs a desktop environment.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "units are executed as well.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "Step 7 - The system runs a set of startup scripts and configure the environment.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "Step 8 - The users are presented with a login window. The system is now ready.",
      "level": 3,
      "page": 202
    },
    {
      "heading": "Unusual Evolution of the Netflix API Architecture",
      "level": 2,
      "page": 203
    },
    {
      "heading": "The Netflix API architecture went through 4 main stages.",
      "level": 3,
      "page": 204
    },
    {
      "heading": "𝐌𝐨𝐧𝐨𝐥𝐢𝐭𝐡. The application is packaged and deployed as a monolith, such as a single Java WAR file,",
      "level": 3,
      "page": 204
    },
    {
      "heading": "Rails app, etc. Most startups begin with a monolith architecture.",
      "level": 3,
      "page": 204
    },
    {
      "heading": "𝐃𝐢𝐫𝐞𝐜𝐭 𝐚𝐜𝐜𝐞𝐬𝐬. In this architecture, a client app can make requests directly to the microservices. With",
      "level": 3,
      "page": 204
    },
    {
      "heading": "hundreds or even thousands of microservices, exposing all of them to clients is not ideal.",
      "level": 3,
      "page": 204
    },
    {
      "heading": "𝐆𝐚𝐭𝐞𝐰𝐚𝐲 𝐚𝐠𝐠𝐫𝐞𝐠𝐚𝐭𝐢𝐨𝐧 𝐥𝐚𝐲𝐞𝐫. Some use cases may span multiple services, we need a gateway",
      "level": 3,
      "page": 204
    },
    {
      "heading": "aggregation layer. Imagine the Netflix app needs 3 APIs (movie, production, talent) to render the",
      "level": 3,
      "page": 204
    },
    {
      "heading": "frontend. The gateway aggregation layer makes it possible.",
      "level": 3,
      "page": 204
    },
    {
      "heading": "𝐅𝐞𝐝𝐞𝐫𝐚𝐭𝐞𝐝 𝐠𝐚𝐭𝐞𝐰𝐚𝐲. As the number of developers grew and domain complexity increased, developing",
      "level": 3,
      "page": 204
    },
    {
      "heading": "the API aggregation layer became increasingly harder. GraphQL federation allows Netflix to set up a",
      "level": 3,
      "page": 204
    },
    {
      "heading": "single GraphQL gateway that fetches data from all the other APIs.",
      "level": 3,
      "page": 204
    },
    {
      "heading": "Over to you - why do you think Netflix uses GraphQL instead of RESTful?",
      "level": 3,
      "page": 204
    },
    {
      "heading": "References:",
      "level": 3,
      "page": 204
    },
    {
      "heading": "[1] How Netflix Scales its API with GraphQL Federation: bit. ly/3MPuAsi (image source)",
      "level": 3,
      "page": 204
    },
    {
      "heading": "[2] Why You Can't Talk About Microservices Without Mentioning Netflix: bit. ly/3LKn0On",
      "level": 3,
      "page": 204
    },
    {
      "heading": "GET, POST, PUT... Common HTTP “verbs” in one figure",
      "level": 2,
      "page": 205
    },
    {
      "heading": "1. HTTP GET",
      "level": 3,
      "page": 205
    },
    {
      "heading": "This retrieves a resource from the server. It is idempotent. Multiple identical requests return the",
      "level": 3,
      "page": 205
    },
    {
      "heading": "same result.",
      "level": 3,
      "page": 205
    },
    {
      "heading": "2. HTTP PUT",
      "level": 3,
      "page": 205
    },
    {
      "heading": "This updates or Creates a resource. It is idempotent. Multiple identical requests will update the same",
      "level": 3,
      "page": 205
    },
    {
      "heading": "resource.",
      "level": 3,
      "page": 205
    },
    {
      "heading": "3. HTTP POST",
      "level": 3,
      "page": 205
    },
    {
      "heading": "This is used to create new resources. It is not idempotent, making two identical POST will duplicate",
      "level": 3,
      "page": 205
    },
    {
      "heading": "the resource creation.",
      "level": 3,
      "page": 205
    },
    {
      "heading": "4. HTTP DELETE",
      "level": 3,
      "page": 206
    },
    {
      "heading": "This is used to delete a resource. It is idempotent. Multiple identical requests will delete the same",
      "level": 3,
      "page": 206
    },
    {
      "heading": "resource.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "5. HTTP PATCH",
      "level": 3,
      "page": 206
    },
    {
      "heading": "The PATCH method applies partial modifications to a resource.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "6. HTTP HEAD",
      "level": 3,
      "page": 206
    },
    {
      "heading": "The HEAD method asks for a response identical to a GET request but without the response body.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "7. HTTP CONNECT",
      "level": 3,
      "page": 206
    },
    {
      "heading": "The CONNECT method establishes a tunnel to the server identified by the target resource.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "8. HTTP OPTIONS",
      "level": 3,
      "page": 206
    },
    {
      "heading": "This describes the communication options for the target resource.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "9. HTTP TRACE",
      "level": 3,
      "page": 206
    },
    {
      "heading": "This performs a message loop-back test along the path to the target resource.",
      "level": 3,
      "page": 206
    },
    {
      "heading": "Over to you: What other HTTP verbs have you used?",
      "level": 3,
      "page": 206
    },
    {
      "heading": "Top 8 C++ Use Cases",
      "level": 2,
      "page": 207
    },
    {
      "heading": "C++ is a highly versatile programming language that is suitable for a wide range of applications.",
      "level": 3,
      "page": 207
    },
    {
      "heading": "🔹 Embedded Systems",
      "level": 3,
      "page": 207
    },
    {
      "heading": "The language's efficiency and fine control over hardware resources make it excellent for embedded",
      "level": 3,
      "page": 207
    },
    {
      "heading": "systems development.",
      "level": 3,
      "page": 207
    },
    {
      "heading": "🔹 Game Development",
      "level": 3,
      "page": 207
    },
    {
      "heading": "C++ is a staple in the game development industry due to its performance and efficiency.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Operating Systems",
      "level": 3,
      "page": 208
    },
    {
      "heading": "C++ provides extensive control over system resources and memory, making it ideal for developing",
      "level": 3,
      "page": 208
    },
    {
      "heading": "operating systems and low-level system utilities.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Databases",
      "level": 3,
      "page": 208
    },
    {
      "heading": "Many high-performance database systems are implemented in C++ to manage memory efficiently",
      "level": 3,
      "page": 208
    },
    {
      "heading": "and ensure fast execution of queries.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Financial Applications",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Web Browsers",
      "level": 3,
      "page": 208
    },
    {
      "heading": "C++ is used in the development of web browsers and their components, such as rendering engines.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Networking",
      "level": 3,
      "page": 208
    },
    {
      "heading": "C++ is often used for developing network devices and simulation tools.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "🔹 Scientific Computing",
      "level": 3,
      "page": 208
    },
    {
      "heading": "C++ finds extensive use in scientific computing and engineering applications that require high",
      "level": 3,
      "page": 208
    },
    {
      "heading": "performance and precise control over computational resources.",
      "level": 3,
      "page": 208
    },
    {
      "heading": "Over to you - What did we miss?",
      "level": 3,
      "page": 208
    },
    {
      "heading": "Top 4 data sharding algorithms explained.",
      "level": 2,
      "page": 209
    },
    {
      "heading": "We are dealing with massive amounts of data. Often we need to split data into smaller, more",
      "level": 3,
      "page": 209
    },
    {
      "heading": "manageable pieces, or “shards”. Here are some of the top data sharding algorithms commonly used:",
      "level": 3,
      "page": 209
    },
    {
      "heading": "🔹 Range-Based Sharding",
      "level": 3,
      "page": 209
    },
    {
      "heading": "This involves partitioning data based on a range of values. For example, customer data can be",
      "level": 3,
      "page": 209
    },
    {
      "heading": "sharded based on alphabetical order of last names, or transaction data can be sharded based on",
      "level": 3,
      "page": 209
    },
    {
      "heading": "date ranges.",
      "level": 3,
      "page": 209
    },
    {
      "heading": "🔹 Hash-Based Sharding",
      "level": 3,
      "page": 210
    },
    {
      "heading": "In this method, a hash function is applied to a shard key chosen from the data (like a customer ID or",
      "level": 3,
      "page": 210
    },
    {
      "heading": "transaction ID).",
      "level": 3,
      "page": 210
    },
    {
      "heading": "This tends to distribute data more evenly across shards compared to range-based sharding.",
      "level": 3,
      "page": 210
    },
    {
      "heading": "However, we need to choose a proper hash function to avoid hash collision.",
      "level": 3,
      "page": 210
    },
    {
      "heading": "🔹 Consistent Hashing",
      "level": 3,
      "page": 210
    },
    {
      "heading": "This is an extension of hash-based sharding that reduces the impact of adding or removing shards.",
      "level": 3,
      "page": 210
    },
    {
      "heading": "It distributes data more evenly and minimizes the amount of data that needs to be relocated when",
      "level": 3,
      "page": 210
    },
    {
      "heading": "shards are added or removed.",
      "level": 3,
      "page": 210
    },
    {
      "heading": "🔹 Virtual Bucket Sharding",
      "level": 3,
      "page": 210
    },
    {
      "heading": "Data is mapped into virtual buckets, and these buckets are then mapped to physical shards. This",
      "level": 3,
      "page": 210
    },
    {
      "heading": "two-level mapping allows for more flexible shard management and rebalancing without significant",
      "level": 3,
      "page": 210
    },
    {
      "heading": "data movement.",
      "level": 3,
      "page": 210
    },
    {
      "heading": "10 years ago, Amazon found that every 100ms of latency cost",
      "level": 2,
      "page": 211
    },
    {
      "heading": "them 1% in sales.",
      "level": 2,
      "page": 211
    },
    {
      "heading": "That’s a staggering $5.7 billion in today’s terms.",
      "level": 3,
      "page": 211
    },
    {
      "heading": "For high-scale user-facing systems, high latency is a big loss of revenue.",
      "level": 3,
      "page": 211
    },
    {
      "heading": "Here are the top strategies to reduce latency:",
      "level": 3,
      "page": 211
    },
    {
      "heading": "1 - Database Indexing",
      "level": 3,
      "page": 212
    },
    {
      "heading": "2 - Caching",
      "level": 3,
      "page": 212
    },
    {
      "heading": "3 - Load Balancing",
      "level": 3,
      "page": 212
    },
    {
      "heading": "4 - Content Delivery Network",
      "level": 3,
      "page": 212
    },
    {
      "heading": "5 - Async Processing",
      "level": 3,
      "page": 212
    },
    {
      "heading": "6 - Data Compression",
      "level": 3,
      "page": 212
    },
    {
      "heading": "Over to you: What other strategies to reduce latency have you seen?",
      "level": 3,
      "page": 212
    },
    {
      "heading": "Load Balancer Realistic Use Cases You May Not Know",
      "level": 2,
      "page": 213
    },
    {
      "heading": "Load balancers are inherently dynamic and adaptable, designed to efficiently address multiple",
      "level": 3,
      "page": 213
    },
    {
      "heading": "purposes and use cases in network traffic and server workload management.",
      "level": 3,
      "page": 213
    },
    {
      "heading": "Let's explore some of the use cases:",
      "level": 3,
      "page": 213
    },
    {
      "heading": "1. Failure Handling:",
      "level": 3,
      "page": 213
    },
    {
      "heading": "Automatically redirects traffic away from malfunctioning elements to maintain continuous service and",
      "level": 3,
      "page": 213
    },
    {
      "heading": "reduce service interruptions.",
      "level": 3,
      "page": 213
    },
    {
      "heading": "2. Instance Health Checks:",
      "level": 3,
      "page": 213
    },
    {
      "heading": "Continuously evaluates the functionality of instances, directing incoming requests exclusively to",
      "level": 3,
      "page": 213
    },
    {
      "heading": "those that are fully operational and efficient.",
      "level": 3,
      "page": 213
    },
    {
      "heading": "3. Platform Specific Routing:",
      "level": 3,
      "page": 213
    },
    {
      "heading": "Routes requests from different device types (like mobiles, desktops) to specialized backend",
      "level": 3,
      "page": 214
    },
    {
      "heading": "systems, providing customized responses based on platform.",
      "level": 3,
      "page": 214
    },
    {
      "heading": "4. SSL Termination:",
      "level": 3,
      "page": 214
    },
    {
      "heading": "Handles the encryption and decryption of SSL traffic, reducing the processing burden on backend",
      "level": 3,
      "page": 214
    },
    {
      "heading": "infrastructure.",
      "level": 3,
      "page": 214
    },
    {
      "heading": "5. Cross Zone Load Balancing:",
      "level": 3,
      "page": 214
    },
    {
      "heading": "Distributes incoming traffic across various geographic or network zones, increasing the system's",
      "level": 3,
      "page": 214
    },
    {
      "heading": "resilience and capacity for handling large volumes of requests.",
      "level": 3,
      "page": 214
    },
    {
      "heading": "6. User Stickiness:",
      "level": 3,
      "page": 214
    },
    {
      "heading": "Maintains user session integrity and tailored user interactions by consistently directing requests from",
      "level": 3,
      "page": 214
    },
    {
      "heading": "specific users to designated backend servers.",
      "level": 3,
      "page": 214
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 214
    },
    {
      "heading": "Which of these use cases would you consider adding to your network to enhance system reliability",
      "level": 3,
      "page": 214
    },
    {
      "heading": "and why?",
      "level": 3,
      "page": 214
    },
    {
      "heading": "25 Papers That Completely Transformed the Computer",
      "level": 2,
      "page": 215
    },
    {
      "heading": "World.",
      "level": 2,
      "page": 215
    },
    {
      "heading": "1. Dynamo - Amazon’s Highly Available Key Value Store",
      "level": 3,
      "page": 215
    },
    {
      "heading": "2. Google File System: Insights into a highly scalable file system",
      "level": 3,
      "page": 215
    },
    {
      "heading": "3. Scaling Memcached at Facebook: A look at the complexities of Caching",
      "level": 3,
      "page": 215
    },
    {
      "heading": "4. BigTable: The design principles behind a distributed storage system",
      "level": 3,
      "page": 215
    },
    {
      "heading": "5. Borg - Large Scale Cluster Management at Google",
      "level": 3,
      "page": 215
    },
    {
      "heading": "6. Cassandra: A look at the design and architecture of a distributed NoSQL database",
      "level": 3,
      "page": 216
    },
    {
      "heading": "7. Attention Is All You Need: Into a new deep learning architecture known as the transformer",
      "level": 3,
      "page": 216
    },
    {
      "heading": "8. Kafka: Internals of the distributed messaging platform",
      "level": 3,
      "page": 216
    },
    {
      "heading": "9. FoundationDB: A look at how a distributed database",
      "level": 3,
      "page": 216
    },
    {
      "heading": "10. Amazon Aurora: To learn how Amazon provides high-availability and performance",
      "level": 3,
      "page": 216
    },
    {
      "heading": "11. Spanner: Design and architecture of Google’s globally distributed databas",
      "level": 3,
      "page": 216
    },
    {
      "heading": "12. MapReduce: A detailed look at how MapReduce enables parallel processing of massive volumes",
      "level": 3,
      "page": 216
    },
    {
      "heading": "of data",
      "level": 3,
      "page": 216
    },
    {
      "heading": "13. Shard Manager: Understanding the generic shard management framework",
      "level": 3,
      "page": 216
    },
    {
      "heading": "14. Dapper: Insights into Google’s distributed systems tracing infrastructure",
      "level": 3,
      "page": 216
    },
    {
      "heading": "15. Flink: A detailed look at the uniﬁed architecture of stream and batch processing",
      "level": 3,
      "page": 216
    },
    {
      "heading": "16. A Comprehensive Survey on Vector Databases",
      "level": 3,
      "page": 216
    },
    {
      "heading": "17. Zanzibar: A look at the design, implementation and deployment of a global system for managing",
      "level": 3,
      "page": 216
    },
    {
      "heading": "access control lists at Google",
      "level": 3,
      "page": 216
    },
    {
      "heading": "18. Monarch: Architecture of Google’s in-memory time series database",
      "level": 3,
      "page": 216
    },
    {
      "heading": "19. Thrift: Explore the design choices behind Facebook’s code-generation tool",
      "level": 3,
      "page": 216
    },
    {
      "heading": "20. Bitcoin: The ground-breaking introduction to the peer-to-peer electronic cash system",
      "level": 3,
      "page": 216
    },
    {
      "heading": "21. WTF - Who to Follow Service at Twitter: Twitter’s (now X) user recommendation system",
      "level": 3,
      "page": 216
    },
    {
      "heading": "22. MyRocks: LSM-Tree Database Storage Engine",
      "level": 3,
      "page": 216
    },
    {
      "heading": "23. GoTo Considered Harmful",
      "level": 3,
      "page": 216
    },
    {
      "heading": "24. Raft Consensus Algorithm: To learn about the more understandable consensus algorithm",
      "level": 3,
      "page": 216
    },
    {
      "heading": "25. Time Clocks and Ordering of Events: The extremely important paper that explains the concept of",
      "level": 3,
      "page": 216
    },
    {
      "heading": "time and event ordering in a distributed system",
      "level": 3,
      "page": 216
    },
    {
      "heading": "Over to you: I’m sure we missed many important papers. Which ones do you think should be",
      "level": 3,
      "page": 216
    },
    {
      "heading": "included?",
      "level": 3,
      "page": 216
    },
    {
      "heading": "IPv4 vs. IPv6, what are the differences?",
      "level": 2,
      "page": 217
    },
    {
      "heading": "The transition from Internet Protocol version 4 (IPv4) to Internet Protocol version 6 (IPv6) is primarily",
      "level": 3,
      "page": 217
    },
    {
      "heading": "driven by the need for more internet addresses, alongside the desire to streamline certain aspects of",
      "level": 3,
      "page": 217
    },
    {
      "heading": "network management.",
      "level": 3,
      "page": 217
    },
    {
      "heading": "🔹 Format and Length",
      "level": 3,
      "page": 217
    },
    {
      "heading": "IPv4 uses a 32-bit address format, which is typically displayed as four decimal numbers separated",
      "level": 3,
      "page": 217
    },
    {
      "heading": "by dots (e.g., 192.168.0. 12). The 32-bit format allows for approximately 4.3 billion unique",
      "level": 3,
      "page": 217
    },
    {
      "heading": "addresses, a number that is rapidly proving insufficient due to the explosion of internet-connected",
      "level": 3,
      "page": 217
    },
    {
      "heading": "devices.",
      "level": 3,
      "page": 217
    },
    {
      "heading": "In contrast, IPv6 utilizes a 128-bit address format, represented by eight groups of four hexadecimal",
      "level": 3,
      "page": 217
    },
    {
      "heading": "digits separated by colons (e.g., 50B3:F200:0211:AB00:0123:4321:6571:B000). This expansion",
      "level": 3,
      "page": 217
    },
    {
      "heading": "allows for approximately much more addresses, ensuring the internet's growth can continue",
      "level": 3,
      "page": 217
    },
    {
      "heading": "unabated.",
      "level": 3,
      "page": 217
    },
    {
      "heading": "🔹 Header",
      "level": 3,
      "page": 218
    },
    {
      "heading": "The IPv4 header is more complex and includes fields such as the header length, service type, total",
      "level": 3,
      "page": 218
    },
    {
      "heading": "and destination IP addresses, and options.",
      "level": 3,
      "page": 218
    },
    {
      "heading": "IPv6 headers are designed to be simpler and more efficient. The fixed header size is 40 bytes and",
      "level": 3,
      "page": 218
    },
    {
      "heading": "includes less frequently used fields in optional extension headers. The main fields include version,",
      "level": 3,
      "page": 218
    },
    {
      "heading": "This simplification helps improve packet processing speeds.",
      "level": 3,
      "page": 218
    },
    {
      "heading": "🔹 Translation between IPv4 and IPv6",
      "level": 3,
      "page": 218
    },
    {
      "heading": "As the internet transitions from IPv4 to IPv6, mechanisms to allow these protocols to coexist have",
      "level": 3,
      "page": 218
    },
    {
      "heading": "become essential:",
      "level": 3,
      "page": 218
    },
    {
      "heading": "- Dual Stack: This technique involves running IPv4 and IPv6 simultaneously on the same network",
      "level": 3,
      "page": 218
    },
    {
      "heading": "devices. It allows seamless communication in both protocols, depending on the destination address",
      "level": 3,
      "page": 218
    },
    {
      "heading": "availability and compatibility. The dual stack is considered one of the best approaches for the smooth",
      "level": 3,
      "page": 218
    },
    {
      "heading": "transition from IPv4 to IPv6.",
      "level": 3,
      "page": 218
    },
    {
      "heading": "My Favorite 10 Books for Software Developers",
      "level": 2,
      "page": 219
    },
    {
      "heading": "General Advice",
      "level": 3,
      "page": 219
    },
    {
      "heading": "1 - The Pragmatic Programmer by Andrew Hunt and David Thomas",
      "level": 3,
      "page": 219
    },
    {
      "heading": "2 - Code Complete by Steve McConnell: Often considered a bible for software developers, this",
      "level": 3,
      "page": 219
    },
    {
      "heading": "comprehensive book covers all aspects of software development, from design and coding to testing",
      "level": 3,
      "page": 219
    },
    {
      "heading": "and maintenance.",
      "level": 3,
      "page": 219
    },
    {
      "heading": "Coding",
      "level": 3,
      "page": 219
    },
    {
      "heading": "1 - Clean Code by Robert C. Martin",
      "level": 3,
      "page": 219
    },
    {
      "heading": "2 - Refactoring by Martin Fowler",
      "level": 3,
      "page": 219
    },
    {
      "heading": "Software Architecture",
      "level": 3,
      "page": 220
    },
    {
      "heading": "1 - Designing Data-Intensive Applications by Martin Kleppmann",
      "level": 3,
      "page": 220
    },
    {
      "heading": "2 - System Design Interview (our own book :))",
      "level": 3,
      "page": 220
    },
    {
      "heading": "Design Patterns",
      "level": 3,
      "page": 220
    },
    {
      "heading": "1 - Design Patterns by Eric Gamma and Others",
      "level": 3,
      "page": 220
    },
    {
      "heading": "2 - Domain-Driven Design by Eric Evans",
      "level": 3,
      "page": 220
    },
    {
      "heading": "Data Structures and Algorithms",
      "level": 3,
      "page": 220
    },
    {
      "heading": "1 - Introduction to Algorithms by Cormen, Leiserson, Rivest, and Stein",
      "level": 3,
      "page": 220
    },
    {
      "heading": "2 - Cracking the Coding Interview by Gayle Laakmann McDowell",
      "level": 3,
      "page": 220
    },
    {
      "heading": "Over to you: What is your favorite book?",
      "level": 3,
      "page": 220
    },
    {
      "heading": "Change Data Capture: key to leverage real-time Data",
      "level": 2,
      "page": 221
    },
    {
      "heading": "90% of the world’s data was created in the last two years and this growth will only get faster.",
      "level": 3,
      "page": 221
    },
    {
      "heading": "However, the biggest challenge is to leverage this data in real-time. Constant data changes make",
      "level": 3,
      "page": 221
    },
    {
      "heading": "databases, data lakes, and data warehouses out of sync.",
      "level": 3,
      "page": 221
    },
    {
      "heading": "CDC or Change Data Capture can help you overcome this challenge.",
      "level": 3,
      "page": 221
    },
    {
      "heading": "CDC identifies and captures changes made to the data in a database, allowing you to replicate and",
      "level": 3,
      "page": 221
    },
    {
      "heading": "sync data across multiple systems.",
      "level": 3,
      "page": 221
    },
    {
      "heading": "So, how does Change Data Capture work? Here's a step-by-step breakdown:",
      "level": 3,
      "page": 221
    },
    {
      "heading": "1 - Data Modification: A change is made to the data in the source database. It could be an insert,",
      "level": 3,
      "page": 222
    },
    {
      "heading": "update, or delete operation on a table.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "2 - Change Capture: A CDC tool monitors the database transaction logs to capture the",
      "level": 3,
      "page": 222
    },
    {
      "heading": "modifications. It uses the source connector to connect to the database and read the logs.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "3 - Change Processing: The captured changes are processed and transformed into a format suitable",
      "level": 3,
      "page": 222
    },
    {
      "heading": "for the downstream systems.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "4 - Change Propagation: The processed changes are published to a message queue and",
      "level": 3,
      "page": 222
    },
    {
      "heading": "propagated to the target systems, such as data warehouses, analytics platforms, distributed caches",
      "level": 3,
      "page": 222
    },
    {
      "heading": "like Redis, and so on.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "5 - Real-Time Integration: The CDC tool uses its sink connector to consume the log and update the",
      "level": 3,
      "page": 222
    },
    {
      "heading": "target systems. The changes are received in real time, allowing for conflict-free data analysis and",
      "level": 3,
      "page": 222
    },
    {
      "heading": "decision-making.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "Users only need to take care of step 1 while all other steps are transparent.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "A popular CDC solution uses Debezium with Kafka Connect to stream data changes from the source",
      "level": 3,
      "page": 222
    },
    {
      "heading": "to target systems using Kafka as the broker. Debezium has connectors for most databases such as",
      "level": 3,
      "page": 222
    },
    {
      "heading": "MySQL, PostgreSQL, Oracle, etc.",
      "level": 3,
      "page": 222
    },
    {
      "heading": "Over to you: have you leveraged CDC in your application before?",
      "level": 3,
      "page": 222
    },
    {
      "heading": "Netflix's Overall Architecture",
      "level": 2,
      "page": 223
    },
    {
      "heading": "This post is based on research from many Netflix engineering blogs and open-source projects. If you",
      "level": 3,
      "page": 223
    },
    {
      "heading": "come across any inaccuracies, please feel free to inform us.",
      "level": 3,
      "page": 223
    },
    {
      "heading": "Mobile and web: Netflix has adopted Swift and Kotlin to build native mobile apps. For its web",
      "level": 3,
      "page": 223
    },
    {
      "heading": "application, it uses React.",
      "level": 3,
      "page": 223
    },
    {
      "heading": "Frontend/server communication: Netflix uses GraphQL.",
      "level": 3,
      "page": 223
    },
    {
      "heading": "Backend services: Netflix relies on ZUUL, Eureka, the Spring Boot framework, and other",
      "level": 3,
      "page": 224
    },
    {
      "heading": "technologies.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Databases: Netflix utilizes EV cache, Cassandra, CockroachDB, and other databases.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Messaging/streaming: Netflix employs Apache Kafka and Fink for messaging and streaming",
      "level": 3,
      "page": 224
    },
    {
      "heading": "purposes.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Video storage: Netflix uses S3 and Open Connect for video storage.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Data processing: Netflix utilizes Flink and Spark for data processing, which is then visualized using",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Tableau. Redshift is used for processing structured data warehouse information.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "CI/CD: Netflix employs various tools such as JIRA, Confluence, PagerDuty, Jenkins, Gradle, Chaos",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Monkey, Spinnaker, Altas, and more for CI/CD processes.",
      "level": 3,
      "page": 224
    },
    {
      "heading": "Top 5 common ways to improve API performance.",
      "level": 2,
      "page": 225
    },
    {
      "heading": "Result Pagination:",
      "level": 3,
      "page": 225
    },
    {
      "heading": "This method is used to optimize large result sets by streaming them back to the client, enhancing",
      "level": 3,
      "page": 225
    },
    {
      "heading": "service responsiveness and user experience.",
      "level": 3,
      "page": 225
    },
    {
      "heading": "Asynchronous Logging:",
      "level": 3,
      "page": 225
    },
    {
      "heading": "This approach involves sending logs to a lock-free buffer and returning immediately, rather than",
      "level": 3,
      "page": 225
    },
    {
      "heading": "dealing with the disk on every call. Logs are periodically flushed to the disk, significantly reducing I/O",
      "level": 3,
      "page": 225
    },
    {
      "heading": "overhead.",
      "level": 3,
      "page": 225
    },
    {
      "heading": "Data Caching:",
      "level": 3,
      "page": 225
    },
    {
      "heading": "Frequently accessed data can be stored in a cache to speed up retrieval. Clients check the cache",
      "level": 3,
      "page": 225
    },
    {
      "heading": "before querying the database, with data storage solutions like Redis offering faster access due to",
      "level": 3,
      "page": 225
    },
    {
      "heading": "in-memory storage.",
      "level": 3,
      "page": 225
    },
    {
      "heading": "Payload Compression:",
      "level": 3,
      "page": 225
    },
    {
      "heading": "To reduce data transmission time, requests and responses can be compressed (e.g., using gzip),",
      "level": 3,
      "page": 225
    },
    {
      "heading": "making the upload and download processes quicker.",
      "level": 3,
      "page": 225
    },
    {
      "heading": "Connection Pooling:",
      "level": 3,
      "page": 226
    },
    {
      "heading": "This technique involves using a pool of open connections to manage database interaction, which",
      "level": 3,
      "page": 226
    },
    {
      "heading": "reduces the overhead associated with opening and closing connections each time data needs to be",
      "level": 3,
      "page": 226
    },
    {
      "heading": "loaded. The pool manages the lifecycle of connections for efficient resource use.",
      "level": 3,
      "page": 226
    },
    {
      "heading": "Over to you: What other ways do you use to improve API performance?",
      "level": 3,
      "page": 226
    },
    {
      "heading": "Popular interview question: how to diagnose a mysterious",
      "level": 2,
      "page": 227
    },
    {
      "heading": "process that’s taking too much CPU, memory, IO, etc?",
      "level": 2,
      "page": 227
    },
    {
      "heading": "The diagram below illustrates helpful tools in a Linux system.",
      "level": 3,
      "page": 227
    },
    {
      "heading": "🔹‘iostat’ - reports CPU and input/output statistics of the system.",
      "level": 3,
      "page": 227
    },
    {
      "heading": "🔹‘netstat’ - displays statistical data related to IP, TCP, UDP, and ICMP protocols.",
      "level": 3,
      "page": 227
    },
    {
      "heading": "🔹‘lsof’ - lists open files of the current system.",
      "level": 3,
      "page": 227
    },
    {
      "heading": "🔹‘pidstat’ - monitors the utilization of system resources by all or specified processes, including",
      "level": 3,
      "page": 227
    },
    {
      "heading": "CPU, memory, device IO, task switching, threads, etc.",
      "level": 3,
      "page": 227
    },
    {
      "heading": "What is a deadlock?",
      "level": 2,
      "page": 228
    },
    {
      "heading": "A deadlock occurs when two or more transactions are waiting for each other to release locks on",
      "level": 3,
      "page": 228
    },
    {
      "heading": "resources they need to continue processing. This results in a situation where neither transaction can",
      "level": 3,
      "page": 228
    },
    {
      "heading": "proceed, and they end up waiting indefinitely.",
      "level": 3,
      "page": 228
    },
    {
      "heading": "🔹 Coffman Conditions",
      "level": 3,
      "page": 228
    },
    {
      "heading": "The Coffman conditions, named after Edward G. Coffman, Jr., who first outlined them in 1971,",
      "level": 3,
      "page": 228
    },
    {
      "heading": "describe four necessary conditions that must be present simultaneously for a deadlock to occur:",
      "level": 3,
      "page": 228
    },
    {
      "heading": "- Mutual Exclusion",
      "level": 3,
      "page": 228
    },
    {
      "heading": "- Hold and Wait",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- No Preemption",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Circular Wait",
      "level": 3,
      "page": 229
    },
    {
      "heading": "🔹 Deadlock Prevention",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Resource ordering: impose a total ordering of all resource types, and require that each process",
      "level": 3,
      "page": 229
    },
    {
      "heading": "requests resources in a strictly increasing order.",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Timeouts: A process that holds resources for too long can be rolled back.",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Banker’s Algorithm: A deadlock avoidance algorithm that simulates the allocation of resources to",
      "level": 3,
      "page": 229
    },
    {
      "heading": "processes and helps in deciding whether it is safe to grant a resource request based on the future",
      "level": 3,
      "page": 229
    },
    {
      "heading": "availability of resources, thus avoiding unsafe states.",
      "level": 3,
      "page": 229
    },
    {
      "heading": "🔹 Deadlock Recovery",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Selecting a victim: Most modern Database Management Systems (DBMS) and Operating Systems",
      "level": 3,
      "page": 229
    },
    {
      "heading": "implement sophisticated algorithms for detecting deadlocks and selecting victims, often allowing",
      "level": 3,
      "page": 229
    },
    {
      "heading": "customization of the victim selection criteria via configuration settings. The selection can be based",
      "level": 3,
      "page": 229
    },
    {
      "heading": "on resource utilization, transaction priority, cost of rollback etc.",
      "level": 3,
      "page": 229
    },
    {
      "heading": "- Rollback: The database may roll back the entire transaction or just enough of it to break the",
      "level": 3,
      "page": 229
    },
    {
      "heading": "deadlock. Rolled-back transactions can be restarted automatically by the database management",
      "level": 3,
      "page": 229
    },
    {
      "heading": "system.",
      "level": 3,
      "page": 229
    },
    {
      "heading": "Over to you: have you solved any tricky deadlock issues?",
      "level": 3,
      "page": 229
    },
    {
      "heading": "What’s the difference between Session-based authentication",
      "level": 2,
      "page": 230
    },
    {
      "heading": "and JWTs?",
      "level": 2,
      "page": 230
    },
    {
      "heading": "Here’s a simple breakdown for both approaches:",
      "level": 3,
      "page": 230
    },
    {
      "heading": "Session-Based Authentication",
      "level": 3,
      "page": 230
    },
    {
      "heading": "In this approach, you store the session information in a database or session store and hand over a",
      "level": 3,
      "page": 230
    },
    {
      "heading": "session ID to the user.",
      "level": 3,
      "page": 230
    },
    {
      "heading": "Think of it like a passenger getting just the Ticket ID of their flight while all other details are stored in",
      "level": 3,
      "page": 230
    },
    {
      "heading": "the airline’s database.",
      "level": 3,
      "page": 230
    },
    {
      "heading": "Here’s how it works:",
      "level": 3,
      "page": 231
    },
    {
      "heading": "1 - The user makes a login request and the frontend app sends the request to the backend server.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "2 - The backend creates a session using a secret key and stores the data in session storage.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "3 - The server sends a cookie back to the client with the unique session ID.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "4 - The user makes a new request and the browser sends the session ID along with the request.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "5 - The server authenticates the user using the session ID.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "JWT-Based Authentication",
      "level": 3,
      "page": 231
    },
    {
      "heading": "In the JWT-based approach, you don’t store the session information in the session store.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "The entire information is available within the token.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "Think of it like getting the flight ticket along with all the details available on the ticket but encoded.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "Here’s how it works:",
      "level": 3,
      "page": 231
    },
    {
      "heading": "1 - The user makes a login request and it goes to the backend server.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "2 - The server verifies the credentials and issues a JWT. The JWT is signed using a private key and",
      "level": 3,
      "page": 231
    },
    {
      "heading": "no session storage is involved.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "3 - The JWT is passed to the client, either as a cookie or in the response body. Both approaches",
      "level": 3,
      "page": 231
    },
    {
      "heading": "have their pros and cons but we’ve gone with the cookie approach.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "4 - For every subsequent request, the browser sends the cookie with the JWT.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "5 - The server verifies the JWT using the secret private key and extracts the user info.",
      "level": 3,
      "page": 231
    },
    {
      "heading": "Top 9 Cases Behind 100% CPU Usage.",
      "level": 2,
      "page": 232
    },
    {
      "heading": "The diagram below shows common culprits that can lead to 100% CPU usage. Understanding these",
      "level": 3,
      "page": 232
    },
    {
      "heading": "can help in diagnosing problems and improving system efficiency.",
      "level": 3,
      "page": 232
    },
    {
      "heading": "1. Infinite Loops",
      "level": 3,
      "page": 232
    },
    {
      "heading": "2. Background Processes",
      "level": 3,
      "page": 232
    },
    {
      "heading": "3. High Traffic Volume",
      "level": 3,
      "page": 232
    },
    {
      "heading": "4. Resource-Intensive Applications",
      "level": 3,
      "page": 232
    },
    {
      "heading": "5. Insufficient Memory",
      "level": 3,
      "page": 233
    },
    {
      "heading": "6. Concurrent Processes",
      "level": 3,
      "page": 233
    },
    {
      "heading": "7. Busy Waiting",
      "level": 3,
      "page": 233
    },
    {
      "heading": "8. Regular Expression Matching",
      "level": 3,
      "page": 233
    },
    {
      "heading": "9. Malware and Viruses",
      "level": 3,
      "page": 233
    },
    {
      "heading": "Over to you: Did we miss anything important?",
      "level": 3,
      "page": 233
    },
    {
      "heading": "Top 6 ElasticSearch Use Cases.",
      "level": 2,
      "page": 234
    },
    {
      "heading": "Elasticsearch is widely used for its powerful and versatile search capabilities. The diagram below",
      "level": 3,
      "page": 234
    },
    {
      "heading": "shows the top 6 use cases:",
      "level": 3,
      "page": 234
    },
    {
      "heading": "🔹 Full-Text Search",
      "level": 3,
      "page": 234
    },
    {
      "heading": "Elasticsearch excels in full-text search scenarios due to its robust, scalable, and fast search",
      "level": 3,
      "page": 234
    },
    {
      "heading": "capabilities. It allows users to perform complex queries with near real-time responses.",
      "level": 3,
      "page": 234
    },
    {
      "heading": "🔹 Real-Time Analytics",
      "level": 3,
      "page": 234
    },
    {
      "heading": "Elasticsearch's ability to perform analytics in real-time makes it suitable for dashboards that track live",
      "level": 3,
      "page": 234
    },
    {
      "heading": "data, such as user activity, transactions, or sensor outputs.",
      "level": 3,
      "page": 234
    },
    {
      "heading": "🔹 Machine Learning",
      "level": 3,
      "page": 234
    },
    {
      "heading": "With the addition of the machine learning feature in X-Pack, Elasticsearch can automatically detect",
      "level": 3,
      "page": 235
    },
    {
      "heading": "anomalies, patterns, and trends in the data.",
      "level": 3,
      "page": 235
    },
    {
      "heading": "🔹 Geo-Data Applications",
      "level": 3,
      "page": 235
    },
    {
      "heading": "Elasticsearch supports geo-data through geospatial indexing and searching capabilities. This is",
      "level": 3,
      "page": 235
    },
    {
      "heading": "useful for applications that need to manage and visualize geographical information, such as mapping",
      "level": 3,
      "page": 235
    },
    {
      "heading": "and location-based services.",
      "level": 3,
      "page": 235
    },
    {
      "heading": "🔹 Log and Event Data Analysis",
      "level": 3,
      "page": 235
    },
    {
      "heading": "Organizations use Elasticsearch to aggregate, monitor, and analyze logs and event data from",
      "level": 3,
      "page": 235
    },
    {
      "heading": "various sources. It's a key component of the ELK stack (Elasticsearch, Logstash, Kibana), which is",
      "level": 3,
      "page": 235
    },
    {
      "heading": "popular for managing system and application logs to identify issues and monitor system health.",
      "level": 3,
      "page": 235
    },
    {
      "heading": "🔹 Security Information and Event Management (SIEM)",
      "level": 3,
      "page": 235
    },
    {
      "heading": "Elasticsearch can be used as a tool for SIEM, helping organizations to analyze security events in",
      "level": 3,
      "page": 235
    },
    {
      "heading": "real time.",
      "level": 3,
      "page": 235
    },
    {
      "heading": "Over to you: What did we miss?",
      "level": 3,
      "page": 235
    },
    {
      "heading": "AWS Services Cheat Sheet",
      "level": 2,
      "page": 236
    },
    {
      "heading": "AWS grew from an in-house project to the market leader in cloud services, offering so many different",
      "level": 3,
      "page": 236
    },
    {
      "heading": "services that even experts can find it a lot to take in.",
      "level": 3,
      "page": 236
    },
    {
      "heading": "The platform not only caters to foundational cloud needs but also stays at the forefront of emerging",
      "level": 3,
      "page": 236
    },
    {
      "heading": "technologies such as machine learning and IoT, establishing itself as a bedrock for cutting-edge",
      "level": 3,
      "page": 236
    },
    {
      "heading": "innovation. AWS continuously refines its array of services, ensuring advanced capabilities for",
      "level": 3,
      "page": 236
    },
    {
      "heading": "security, scalability, and operational efficiency are available.",
      "level": 3,
      "page": 236
    },
    {
      "heading": "For those navigating the complex array of options, this AWS Services Guide is a helpful visual aid.",
      "level": 3,
      "page": 236
    },
    {
      "heading": "It simplifies the exploration of AWS's expansive landscape, making it accessible for users to identify",
      "level": 3,
      "page": 236
    },
    {
      "heading": "and leverage the right tools for their cloud-based endeavors.",
      "level": 3,
      "page": 236
    },
    {
      "heading": "Over to you: What improvements would you like to see in AWS services based on your usage?",
      "level": 3,
      "page": 236
    },
    {
      "heading": "How do computer programs run?",
      "level": 2,
      "page": 237
    },
    {
      "heading": "The diagram shows the steps.",
      "level": 3,
      "page": 237
    },
    {
      "heading": "🔹 User interaction and command initiation",
      "level": 3,
      "page": 237
    },
    {
      "heading": "By double-clicking a program, a user is instructing the operating system to launch an application via",
      "level": 3,
      "page": 237
    },
    {
      "heading": "the graphical user interface.",
      "level": 3,
      "page": 237
    },
    {
      "heading": "🔹 Program Preloading",
      "level": 3,
      "page": 237
    },
    {
      "heading": "Once the execution request has been initiated, the operating system first retrieves the program's",
      "level": 3,
      "page": 237
    },
    {
      "heading": "executable file.",
      "level": 3,
      "page": 237
    },
    {
      "heading": "The operating system locates this file through the file system and loads it into memory in preparation",
      "level": 3,
      "page": 237
    },
    {
      "heading": "for execution.",
      "level": 3,
      "page": 237
    },
    {
      "heading": "🔹 Dependency resolution and loading",
      "level": 3,
      "page": 237
    },
    {
      "heading": "Most modern applications rely on a number of shared libraries, such as dynamic link libraries (DLLs).",
      "level": 3,
      "page": 237
    },
    {
      "heading": "🔹 Allocating memory space",
      "level": 3,
      "page": 238
    },
    {
      "heading": "The operating system is responsible for allocating space in memory.",
      "level": 3,
      "page": 238
    },
    {
      "heading": "🔹 Initializing the Runtime Environment",
      "level": 3,
      "page": 238
    },
    {
      "heading": "After allocating memory, the operating system and execution environment (e.g., Java's JVM or the",
      "level": 3,
      "page": 238
    },
    {
      "heading": ".NET Framework) will initialize various resources needed to run the program.",
      "level": 3,
      "page": 238
    },
    {
      "heading": "🔹 System Calls and Resource Management",
      "level": 3,
      "page": 238
    },
    {
      "heading": "The entry point of a program (usually a function named `main`) is called to begin execution of the",
      "level": 3,
      "page": 238
    },
    {
      "heading": "code written by the programmer.",
      "level": 3,
      "page": 238
    },
    {
      "heading": "🔹 Von Neumann Architecture",
      "level": 3,
      "page": 238
    },
    {
      "heading": "In the Von Neumann architecture, the CPU executes instructions stored in memory.",
      "level": 3,
      "page": 238
    },
    {
      "heading": "🔹 Program termination",
      "level": 3,
      "page": 238
    },
    {
      "heading": "Eventually, when the program has completed its task, or the user actively terminates the application,",
      "level": 3,
      "page": 238
    },
    {
      "heading": "the program will begin a cleanup phase. This includes closing open file descriptors, freeing up",
      "level": 3,
      "page": 238
    },
    {
      "heading": "network resources, and returning memory to the system.",
      "level": 3,
      "page": 238
    },
    {
      "heading": "A cheat sheet for API designs.",
      "level": 2,
      "page": 239
    },
    {
      "heading": "APIs expose business logic and data to external systems, so designing them securely and efficiently",
      "level": 3,
      "page": 239
    },
    {
      "heading": "is important.",
      "level": 3,
      "page": 239
    },
    {
      "heading": "🔹 API key generation",
      "level": 3,
      "page": 239
    },
    {
      "heading": "We normally generate one unique app ID for each client and generate different pairs of public key",
      "level": 3,
      "page": 239
    },
    {
      "heading": "(access key) and private key (secret key) to cater to different authorizations. For example, we can",
      "level": 3,
      "page": 239
    },
    {
      "heading": "🔹 Signature generation",
      "level": 3,
      "page": 239
    },
    {
      "heading": "Signatures are used to verify the authenticity and integrity of API requests. They are generated using",
      "level": 3,
      "page": 239
    },
    {
      "heading": "the secret key and typically involve the following steps:",
      "level": 3,
      "page": 239
    },
    {
      "heading": "- Collect parameters",
      "level": 3,
      "page": 239
    },
    {
      "heading": "- Create a string to sign",
      "level": 3,
      "page": 239
    },
    {
      "heading": "- Hash the string: Use a cryptographic hash function, like HMAC (Hash-based Message",
      "level": 3,
      "page": 240
    },
    {
      "heading": "Authentication Code) in combination with SHA-256, to hash the string using the secret key.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "🔹 Send the requests",
      "level": 3,
      "page": 240
    },
    {
      "heading": "When designing an API, deciding what should be included in HTTP request parameters is crucial.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "Include the following in the request parameters:",
      "level": 3,
      "page": 240
    },
    {
      "heading": "- Authentication Credentials",
      "level": 3,
      "page": 240
    },
    {
      "heading": "- Timestamp: To prevent replay attacks.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "- Request-specific Data: Necessary to process the request, such as user IDs, transaction details, or",
      "level": 3,
      "page": 240
    },
    {
      "heading": "search queries.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "- Nonces: Randomly generated strings included in each request to ensure that each request is",
      "level": 3,
      "page": 240
    },
    {
      "heading": "unique and to prevent replay attacks.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "🔹 Security guidelines",
      "level": 3,
      "page": 240
    },
    {
      "heading": "To safeguard APIs against common vulnerabilities and threats, adhere to these security guidelines.",
      "level": 3,
      "page": 240
    },
    {
      "heading": "Azure Services Cheat Sheet",
      "level": 2,
      "page": 241
    },
    {
      "heading": "Launching in 2010, Microsoft Azure has quickly grown to hold the No. 2 position in market share by",
      "level": 3,
      "page": 241
    },
    {
      "heading": "evolving from basic offerings to a comprehensive, flexible cloud ecosystem.",
      "level": 3,
      "page": 241
    },
    {
      "heading": "Today, Azure not only supports traditional cloud applications but also caters to emerging",
      "level": 3,
      "page": 241
    },
    {
      "heading": "technologies such as AI, IoT, and blockchain, making it a crucial platform for innovation and",
      "level": 3,
      "page": 241
    },
    {
      "heading": "development.",
      "level": 3,
      "page": 241
    },
    {
      "heading": "As it evolves, Azure continues to enhance its capabilities to provide advanced solutions for security,",
      "level": 3,
      "page": 241
    },
    {
      "heading": "scalability, and efficiency, meeting the demands of modern enterprises and startups alike. This",
      "level": 3,
      "page": 241
    },
    {
      "heading": "expansion allows organizations to adapt and thrive in a rapidly changing digital landscape.",
      "level": 3,
      "page": 241
    },
    {
      "heading": "The attached illustration can serve as both an introduction and a quick reference for anyone aiming",
      "level": 3,
      "page": 241
    },
    {
      "heading": "to understand Azure.",
      "level": 3,
      "page": 241
    },
    {
      "heading": "Over to you: How does your experience with Azure compare to that with AWS?",
      "level": 3,
      "page": 241
    },
    {
      "heading": "Over to you: Does the card network charge the same interchange fee for big merchants as for small",
      "level": 3,
      "page": 241
    },
    {
      "heading": "merchants?",
      "level": 3,
      "page": 241
    },
    {
      "heading": "Why is Kafka fast?",
      "level": 2,
      "page": 242
    },
    {
      "heading": "There are many design decisions that contributed to Kafka’s performance. In this post, we’ll focus on",
      "level": 3,
      "page": 242
    },
    {
      "heading": "two. We think these two carried the most weight.",
      "level": 3,
      "page": 242
    },
    {
      "heading": "1️. The first one is Kafka’s reliance on Sequential I/O.",
      "level": 3,
      "page": 242
    },
    {
      "heading": "2️. The second design choice that gives Kafka its performance advantage is its focus on",
      "level": 3,
      "page": 242
    },
    {
      "heading": "efficiency: zero copy principle.",
      "level": 3,
      "page": 242
    },
    {
      "heading": "The diagram below illustrates how the data is transmitted between producer and consumer, and",
      "level": 3,
      "page": 242
    },
    {
      "heading": "what zero-copy means.",
      "level": 3,
      "page": 242
    },
    {
      "heading": "🔹Step 1.1 - 1.3: Producer writes data to the disk",
      "level": 3,
      "page": 242
    },
    {
      "heading": "🔹Step 2: Consumer reads data without zero-copy",
      "level": 3,
      "page": 242
    },
    {
      "heading": "2.1: The data is loaded from disk to OS cache",
      "level": 3,
      "page": 243
    },
    {
      "heading": "2.2 The data is copied from OS cache to Kafka application",
      "level": 3,
      "page": 243
    },
    {
      "heading": "2.3 Kafka application copies the data into the socket buffer",
      "level": 3,
      "page": 243
    },
    {
      "heading": "2.4 The data is copied from socket buffer to network card",
      "level": 3,
      "page": 243
    },
    {
      "heading": "2.5 The network card sends data out to the consumer",
      "level": 3,
      "page": 243
    },
    {
      "heading": "🔹Step 3: Consumer reads data with zero-copy",
      "level": 3,
      "page": 243
    },
    {
      "heading": "3.1: The data is loaded from disk to OS cache",
      "level": 3,
      "page": 243
    },
    {
      "heading": "3.2 OS cache directly copies the data to the network card via sendfile() command",
      "level": 3,
      "page": 243
    },
    {
      "heading": "3.3 The network card sends data out to the consumer",
      "level": 3,
      "page": 243
    },
    {
      "heading": "Zero copy is a shortcut to save multiple data copies between the application context and kernel",
      "level": 3,
      "page": 243
    },
    {
      "heading": "context.",
      "level": 3,
      "page": 243
    },
    {
      "heading": "How do we retry on failures?",
      "level": 2,
      "page": 244
    },
    {
      "heading": "In distributed systems and networked applications, retry strategies are crucial for handling transient",
      "level": 3,
      "page": 244
    },
    {
      "heading": "errors and network instability effectively. The diagram shows 4 common retry strategies.",
      "level": 3,
      "page": 244
    },
    {
      "heading": "🔹 Linear Backoff",
      "level": 3,
      "page": 244
    },
    {
      "heading": "Linear backoff involves waiting for a progressively increasing fixed interval between retry attempts.",
      "level": 3,
      "page": 244
    },
    {
      "heading": "Advantages: Simple to implement and understand.",
      "level": 3,
      "page": 244
    },
    {
      "heading": "Disadvantages: May not be ideal under high load or in high-concurrency environments as it could",
      "level": 3,
      "page": 244
    },
    {
      "heading": "lead to resource contention or \"retry storms\".",
      "level": 3,
      "page": 244
    },
    {
      "heading": "🔹 Linear Jitter Backoff",
      "level": 3,
      "page": 244
    },
    {
      "heading": "Linear jitter backoff modifies the linear backoff strategy by introducing randomness to the retry",
      "level": 3,
      "page": 245
    },
    {
      "heading": "intervals. This strategy still increases the delay linearly but adds a random \"jitter\" to each interval.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Advantages: The randomness helps spread out the retry attempts over time, reducing the chance of",
      "level": 3,
      "page": 245
    },
    {
      "heading": "synchronized retries across instances.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Disadvantages: Although better than simple linear backoff, this strategy might still lead to potential",
      "level": 3,
      "page": 245
    },
    {
      "heading": "issues with synchronized retries as the base interval increases only linearly.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "🔹 Exponential Backoff",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Exponential backoff involves increasing the delay between retries exponentially. The interval might",
      "level": 3,
      "page": 245
    },
    {
      "heading": "start at 1 second, then increase to 2 seconds, 4 seconds, 8 seconds, and so on, typically up to a",
      "level": 3,
      "page": 245
    },
    {
      "heading": "maximum delay. This approach is more aggressive in spacing out retries than linear backoff.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Advantages: Significantly reduces the load on the system and the likelihood of collision or overlap in",
      "level": 3,
      "page": 245
    },
    {
      "heading": "retry attempts, making it suitable for high-load environments.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Disadvantages: In situations where a quick retry might resolve the issue, this approach can",
      "level": 3,
      "page": 245
    },
    {
      "heading": "unnecessarily delay the resolution.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "🔹 Exponential Jitter Backoff",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Exponential jitter backoff combines exponential backoff with randomness. After each retry, the",
      "level": 3,
      "page": 245
    },
    {
      "heading": "backoff interval is exponentially increased, and then a random jitter is applied. The jitter can be either",
      "level": 3,
      "page": 245
    },
    {
      "heading": "additive (adding a random amount to the exponential delay) or multiplicative (multiplying the",
      "level": 3,
      "page": 245
    },
    {
      "heading": "exponential delay by a random factor).",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Advantages: Offers all the benefits of exponential backoff, with the added advantage of reducing",
      "level": 3,
      "page": 245
    },
    {
      "heading": "retry collisions even further due to the introduction of jitter.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "Disadvantages: The randomness can sometimes result in longer than necessary delays, especially if",
      "level": 3,
      "page": 245
    },
    {
      "heading": "the jitter is significant.",
      "level": 3,
      "page": 245
    },
    {
      "heading": "7 must-know strategies to scale your database.",
      "level": 2,
      "page": 246
    },
    {
      "heading": "1 - Indexing:",
      "level": 3,
      "page": 246
    },
    {
      "heading": "Check the query patterns of your application and create the right indexes.",
      "level": 3,
      "page": 246
    },
    {
      "heading": "2 - Materialized Views:",
      "level": 3,
      "page": 246
    },
    {
      "heading": "Pre-compute complex query results and store them for faster access.",
      "level": 3,
      "page": 246
    },
    {
      "heading": "3 - Denormalization:",
      "level": 3,
      "page": 246
    },
    {
      "heading": "Reduce complex joins to improve query performance.",
      "level": 3,
      "page": 246
    },
    {
      "heading": "4 - Vertical Scaling",
      "level": 3,
      "page": 246
    },
    {
      "heading": "Boost your database server by adding more CPU, RAM, or storage.",
      "level": 3,
      "page": 246
    },
    {
      "heading": "5 - Caching",
      "level": 3,
      "page": 246
    },
    {
      "heading": "Store frequently accessed data in a faster storage layer to reduce database load.",
      "level": 3,
      "page": 247
    },
    {
      "heading": "6 - Replication",
      "level": 3,
      "page": 247
    },
    {
      "heading": "Create replicas of your primary database on different servers for scaling the reads.",
      "level": 3,
      "page": 247
    },
    {
      "heading": "7 - Sharding",
      "level": 3,
      "page": 247
    },
    {
      "heading": "Split your database tables into smaller pieces and spread them across servers. Used for scaling the",
      "level": 3,
      "page": 247
    },
    {
      "heading": "writes as well as the reads.",
      "level": 3,
      "page": 247
    },
    {
      "heading": "Over to you: What other strategies do you use for scaling your databases?",
      "level": 3,
      "page": 247
    },
    {
      "heading": "Reddit’s Core Architecture that helps it serve over 1 billion",
      "level": 2,
      "page": 248
    },
    {
      "heading": "users every month.",
      "level": 2,
      "page": 248
    },
    {
      "heading": "This information is based on research from many Reddit engineering blogs. But since architecture is",
      "level": 3,
      "page": 248
    },
    {
      "heading": "ever-evolving, things might have changed in some aspects.",
      "level": 3,
      "page": 248
    },
    {
      "heading": "The main points of Reddit’s architecture are as follows:",
      "level": 3,
      "page": 248
    },
    {
      "heading": "1 - Reddit uses a Content Delivery Network (CDN) from Fastly as a front for the application",
      "level": 3,
      "page": 248
    },
    {
      "heading": "2 - Reddit started using jQuery in early 2009. Later on, they started using Typescript and have now",
      "level": 3,
      "page": 249
    },
    {
      "heading": "moved to modern Node.js frameworks. Over the years, Reddit has also built mobile apps for Android",
      "level": 3,
      "page": 249
    },
    {
      "heading": "and iOS.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "3 - Within the application stack, the load balancer sits in front and routes incoming requests to the",
      "level": 3,
      "page": 249
    },
    {
      "heading": "appropriate services.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "4 - Reddit started as a Python-based monolithic application but has since started moving to",
      "level": 3,
      "page": 249
    },
    {
      "heading": "microservices built using Go.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "5 - Reddit heavily uses GraphQL for its API layer. In early 2021, they started moving to GraphQL",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Federation, which is a way to combine multiple smaller GraphQL APIs known as Domain Graph",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Services (DGS). In 2022, the GraphQL team at Reddit added several new Go subgraphs for core",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Reddit entities thereby splitting the GraphQL monolith.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "the load on the database, they use memcached in front of Postgres. Also, they use Cassandra quite",
      "level": 3,
      "page": 249
    },
    {
      "heading": "heavily for new features mainly because of its resiliency and availability properties.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "7 - To support data replication and maintain cache consistency, Reddit uses Debezium to run a",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Change Data Capture process.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "8 - Expensive operations such as a user voting or submitting a link are deferred to an async job",
      "level": 3,
      "page": 249
    },
    {
      "heading": "queue via RabbitMQ and processed by job workers. For content safety checks and moderation, they",
      "level": 3,
      "page": 249
    },
    {
      "heading": "use Kafka to transfer data in real-time to run rules over them.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "9 - Reddit uses AWS and Kubernetes as the hosting platform for its various apps and internal",
      "level": 3,
      "page": 249
    },
    {
      "heading": "services.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "10 - For deployment and infrastructure, they use Spinnaker, Drone CI, and Terraform.",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Over to you: what other aspects do you know about Reddit’s architecture?",
      "level": 3,
      "page": 249
    },
    {
      "heading": "Everything You Need to Know About Cross-Site Scripting",
      "level": 2,
      "page": 250
    },
    {
      "heading": "(XSS).",
      "level": 1,
      "page": 250
    },
    {
      "heading": "XSS, a prevalent vulnerability, occurs when malicious scripts are injected into web pages, often",
      "level": 3,
      "page": 250
    },
    {
      "heading": "through input fields. Check out the diagram below for a deeper dive into how this vulnerability",
      "level": 3,
      "page": 250
    },
    {
      "heading": "emerges when user input is improperly handled and subsequently returned to the client, leaving",
      "level": 3,
      "page": 250
    },
    {
      "heading": "systems vulnerable to exploitation.",
      "level": 3,
      "page": 250
    },
    {
      "heading": "Understanding the distinction between Reflective and Stored XSS is crucial. Reflective XSS involves",
      "level": 3,
      "page": 250
    },
    {
      "heading": "immediate execution of the injected script, while Stored XSS persists over time, posing long-term",
      "level": 3,
      "page": 250
    },
    {
      "heading": "threats. Dive into the diagrams for a comprehensive comparison of these attack vectors.",
      "level": 3,
      "page": 250
    },
    {
      "heading": "Imagine this scenario: A cunning hacker exploits XSS to clandestinely harvest user credentials, such",
      "level": 3,
      "page": 250
    },
    {
      "heading": "as cookies, from their browser, potentially leading to unauthorized access and data breaches. It's a",
      "level": 3,
      "page": 250
    },
    {
      "heading": "chilling reality.",
      "level": 3,
      "page": 250
    },
    {
      "heading": "But fret not! Our flyer also delves into effective mitigation strategies, empowering you to fortify your",
      "level": 3,
      "page": 251
    },
    {
      "heading": "systems against XSS attacks. From input validation and output encoding to implementing strict",
      "level": 3,
      "page": 251
    },
    {
      "heading": "Content Security Policies (CSP), we've got you covered.",
      "level": 3,
      "page": 251
    },
    {
      "heading": "Over to you: How can we amplify user awareness to proactively prevent falling victim to XSS",
      "level": 3,
      "page": 251
    },
    {
      "heading": "attacks? Share your insights and strategies below! Let's collaboratively bolster our web defenses",
      "level": 3,
      "page": 251
    },
    {
      "heading": "and foster a safer digital environment.",
      "level": 3,
      "page": 251
    },
    {
      "heading": "15 Open-Source Projects That Changed the World",
      "level": 2,
      "page": 252
    },
    {
      "heading": "To come up with the list, we tried to look at the overall impact these projects have created on the",
      "level": 3,
      "page": 252
    },
    {
      "heading": "industry and related technologies. Also, we’ve focused on projects that have led to a big change in",
      "level": 3,
      "page": 252
    },
    {
      "heading": "the day-to-day lives of many software developers across the world.",
      "level": 3,
      "page": 252
    },
    {
      "heading": "Web Development",
      "level": 3,
      "page": 252
    },
    {
      "heading": "- Node.js: The cross-platform server-side Javascript runtime that brought JS to server-side",
      "level": 3,
      "page": 252
    },
    {
      "heading": "development",
      "level": 3,
      "page": 252
    },
    {
      "heading": "- React: The library that became the foundation of many web development frameworks.",
      "level": 3,
      "page": 252
    },
    {
      "heading": "- Apache HTTP Server: The highly versatile web server loved by enterprises and startups alike.",
      "level": 3,
      "page": 252
    },
    {
      "heading": "Served as inspiration for many other web servers over the years.",
      "level": 3,
      "page": 252
    },
    {
      "heading": "Data Management",
      "level": 3,
      "page": 252
    },
    {
      "heading": "- PostgreSQL: An open-source relational database management system that provided a high-quality",
      "level": 3,
      "page": 252
    },
    {
      "heading": "alternative to costly systems",
      "level": 3,
      "page": 252
    },
    {
      "heading": "- Redis: The super versatile data store that can be used a cache, message broker and even",
      "level": 3,
      "page": 253
    },
    {
      "heading": "general-purpose storage",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Elasticsearch: A scale solution to search, analyze and visualize large volumes of data",
      "level": 3,
      "page": 253
    },
    {
      "heading": "Developer Tools",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- VSCode: One of the most popular source code editors in the world",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Jupyter Notebook: The web application that lets developers share live code, equations,",
      "level": 3,
      "page": 253
    },
    {
      "heading": "visualizations and narrative text.",
      "level": 3,
      "page": 253
    },
    {
      "heading": "Machine Learning & Big Data",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Tensorflow: The leading choice to leverage machine learning techniques",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Apache Spark: Standard tool for big data processing and analytics platforms",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Kafka: Standard platform for building real-time data pipelines and applications.",
      "level": 3,
      "page": 253
    },
    {
      "heading": "DevOps & Containerization",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Docker: The open source solution that allows developers to package and deploy applications in a",
      "level": 3,
      "page": 253
    },
    {
      "heading": "consistent and portable way.",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Kubernetes: The heart of Cloud-Native architecture and a platform to manage multiple containers",
      "level": 3,
      "page": 253
    },
    {
      "heading": "- Linux: The OS that democratized the world of software development.",
      "level": 3,
      "page": 253
    },
    {
      "heading": "Over to you: Do you agree with the list? What did we miss?",
      "level": 3,
      "page": 253
    },
    {
      "heading": "Types of Memory and Storage",
      "level": 2,
      "page": 254
    },
    {
      "heading": "- The fundamental duo: RAM and ROM",
      "level": 3,
      "page": 254
    },
    {
      "heading": "- DDR4 and DDR5",
      "level": 3,
      "page": 254
    },
    {
      "heading": "- Firmware and BIOS",
      "level": 3,
      "page": 254
    },
    {
      "heading": "- SRAM and DRAM",
      "level": 3,
      "page": 254
    },
    {
      "heading": "- HDD, SSD, USB Drive, SD Card",
      "level": 3,
      "page": 254
    },
    {
      "heading": "How to load your websites at lightning speed?",
      "level": 2,
      "page": 255
    },
    {
      "heading": "Check out these 8 tips to boost frontend performance:",
      "level": 3,
      "page": 255
    },
    {
      "heading": "1 - Compression",
      "level": 3,
      "page": 255
    },
    {
      "heading": "Compress files and minimize data size before transmission to reduce network load.",
      "level": 3,
      "page": 255
    },
    {
      "heading": "2 - Selective Rendering/Windowing",
      "level": 3,
      "page": 255
    },
    {
      "heading": "Display only visible elements to optimize rendering performance. For example, in a dynamic list, only",
      "level": 3,
      "page": 255
    },
    {
      "heading": "render visible items.",
      "level": 3,
      "page": 255
    },
    {
      "heading": "3 - Modular Architecture with Code Splitting",
      "level": 3,
      "page": 255
    },
    {
      "heading": "Split a bigger application bundle into multiple smaller bundles for efficient loading.",
      "level": 3,
      "page": 255
    },
    {
      "heading": "4 - Priority-Based Loading",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Prioritize essential resources and visible (or above-the-fold) content for a better user experience.",
      "level": 3,
      "page": 256
    },
    {
      "heading": "5 - Pre-loading",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Fetch resources in advance before they are requested to improve loading speed.",
      "level": 3,
      "page": 256
    },
    {
      "heading": "6 - Tree Shaking or Dead Code Removal",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Optimize the final JS bundle by removing dead code that will never be used.",
      "level": 3,
      "page": 256
    },
    {
      "heading": "7 - Pre-fetching",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Proactively fetch or cache resources that are likely to be needed soon.",
      "level": 3,
      "page": 256
    },
    {
      "heading": "8 - Dynamic Imports",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Load code modules dynamically based on user actions to optimize the initial loading times.",
      "level": 3,
      "page": 256
    },
    {
      "heading": "Over to you: What other frontend performance tips would you add to this cheat sheet?",
      "level": 3,
      "page": 256
    },
    {
      "heading": "25 Papers That Completely Transformed the Computer",
      "level": 2,
      "page": 257
    },
    {
      "heading": "World.",
      "level": 2,
      "page": 257
    },
    {
      "heading": "1. Dynamo - Amazon’s Highly Available Key Value Store",
      "level": 3,
      "page": 257
    },
    {
      "heading": "2. Google File System: Insights into a highly scalable file system",
      "level": 3,
      "page": 257
    },
    {
      "heading": "3. Scaling Memcached at Facebook: A look at the complexities of Caching",
      "level": 3,
      "page": 257
    },
    {
      "heading": "4. BigTable: The design principles behind a distributed storage system",
      "level": 3,
      "page": 257
    },
    {
      "heading": "5. Borg - Large Scale Cluster Management at Google",
      "level": 3,
      "page": 257
    },
    {
      "heading": "6. Cassandra: A look at the design and architecture of a distributed NoSQL database",
      "level": 3,
      "page": 257
    },
    {
      "heading": "7. Attention Is All You Need: Into a new deep learning architecture known as the transformer",
      "level": 3,
      "page": 257
    },
    {
      "heading": "8. Kafka: Internals of the distributed messaging platform",
      "level": 3,
      "page": 257
    },
    {
      "heading": "9. FoundationDB: A look at how a distributed database",
      "level": 3,
      "page": 257
    },
    {
      "heading": "10. Amazon Aurora: To learn how Amazon provides high-availability and performance",
      "level": 3,
      "page": 257
    },
    {
      "heading": "11. Spanner: Design and architecture of Google’s globally distributed databas",
      "level": 3,
      "page": 257
    },
    {
      "heading": "12. MapReduce: A detailed look at how MapReduce enables parallel processing of massive volumes",
      "level": 3,
      "page": 258
    },
    {
      "heading": "of data",
      "level": 3,
      "page": 258
    },
    {
      "heading": "13. Shard Manager: Understanding the generic shard management framework",
      "level": 3,
      "page": 258
    },
    {
      "heading": "14. Dapper: Insights into Google’s distributed systems tracing infrastructure",
      "level": 3,
      "page": 258
    },
    {
      "heading": "15. Flink: A detailed look at the uniﬁed architecture of stream and batch processing",
      "level": 3,
      "page": 258
    },
    {
      "heading": "16. A Comprehensive Survey on Vector Databases",
      "level": 3,
      "page": 258
    },
    {
      "heading": "17. Zanzibar: A look at the design, implementation and deployment of a global system for managing",
      "level": 3,
      "page": 258
    },
    {
      "heading": "access control lists at Google",
      "level": 3,
      "page": 258
    },
    {
      "heading": "18. Monarch: Architecture of Google’s in-memory time series database",
      "level": 3,
      "page": 258
    },
    {
      "heading": "19. Thrift: Explore the design choices behind Facebook’s code-generation tool",
      "level": 3,
      "page": 258
    },
    {
      "heading": "20. Bitcoin: The ground-breaking introduction to the peer-to-peer electronic cash system",
      "level": 3,
      "page": 258
    },
    {
      "heading": "21. WTF - Who to Follow Service at Twitter: Twitter’s (now X) user recommendation system",
      "level": 3,
      "page": 258
    },
    {
      "heading": "22. MyRocks: LSM-Tree Database Storage Engine",
      "level": 3,
      "page": 258
    },
    {
      "heading": "23. GoTo Considered Harmful",
      "level": 3,
      "page": 258
    },
    {
      "heading": "24. Raft Consensus Algorithm: To learn about the more understandable consensus algorithm",
      "level": 3,
      "page": 258
    },
    {
      "heading": "25. Time Clocks and Ordering of Events: The extremely important paper that explains the concept of",
      "level": 3,
      "page": 258
    },
    {
      "heading": "time and event ordering in a distributed system",
      "level": 3,
      "page": 258
    },
    {
      "heading": "Over to you: I’m sure we missed many important papers. Which ones do you think should be",
      "level": 3,
      "page": 258
    },
    {
      "heading": "included?",
      "level": 3,
      "page": 258
    },
    {
      "heading": "10 Essential Components of a Production Web Application.",
      "level": 2,
      "page": 259
    },
    {
      "heading": "1 - It all starts with CI/CD pipelines that deploy code to the server instances. Tools like Jenkins and",
      "level": 3,
      "page": 259
    },
    {
      "heading": "GitHub help over here.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "2 - The user requests originate from the web browser. After DNS resolution, the requests reach the",
      "level": 3,
      "page": 259
    },
    {
      "heading": "app servers.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "3 - Load balancers and reverse proxies (such as Nginx & HAProxy) distribute user requests evenly",
      "level": 3,
      "page": 259
    },
    {
      "heading": "across the web application servers.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "4 - The requests can also be served by a Content Delivery Network (CDN).",
      "level": 3,
      "page": 259
    },
    {
      "heading": "5 - The web app communicates with backend services via APIs.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "6 - The backend services interact with database servers or distributed caches to provide the data.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "7 - Resource-intensive and long-running tasks are sent to job workers using a job queue.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "8 - The full-text search service supports the search functionality. Tools like Elasticsearch and Apache",
      "level": 3,
      "page": 259
    },
    {
      "heading": "Solr can help here.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "9 - Monitoring tools (such as Sentry, Grafana, and Prometheus) store logs and help analyze data to",
      "level": 3,
      "page": 259
    },
    {
      "heading": "ensure everything works fine.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "10 - In case of issues, alerting services notify developers through platforms like Slack for quick",
      "level": 3,
      "page": 259
    },
    {
      "heading": "resolution.",
      "level": 3,
      "page": 259
    },
    {
      "heading": "Over to you: What other components would you add to the architecture of a production web app?",
      "level": 3,
      "page": 259
    },
    {
      "heading": "Top 8 Standards Every Developer Should Know.",
      "level": 2,
      "page": 260
    },
    {
      "heading": "🔹 TCP/IP",
      "level": 3,
      "page": 260
    },
    {
      "heading": "Developed by the IETF organization, the TCP/IP protocol is the foundation of the Internet and one of",
      "level": 3,
      "page": 260
    },
    {
      "heading": "the best-known networking standards.",
      "level": 3,
      "page": 260
    },
    {
      "heading": "🔹 HTTP",
      "level": 3,
      "page": 260
    },
    {
      "heading": "The IETF has also developed the HTTP protocol, which is essential for all web developers.",
      "level": 3,
      "page": 260
    },
    {
      "heading": "🔹 SQL",
      "level": 3,
      "page": 260
    },
    {
      "heading": "Structured Query Language (SQL) is a domain-specific language used to manage data.",
      "level": 3,
      "page": 260
    },
    {
      "heading": "🔹 OAuth",
      "level": 3,
      "page": 260
    },
    {
      "heading": "OAuth (Open Authorization) is an open standard for access delegation commonly used to grant",
      "level": 3,
      "page": 260
    },
    {
      "heading": "websites or applications limited access to user information without exposing their passwords.",
      "level": 3,
      "page": 260
    },
    {
      "heading": "🔹 HTML/CSS",
      "level": 3,
      "page": 260
    },
    {
      "heading": "With HTML, web pages are rendered uniformly across browsers, which reduces development effort",
      "level": 3,
      "page": 261
    },
    {
      "heading": "spent on compatibility issues.HTML tags.",
      "level": 3,
      "page": 261
    },
    {
      "heading": "CSS standards are often used in conjunction with HTML.",
      "level": 3,
      "page": 261
    },
    {
      "heading": "🔹 ECMAScript",
      "level": 3,
      "page": 261
    },
    {
      "heading": "ECMAScript is a standardized scripting language specification that serves as the foundation for",
      "level": 3,
      "page": 261
    },
    {
      "heading": "several programming languages, the most well-known being JavaScript.",
      "level": 3,
      "page": 261
    },
    {
      "heading": "🔹 ISO Date",
      "level": 3,
      "page": 261
    },
    {
      "heading": "It is common for developers to have problems with inconsistent time formats on a daily basis. ISO",
      "level": 3,
      "page": 261
    },
    {
      "heading": "8601 is a date and time format standard developed by the ISO (International Organization for",
      "level": 3,
      "page": 261
    },
    {
      "heading": "Standardization) to provide a common format for exchanging date and time data across borders,",
      "level": 3,
      "page": 261
    },
    {
      "heading": "cultures, and industries.",
      "level": 3,
      "page": 261
    },
    {
      "heading": "🔹 OpenAPI",
      "level": 3,
      "page": 261
    },
    {
      "heading": "OpenAPI, also known as the OpenAPI Specification (OAS), is a standardized format for describing",
      "level": 3,
      "page": 261
    },
    {
      "heading": "and documenting RESTful APIs.",
      "level": 3,
      "page": 261
    },
    {
      "heading": "Explaining JSON Web Token (JWT) with simple terms.",
      "level": 2,
      "page": 262
    },
    {
      "heading": "Imagine you have a special box called a JWT. Inside this box, there are three parts: a header, a",
      "level": 3,
      "page": 262
    },
    {
      "heading": "payload, and a signature.",
      "level": 3,
      "page": 262
    },
    {
      "heading": "The header is like the label on the outside of the box. It tells us what type of box it is and how it's",
      "level": 3,
      "page": 262
    },
    {
      "heading": "secured. It's usually written in a format called JSON, which is just a way to organize information",
      "level": 3,
      "page": 262
    },
    {
      "heading": "using curly braces { } and colons : .",
      "level": 3,
      "page": 262
    },
    {
      "heading": "The payload is like the actual message or information you want to send. It could be your name, age,",
      "level": 3,
      "page": 262
    },
    {
      "heading": "or any other data you want to share. It's also written in JSON format, so it's easy to understand and",
      "level": 3,
      "page": 262
    },
    {
      "heading": "work with.",
      "level": 3,
      "page": 262
    },
    {
      "heading": "Now, the signature is what makes the JWT secure. It's like a special seal that only the sender knows",
      "level": 3,
      "page": 262
    },
    {
      "heading": "how to create. The signature is created using a secret code, kind of like a password. This signature",
      "level": 3,
      "page": 262
    },
    {
      "heading": "ensures that nobody can tamper with the contents of the JWT without the sender knowing about it.",
      "level": 3,
      "page": 262
    },
    {
      "heading": "When you want to send the JWT to a server, you put the header, payload, and signature inside the",
      "level": 3,
      "page": 262
    },
    {
      "heading": "box. Then you send it over to the server. The server can easily read the header and payload to",
      "level": 3,
      "page": 262
    },
    {
      "heading": "understand who you are and what you want to do.",
      "level": 3,
      "page": 262
    },
    {
      "heading": "Over to you: When should we use JWT for authentication? What are some other authentication",
      "level": 3,
      "page": 262
    },
    {
      "heading": "methods?",
      "level": 3,
      "page": 262
    },
    {
      "heading": "11 steps to go from Junior to Senior Developer.",
      "level": 2,
      "page": 263
    },
    {
      "heading": "1 - Collaboration Tools",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Software development is a social activity. Learn to use collaboration tools like Jira, Confluence,",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Slack, MS Teams, Zoom, etc.",
      "level": 3,
      "page": 263
    },
    {
      "heading": "2 - Programming Languages",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Pick and master one or two programming languages. Choose from options like Java, Python,",
      "level": 3,
      "page": 263
    },
    {
      "heading": "JavaScript, C#, Go, etc.",
      "level": 3,
      "page": 263
    },
    {
      "heading": "3 - API Development",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Learn the ins and outs of API Development approaches such as REST, GraphQL, and gRPC.",
      "level": 3,
      "page": 263
    },
    {
      "heading": "4 - Web Servers and Hosting",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Know about web servers as well as cloud platforms like AWS, Azure, GCP, and Kubernetes",
      "level": 3,
      "page": 263
    },
    {
      "heading": "5 - Authentication and Testing",
      "level": 3,
      "page": 263
    },
    {
      "heading": "Learn how to secure your applications with authentication techniques such as JWTs, OAuth2, etc.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Also, master testing techniques like TDD, E2E Testing, and Performance Testing",
      "level": 3,
      "page": 264
    },
    {
      "heading": "6 - Databases",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Learn to work with relational (Postgres, MySQL, and SQLite) and non-relational databases",
      "level": 3,
      "page": 264
    },
    {
      "heading": "(MongoDB, Cassandra, and Redis).",
      "level": 3,
      "page": 264
    },
    {
      "heading": "7 - CI/CD",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Pick tools like GitHub Actions, Jenkins, or CircleCI to learn about continuous integration and",
      "level": 3,
      "page": 264
    },
    {
      "heading": "continuous delivery.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "8 - Data Structures and Algorithms",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Master the basics of DSA with topics like Big O Notation, Sorting, Trees, and Graphs.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "9 - System Design",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Learn System Design concepts such as Networking, Caching, CDNs, Microservices, Messaging,",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Load Balancing, Replication, Distributed Systems, etc.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "10 - Design patterns",
      "level": 3,
      "page": 264
    },
    {
      "heading": "and facade.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "11 - AI Tools",
      "level": 3,
      "page": 264
    },
    {
      "heading": "To future-proof your career, learn to leverage AI tools like GitHub Copilot, ChatGPT, Langchain, and",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Prompt Engineering.",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Over to you: What else would you add to the roadmap?",
      "level": 3,
      "page": 264
    },
    {
      "heading": "Top 8 must-know Docker concepts",
      "level": 2,
      "page": 265
    },
    {
      "heading": "1 - Dockerfile: It contains the instructions to build a Docker image by specifying the base image,",
      "level": 3,
      "page": 265
    },
    {
      "heading": "dependencies, and run command.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "2 - Docker Image: A lightweight, standalone package that includes everything (code, libraries, and",
      "level": 3,
      "page": 265
    },
    {
      "heading": "dependencies) needed to run your application. Images are built from a Dockerfile and can be",
      "level": 3,
      "page": 265
    },
    {
      "heading": "versioned.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "3 - Docker Container: A running instance of a Docker image. Containers are isolated from each",
      "level": 3,
      "page": 265
    },
    {
      "heading": "other and the host system, providing a secure and reproducible environment for running your apps.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "4 - Docker Registry: A centralized repository for storing and distributing Docker images. For",
      "level": 3,
      "page": 265
    },
    {
      "heading": "example, Docker Hub is the default public registry but you can also set up private registries.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "5 - Docker Volumes: A way to persist data generated by containers. Volumes are outside the",
      "level": 3,
      "page": 265
    },
    {
      "heading": "container’s file system and can be shared between multiple containers.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "6 - Docker Compose: A tool for defining and running multi-container Docker applications, making it",
      "level": 3,
      "page": 265
    },
    {
      "heading": "easy to manage the entire stack.",
      "level": 3,
      "page": 265
    },
    {
      "heading": "7 - Docker Networks: Used to enable communication between containers and the host system.",
      "level": 3,
      "page": 266
    },
    {
      "heading": "Custom networks can isolate containers or enable selective communication.",
      "level": 3,
      "page": 266
    },
    {
      "heading": "8 - Docker CLI: The primary way to interact with Docker, providing commands for building images,",
      "level": 3,
      "page": 266
    },
    {
      "heading": "running containers, managing volumes, and performing other operations.",
      "level": 3,
      "page": 266
    },
    {
      "heading": "Over to you: What other concept should one know about Docker?",
      "level": 3,
      "page": 266
    },
    {
      "heading": "Top 10 Most Popular Open-Source Databases",
      "level": 2,
      "page": 267
    },
    {
      "heading": "This list is based on factors like adoption, industry impact, and the general awareness of the",
      "level": 3,
      "page": 267
    },
    {
      "heading": "database among the developer community.",
      "level": 3,
      "page": 267
    },
    {
      "heading": "1 - MySQL",
      "level": 3,
      "page": 267
    },
    {
      "heading": "2 - PostgreSQL",
      "level": 3,
      "page": 267
    },
    {
      "heading": "3 - MariaDB",
      "level": 3,
      "page": 267
    },
    {
      "heading": "4 - Apache Cassandra",
      "level": 3,
      "page": 267
    },
    {
      "heading": "5 - Neo4j",
      "level": 3,
      "page": 267
    },
    {
      "heading": "6 - SQLite",
      "level": 3,
      "page": 267
    },
    {
      "heading": "7 - CockroachDB",
      "level": 3,
      "page": 267
    },
    {
      "heading": "8 - Redis",
      "level": 3,
      "page": 267
    },
    {
      "heading": "9 - MongoDB",
      "level": 3,
      "page": 267
    },
    {
      "heading": "10 - Couchbase",
      "level": 3,
      "page": 267
    },
    {
      "heading": "What does a typical microservice architecture look like?",
      "level": 2,
      "page": 268
    },
    {
      "heading": "The diagram below shows a typical microservice architecture.",
      "level": 3,
      "page": 268
    },
    {
      "heading": "🔹Load Balancer: This distributes incoming traffic across multiple backend services.",
      "level": 3,
      "page": 268
    },
    {
      "heading": "🔹CDN (Content Delivery Network): CDN is a group of geographically distributed servers that hold",
      "level": 3,
      "page": 268
    },
    {
      "heading": "static content for faster delivery. The clients look for content in CDN first, then progress to backend",
      "level": 3,
      "page": 268
    },
    {
      "heading": "services.",
      "level": 3,
      "page": 268
    },
    {
      "heading": "🔹API Gateway: This handles incoming requests and routes them to the relevant services. It talks to",
      "level": 3,
      "page": 269
    },
    {
      "heading": "the identity provider and service discovery.",
      "level": 3,
      "page": 269
    },
    {
      "heading": "🔹Identity Provider: This handles authentication and authorization for users.",
      "level": 3,
      "page": 269
    },
    {
      "heading": "🔹Service Registry & Discovery: Microservice registration and discovery happen in this component,",
      "level": 3,
      "page": 269
    },
    {
      "heading": "and the API gateway looks for relevant services in this component to talk to.",
      "level": 3,
      "page": 269
    },
    {
      "heading": "🔹Management: This component is responsible for monitoring the services.",
      "level": 3,
      "page": 269
    },
    {
      "heading": "🔹Microservices: Microservices are designed and deployed in different domains. Each domain has",
      "level": 3,
      "page": 269
    },
    {
      "heading": "its database.",
      "level": 3,
      "page": 269
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 269
    },
    {
      "heading": "1). What are the drawbacks of the microservice architecture?",
      "level": 3,
      "page": 269
    },
    {
      "heading": "2). Have you seen a monolithic system be transformed into microservice architecture? How long",
      "level": 3,
      "page": 269
    },
    {
      "heading": "does it take?",
      "level": 3,
      "page": 269
    },
    {
      "heading": "What is SSO (Single Sign-On)?",
      "level": 2,
      "page": 270
    },
    {
      "heading": "Basically, Single Sign-On (SSO) is an authentication scheme. It allows a user to log in to different",
      "level": 3,
      "page": 270
    },
    {
      "heading": "systems using a single ID.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "The diagram below illustrates how SSO works.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Step 1: A user visits Gmail, or any email service. Gmail finds the user is not logged in and so",
      "level": 3,
      "page": 270
    },
    {
      "heading": "redirects them to the SSO authentication server, which also finds the user is not logged in. As a",
      "level": 3,
      "page": 270
    },
    {
      "heading": "result, the user is redirected to the SSO login page, where they enter their login credentials.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Steps 2-3: The SSO authentication server validates the credentials, creates the global session for",
      "level": 3,
      "page": 270
    },
    {
      "heading": "the user, and creates a token.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Steps 4-7: Gmail validates the token in the SSO authentication server. The authentication server",
      "level": 3,
      "page": 270
    },
    {
      "heading": "registers the Gmail system, and returns “valid.” Gmail returns the protected resource to the user.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Step 8: From Gmail, the user navigates to another Google-owned website, for example, YouTube.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Steps 9-10: YouTube finds the user is not logged in, and then requests authentication. The SSO",
      "level": 3,
      "page": 270
    },
    {
      "heading": "authentication server finds the user is already logged in and returns the token.",
      "level": 3,
      "page": 270
    },
    {
      "heading": "Step 11-14: YouTube validates the token in the SSO authentication server. The authentication server",
      "level": 3,
      "page": 271
    },
    {
      "heading": "registers the YouTube system, and returns “valid.” YouTube returns the protected resource to the",
      "level": 3,
      "page": 271
    },
    {
      "heading": "user.",
      "level": 3,
      "page": 271
    },
    {
      "heading": "The process is complete and the user gets back access to their account.",
      "level": 3,
      "page": 271
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 271
    },
    {
      "heading": "Question 1: have you implemented SSO in your projects? What is the most difficult part?",
      "level": 3,
      "page": 271
    },
    {
      "heading": "Question 2: what’s your favorite sign-in method and why?",
      "level": 3,
      "page": 271
    },
    {
      "heading": "What makes HTTP2 faster than HTTP1?",
      "level": 2,
      "page": 272
    },
    {
      "heading": "The key features of HTTP2 play a big role in this. Let’s look at them:",
      "level": 3,
      "page": 272
    },
    {
      "heading": "1 - Binary Framing Layer",
      "level": 3,
      "page": 272
    },
    {
      "heading": "HTTP2 encodes the messages into binary format.",
      "level": 3,
      "page": 272
    },
    {
      "heading": "This allows the messages into smaller units called frames, which are then sent over the TCP",
      "level": 3,
      "page": 272
    },
    {
      "heading": "connection, resulting in more efficient processing.",
      "level": 3,
      "page": 272
    },
    {
      "heading": "2 - Multiplexing",
      "level": 3,
      "page": 272
    },
    {
      "heading": "The Binary Framing allows full request and response multiplexing.",
      "level": 3,
      "page": 272
    },
    {
      "heading": "Clients and servers can interleave frames during transmissions and reassemble them on the other",
      "level": 3,
      "page": 273
    },
    {
      "heading": "side.",
      "level": 3,
      "page": 273
    },
    {
      "heading": "3 - Stream Prioritization",
      "level": 3,
      "page": 273
    },
    {
      "heading": "With stream prioritization, developers can customize the relative weight of requests or streams to",
      "level": 3,
      "page": 273
    },
    {
      "heading": "make the server send more frames for higher-priority requests.",
      "level": 3,
      "page": 273
    },
    {
      "heading": "4 - Server Push",
      "level": 3,
      "page": 273
    },
    {
      "heading": "Since HTTP2 allows multiple concurrent responses to a client’s request, a server can send additional",
      "level": 3,
      "page": 273
    },
    {
      "heading": "resources along with the requested page to the client.",
      "level": 3,
      "page": 273
    },
    {
      "heading": "5 - HPACK Header Compression",
      "level": 3,
      "page": 273
    },
    {
      "heading": "HTTP2 uses a special compression algorithm called HPACK to make the headers smaller for",
      "level": 3,
      "page": 273
    },
    {
      "heading": "multiple requests, thereby saving bandwidth.",
      "level": 3,
      "page": 273
    },
    {
      "heading": "Of course, despite these features, HTTP2 can also be slow depending on the exact technical",
      "level": 3,
      "page": 273
    },
    {
      "heading": "scenario. Therefore, developers need to test and optimize things to maximize the benefits of HTTP2.",
      "level": 3,
      "page": 273
    },
    {
      "heading": "Over to you: Have you used HTTP2 in your application?",
      "level": 3,
      "page": 273
    },
    {
      "heading": "Log Parsing Cheat Sheet",
      "level": 2,
      "page": 274
    },
    {
      "heading": "The diagram below lists the top 6 log parsing commands.",
      "level": 3,
      "page": 274
    },
    {
      "heading": "1. GREP",
      "level": 3,
      "page": 274
    },
    {
      "heading": "GREP searches any given input files, selecting lines that match one or more patterns.",
      "level": 3,
      "page": 274
    },
    {
      "heading": "2. CUT",
      "level": 3,
      "page": 274
    },
    {
      "heading": "CUT cuts out selected portions of each line from each file and writes them to the standard output.",
      "level": 3,
      "page": 274
    },
    {
      "heading": "3. SED",
      "level": 3,
      "page": 274
    },
    {
      "heading": "SED reads the specified files, modifying the input as specified by a list of commands.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "4. AWK",
      "level": 3,
      "page": 275
    },
    {
      "heading": "AWK scans each input file for lines that match any of a set of patterns.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "5. SORT",
      "level": 3,
      "page": 275
    },
    {
      "heading": "SORT sorts text and binary files by lines.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "6. UNIQ",
      "level": 3,
      "page": 275
    },
    {
      "heading": "UNIQ reads the specified input file comparing adjacent lines and writes a copy of each unique input",
      "level": 3,
      "page": 275
    },
    {
      "heading": "line to the output file.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "These commands are often used in combination to quickly find useful information from the log files.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "For example, the below commands list the timestamps (column 2) when there is an exception",
      "level": 3,
      "page": 275
    },
    {
      "heading": "happening for xxService.",
      "level": 3,
      "page": 275
    },
    {
      "heading": "grep “xxService” service.log | grep “Exception” | cut -d” “ -f 2",
      "level": 3,
      "page": 275
    },
    {
      "heading": "Over to you: What other commands do you use when you parse logs?",
      "level": 3,
      "page": 275
    },
    {
      "heading": "4 Ways Netflix Uses Caching to Hold User Attention",
      "level": 2,
      "page": 276
    },
    {
      "heading": "The goal of Netflix is to keep you streaming for as long as possible. But a user’s typical attention",
      "level": 3,
      "page": 276
    },
    {
      "heading": "span is just 90 seconds.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "They use EVCache (a distributed key-value store) to reduce latency so that the users don’t lose",
      "level": 3,
      "page": 276
    },
    {
      "heading": "interest.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "However, EVCache has multiple use cases at Netflix.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "1 - Lookaside Cache",
      "level": 3,
      "page": 276
    },
    {
      "heading": "When the application needs some data, it first tries the EVCache client and if the data is not in the",
      "level": 3,
      "page": 276
    },
    {
      "heading": "cache, it goes to the backend service and the Cassandra database to fetch the data.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "The service also keeps the cache updated for future requests.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "2 - Transient Data Store",
      "level": 3,
      "page": 276
    },
    {
      "heading": "Netflix uses EVCache to keep track of transient data such as playback session information.",
      "level": 3,
      "page": 276
    },
    {
      "heading": "One application service might start the session while the other may update the session followed by a",
      "level": 3,
      "page": 277
    },
    {
      "heading": "session closure at the very end.",
      "level": 3,
      "page": 277
    },
    {
      "heading": "3 - Primary Store",
      "level": 3,
      "page": 277
    },
    {
      "heading": "Netflix runs large-scale pre-compute systems every night to compute a brand-new home page for",
      "level": 3,
      "page": 277
    },
    {
      "heading": "every profile of every user based on watch history and recommendations.",
      "level": 3,
      "page": 277
    },
    {
      "heading": "All of that data is written into the EVCache cluster from where the online services read the data and",
      "level": 3,
      "page": 277
    },
    {
      "heading": "build the homepage.",
      "level": 3,
      "page": 277
    },
    {
      "heading": "4 - High Volume Data",
      "level": 3,
      "page": 277
    },
    {
      "heading": "Netflix has data that has a high volume of access and also needs to be highly available. For",
      "level": 3,
      "page": 277
    },
    {
      "heading": "example, UI strings and translations that are shown on the Netflix home page.",
      "level": 3,
      "page": 277
    },
    {
      "heading": "A separate process asynchronously computes and publishes the UI string to EVCache from where",
      "level": 3,
      "page": 277
    },
    {
      "heading": "the application can read it with low latency and high availability.",
      "level": 3,
      "page": 277
    },
    {
      "heading": "Top 6 Cases to Apply Idempotency.",
      "level": 2,
      "page": 278
    },
    {
      "heading": "Idempotency is essential in various scenarios, particularly where operations might be retried or",
      "level": 3,
      "page": 278
    },
    {
      "heading": "executed multiple times. Here are the top 6 use cases where idempotency is crucial:",
      "level": 3,
      "page": 278
    },
    {
      "heading": "1. RESTful API Requests",
      "level": 3,
      "page": 278
    },
    {
      "heading": "We need to ensure that retrying an API request does not lead to multiple executions of the same",
      "level": 3,
      "page": 278
    },
    {
      "heading": "operation. Implement idempotent methods (like PUT and DELETE) to maintain consistent resource",
      "level": 3,
      "page": 278
    },
    {
      "heading": "states.",
      "level": 3,
      "page": 278
    },
    {
      "heading": "2. Payment Processing",
      "level": 3,
      "page": 278
    },
    {
      "heading": "We need to ensure that customers are not charged multiple times due to retries or network issues.",
      "level": 3,
      "page": 278
    },
    {
      "heading": "Payment gateways often need to retry transactions; idempotency ensures only one charge is made.",
      "level": 3,
      "page": 278
    },
    {
      "heading": "3. Order Management Systems",
      "level": 3,
      "page": 278
    },
    {
      "heading": "We need to ensure that submitting an order multiple times results in only one order being placed. We",
      "level": 3,
      "page": 278
    },
    {
      "heading": "design a safe mechanism to prevent duplicate inventory deductions or updates.",
      "level": 3,
      "page": 278
    },
    {
      "heading": "4. Database Operations",
      "level": 3,
      "page": 278
    },
    {
      "heading": "We need to ensure that reapplying a transaction does not change the database state beyond the",
      "level": 3,
      "page": 279
    },
    {
      "heading": "initial application.",
      "level": 3,
      "page": 279
    },
    {
      "heading": "5. User Account Management",
      "level": 3,
      "page": 279
    },
    {
      "heading": "We need to ensure that retrying a registration request does not create multiple user accounts. Also,",
      "level": 3,
      "page": 279
    },
    {
      "heading": "we need to ensure that multiple password reset requests result in a single reset action.",
      "level": 3,
      "page": 279
    },
    {
      "heading": "6. Distributed Systems and Messaging",
      "level": 3,
      "page": 279
    },
    {
      "heading": "We need to ensure that reprocessing messages from a queue does not result in duplicate",
      "level": 3,
      "page": 279
    },
    {
      "heading": "processing. We Implement handlers that can process the same message multiple times without side",
      "level": 3,
      "page": 279
    },
    {
      "heading": "effects.",
      "level": 3,
      "page": 279
    },
    {
      "heading": "MVC, MVP, MVVM, MVVM-C, and VIPER architecture patterns",
      "level": 2,
      "page": 280
    },
    {
      "heading": "These architecture patterns are among the most commonly used in app development, whether on",
      "level": 3,
      "page": 280
    },
    {
      "heading": "iOS or Android platforms. Developers have introduced them to overcome the limitations of earlier",
      "level": 3,
      "page": 280
    },
    {
      "heading": "patterns. So, how do they differ?",
      "level": 3,
      "page": 280
    },
    {
      "heading": "- MVC, the oldest pattern, dates back almost 50 years",
      "level": 3,
      "page": 280
    },
    {
      "heading": "- Every pattern has a \"view\" (V) responsible for displaying content and receiving user input",
      "level": 3,
      "page": 280
    },
    {
      "heading": "- Most patterns include a \"model\" (M) to manage business data",
      "level": 3,
      "page": 280
    },
    {
      "heading": "- \"Controller,\" \"presenter,\" and \"view-model\" are translators that mediate between the view and the",
      "level": 3,
      "page": 280
    },
    {
      "heading": "model (\"entity\" in the VIPER pattern)",
      "level": 3,
      "page": 280
    },
    {
      "heading": "- These translators can be quite complex to write, so various patterns have been proposed to make",
      "level": 3,
      "page": 280
    },
    {
      "heading": "them more maintainable",
      "level": 3,
      "page": 280
    },
    {
      "heading": "What are the differences among database locks?",
      "level": 2,
      "page": 281
    },
    {
      "heading": "In database management, locks are mechanisms that prevent concurrent access to data to ensure",
      "level": 3,
      "page": 281
    },
    {
      "heading": "data integrity and consistency.",
      "level": 3,
      "page": 281
    },
    {
      "heading": "Here are the common types of locks used in databases:",
      "level": 3,
      "page": 281
    },
    {
      "heading": "1. Shared Lock (S Lock)",
      "level": 3,
      "page": 281
    },
    {
      "heading": "It allows multiple transactions to read a resource simultaneously but not modify it. Other transactions",
      "level": 3,
      "page": 281
    },
    {
      "heading": "can also acquire a shared lock on the same resource.",
      "level": 3,
      "page": 281
    },
    {
      "heading": "2. Exclusive Lock (X Lock)",
      "level": 3,
      "page": 281
    },
    {
      "heading": "It allows a transaction to both read and modify a resource. No other transaction can acquire any type",
      "level": 3,
      "page": 281
    },
    {
      "heading": "of lock on the same resource while an exclusive lock is held.",
      "level": 3,
      "page": 281
    },
    {
      "heading": "3. Update Lock (U Lock)",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It is used to prevent a deadlock scenario when a transaction intends to update a resource.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "4. Schema Lock",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It is used to protect the structure of database objects.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "5. Bulk Update Lock (BU Lock)",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It is used during bulk insert operations to improve performance by reducing the number of locks",
      "level": 3,
      "page": 282
    },
    {
      "heading": "required.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "6. Key-Range Lock",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It is used in indexed data to prevent phantom reads (inserting new rows into a range that a",
      "level": 3,
      "page": 282
    },
    {
      "heading": "transaction has already read).",
      "level": 3,
      "page": 282
    },
    {
      "heading": "7. Row-Level Lock",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It locks a specific row in a table, allowing other rows to be accessed concurrently.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "8. Page-Level Lock",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It locks a specific page (a fixed-size block of data) in the database.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "9. Table-Level Lock",
      "level": 3,
      "page": 282
    },
    {
      "heading": "It locks an entire table. This is simple to implement but can reduce concurrency significantly.",
      "level": 3,
      "page": 282
    },
    {
      "heading": "How do we Perform Pagination in API Design?",
      "level": 2,
      "page": 283
    },
    {
      "heading": "Pagination is crucial in API design to handle large datasets efficiently and improve performance.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "Here are six popular pagination techniques:",
      "level": 3,
      "page": 283
    },
    {
      "heading": "🔹 Offset-based Pagination:",
      "level": 3,
      "page": 283
    },
    {
      "heading": "This technique uses an offset and a limit parameter to define the starting point and the number of",
      "level": 3,
      "page": 283
    },
    {
      "heading": "records to return.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Example: GET /orders?offset=0&limit=3",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Pros: Simple to implement and understand.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Cons: Can become inefficient for large offsets, as it requires scanning and skipping rows.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "🔹 Cursor-based Pagination:",
      "level": 3,
      "page": 283
    },
    {
      "heading": "This technique uses a cursor (a unique identifier) to mark the position in the dataset. Typically, the",
      "level": 3,
      "page": 283
    },
    {
      "heading": "cursor is an encoded string that points to a specific record.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Example: GET /orders?cursor=xxx",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Pros: More efficient for large datasets, as it doesn't require scanning skipped records.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "- Cons: Slightly more complex to implement and understand.",
      "level": 3,
      "page": 283
    },
    {
      "heading": "🔹 Page-based Pagination:",
      "level": 3,
      "page": 284
    },
    {
      "heading": "This technique specifies the page number and the size of each page.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Example: GET /items?page=2&size=3",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Pros: Easy to implement and use.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Cons: Similar performance issues as offset-based pagination for large page numbers.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "🔹 Keyset-based Pagination:",
      "level": 3,
      "page": 284
    },
    {
      "heading": "This technique uses a key to filter the dataset, often the primary key or another indexed column.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Example: GET /items?after_id=102&limit=3",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Pros: Efficient for large datasets and avoids performance issues with large offsets.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Cons: Requires a unique and indexed key, and can be complex to implement.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "🔹 Time-based Pagination:",
      "level": 3,
      "page": 284
    },
    {
      "heading": "This technique uses a timestamp or date to paginate through records.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Example: GET /items?start_time=xxx&end_time=yyy",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Pros: Useful for datasets ordered by time, ensures no records are missed if new ones are added.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Cons: Requires a reliable and consistent timestamp.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "🔹 Hybrid Pagination:",
      "level": 3,
      "page": 284
    },
    {
      "heading": "This technique combines multiple pagination techniques to leverage their strengths.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "Example: Combining cursor and time-based pagination for efficient scrolling through time-ordered",
      "level": 3,
      "page": 284
    },
    {
      "heading": "records.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Example: GET /items?cursor=abc&start_time=xxx&end_time=yyy",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Pros: Can offer the best performance and flexibility for complex datasets.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "- Cons: More complex to implement and requires careful design.",
      "level": 3,
      "page": 284
    },
    {
      "heading": "What happens when you type a URL into your browser?",
      "level": 2,
      "page": 285
    },
    {
      "heading": "The diagram below illustrates the steps.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "1. Bob enters a URL into the browser and hits Enter. In this example, the URL is composed of 4",
      "level": 3,
      "page": 285
    },
    {
      "heading": "parts:",
      "level": 3,
      "page": 285
    },
    {
      "heading": "🔹 scheme - 𝒉𝒕𝒕𝒑://. This tells the browser to send a connection to the server using HTTP.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "🔹 domain - 𝒆𝒙𝒂𝒎𝒑𝒍𝒆.𝒄𝒐𝒎. This is the domain name of the site.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "🔹 path - 𝒑𝒓𝒐𝒅𝒖𝒄𝒕/𝒆𝒍𝒆𝒄𝒕𝒓𝒊𝒄. It is the path on the server to the requested resource: phone.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "🔹 resource - 𝒑𝒉𝒐𝒏𝒆. It is the name of the resource Bob wants to visit.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "2. The browser looks up the IP address for the domain with a domain name system (DNS) lookup.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "To make the lookup process fast, data is cached at different layers: browser cache, OS cache, local",
      "level": 3,
      "page": 285
    },
    {
      "heading": "network cache, and ISP cache.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "2.1 If the IP address cannot be found at any of the caches, the browser goes to DNS servers to do a",
      "level": 3,
      "page": 285
    },
    {
      "heading": "recursive DNS lookup until the IP address is found (this will be covered in another post).",
      "level": 3,
      "page": 285
    },
    {
      "heading": "3. Now that we have the IP address of the server, the browser establishes a TCP connection with",
      "level": 3,
      "page": 285
    },
    {
      "heading": "the server.",
      "level": 3,
      "page": 285
    },
    {
      "heading": "4. The browser sends an HTTP request to the server. The request looks like this:",
      "level": 3,
      "page": 285
    },
    {
      "heading": "𝘎𝘌𝘛 /𝘱𝘩𝘰𝘯𝘦 𝘏𝘛𝘛𝘗/1.1",
      "level": 3,
      "page": 285
    },
    {
      "heading": "𝘏𝘰𝘴𝘵: 𝘦𝘹𝘢𝘮𝘱𝘭𝘦.𝘤𝘰𝘮",
      "level": 3,
      "page": 286
    },
    {
      "heading": "5. The server processes the request and sends back the response. For a successful response (the",
      "level": 3,
      "page": 286
    },
    {
      "heading": "status code is 200). The HTML response might look like this:",
      "level": 3,
      "page": 286
    },
    {
      "heading": "𝘏𝘛𝘛𝘗/1.1 200 𝘖𝘒",
      "level": 3,
      "page": 286
    },
    {
      "heading": "𝘋𝘢𝘵𝘦: 𝘚𝘶𝘯, 30 𝘑𝘢𝘯 2022 00:01:01 𝘎𝘔𝘛",
      "level": 3,
      "page": 286
    },
    {
      "heading": "𝘚𝘦𝘳𝘷𝘦𝘳: 𝘈𝘱𝘢𝘤𝘩𝘦",
      "level": 3,
      "page": 286
    },
    {
      "heading": "𝘊𝘰𝘯𝘵𝘦𝘯𝘵-𝘛𝘺𝘱𝘦: 𝘵𝘦𝘹𝘵/𝘩𝘵𝘮𝘭; 𝘤𝘩𝘢𝘳𝘴𝘦𝘵=𝘶𝘵𝘧-8",
      "level": 3,
      "page": 286
    },
    {
      "heading": "<!𝘋𝘖𝘊𝘛𝘠𝘗𝘌 𝘩𝘵𝘮𝘭>",
      "level": 3,
      "page": 286
    },
    {
      "heading": "<𝘩𝘵𝘮𝘭 𝘭𝘢𝘯𝘨=\"𝘦𝘯\">",
      "level": 3,
      "page": 286
    },
    {
      "heading": "𝘏𝘦𝘭𝘭𝘰 𝘸𝘰𝘳𝘭𝘥",
      "level": 3,
      "page": 286
    },
    {
      "heading": "</𝘩𝘵𝘮𝘭>",
      "level": 3,
      "page": 286
    },
    {
      "heading": "6. The browser renders the HTML content.",
      "level": 3,
      "page": 286
    },
    {
      "heading": "How do you pay from your digital wallet by scanning the QR",
      "level": 2,
      "page": 287
    },
    {
      "heading": "code?",
      "level": 2,
      "page": 287
    },
    {
      "heading": "To understand the process involved, we need to divide the “scan to pay” process into two",
      "level": 3,
      "page": 287
    },
    {
      "heading": "sub-processes:",
      "level": 3,
      "page": 287
    },
    {
      "heading": "1. Merchant generates a QR code and displays it on the screen",
      "level": 3,
      "page": 287
    },
    {
      "heading": "2. Consumer scans the QR code and pays",
      "level": 3,
      "page": 287
    },
    {
      "heading": "Here are the steps for generating the QR code:",
      "level": 3,
      "page": 287
    },
    {
      "heading": "1. When you want to pay for your shopping, the cashier tallies up all the goods and calculates the",
      "level": 3,
      "page": 287
    },
    {
      "heading": "total amount due, for example, $123.45. The checkout has an order ID of SN129803. The cashier",
      "level": 3,
      "page": 287
    },
    {
      "heading": "clicks the “checkout” button.",
      "level": 3,
      "page": 287
    },
    {
      "heading": "2. The cashier’s computer sends the order ID and the amount to PSP.",
      "level": 3,
      "page": 287
    },
    {
      "heading": "3. The PSP saves this information to the database and generates a QR code URL.",
      "level": 3,
      "page": 287
    },
    {
      "heading": "4. PSP’s Payment Gateway service reads the QR code URL.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "5. The payment gateway returns the QR code URL to the merchant’s computer.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "6. The merchant’s computer sends the QR code URL (or image) to the checkout counter.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "7. The checkout counter displays the QR code.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "These 7 steps complete in less than a second. Now it’s the consumer’s turn to pay from their digital",
      "level": 3,
      "page": 288
    },
    {
      "heading": "wallet by scanning the QR code:",
      "level": 3,
      "page": 288
    },
    {
      "heading": "1. The consumer opens their digital wallet app to scan the QR code.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "2. After confirming the amount is correct, the client clicks the “pay” button.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "3. The digital wallet App notifies the PSP that the consumer has paid the given QR code.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "4. The PSP payment gateway marks this QR code as paid and returns a success message to the",
      "level": 3,
      "page": 288
    },
    {
      "heading": "consumer’s digital wallet App.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "5. The PSP payment gateway notifies the merchant that the consumer has paid the given QR code.",
      "level": 3,
      "page": 288
    },
    {
      "heading": "What do Amazon, Netflix, and Uber have in common?",
      "level": 2,
      "page": 289
    },
    {
      "heading": "They are extremely good at scaling their system whenever needed.",
      "level": 3,
      "page": 289
    },
    {
      "heading": "Here are 8 must-know strategies to scale your system.",
      "level": 3,
      "page": 289
    },
    {
      "heading": "1 - Stateless Services",
      "level": 3,
      "page": 289
    },
    {
      "heading": "Design stateless services because they don’t rely on server-specific data and are easier to scale.",
      "level": 3,
      "page": 289
    },
    {
      "heading": "2 - Horizontal Scaling",
      "level": 3,
      "page": 289
    },
    {
      "heading": "Add more servers so that the workload can be shared.",
      "level": 3,
      "page": 289
    },
    {
      "heading": "3 - Load Balancing",
      "level": 3,
      "page": 289
    },
    {
      "heading": "Use a load balancer to distribute incoming requests evenly across multiple servers.",
      "level": 3,
      "page": 289
    },
    {
      "heading": "4 - Auto Scaling",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Implement auto-scaling policies to adjust resources based on real-time traffic.",
      "level": 3,
      "page": 290
    },
    {
      "heading": "5 - Caching",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Use caching to reduce the load on the database and handle repetitive requests at scale.",
      "level": 3,
      "page": 290
    },
    {
      "heading": "6 - Database Replication",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Replicate data across multiple nodes to scale the read operations while improving redundancy.",
      "level": 3,
      "page": 290
    },
    {
      "heading": "7 - Database Sharding",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Distribute data across multiple instances to scale the writes as well as reads.",
      "level": 3,
      "page": 290
    },
    {
      "heading": "8 - Async Processing",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Move time-consuming and resource-intensive tasks to background workers using async processing",
      "level": 3,
      "page": 290
    },
    {
      "heading": "to scale out new requests.",
      "level": 3,
      "page": 290
    },
    {
      "heading": "Over to you: Which other strategies have you used?",
      "level": 3,
      "page": 290
    },
    {
      "heading": "100X Postgres Scaling at Figma.",
      "level": 2,
      "page": 291
    },
    {
      "heading": "With 3 million monthly users, Figma’s user base has increased by 200% since 2018.",
      "level": 3,
      "page": 291
    },
    {
      "heading": "As a result, its Postgres database witnessed a whopping 100X growth.",
      "level": 3,
      "page": 291
    },
    {
      "heading": "1 - Vertical Scaling and Replication",
      "level": 3,
      "page": 291
    },
    {
      "heading": "Figma used a single, large Amazon RDS database.",
      "level": 3,
      "page": 291
    },
    {
      "heading": "As a first step, they upgraded to the largest instance available (from r5.12xlarge to r5.24xlarge).",
      "level": 3,
      "page": 291
    },
    {
      "heading": "They also created multiple read replicas to scale read traffic and added PgBouncer as a connection",
      "level": 3,
      "page": 291
    },
    {
      "heading": "pooler to limit the impact of a growing number of connections.",
      "level": 3,
      "page": 291
    },
    {
      "heading": "2 - Vertical Partitioning",
      "level": 3,
      "page": 291
    },
    {
      "heading": "The next step was vertical partitioning.",
      "level": 3,
      "page": 291
    },
    {
      "heading": "They migrated high-traffic tables like “Figma Files” and “Organizations” into their separate",
      "level": 3,
      "page": 292
    },
    {
      "heading": "databases.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "Multiple PgBouncer instances were used to manage the connections for these separate databases.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "3 - Horizontal Partitioning",
      "level": 3,
      "page": 292
    },
    {
      "heading": "Over time, some tables crossed several terabytes of data and billions of rows.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "Postgres Vacuum became an issue and max IOPS exceeded the limits of Amazon RDS at the time.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "To solve this, Figma implemented horizontal partitioning by splitting large tables across multiple",
      "level": 3,
      "page": 292
    },
    {
      "heading": "physical databases.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "A new DBProxy service was built to handle routing and query execution.",
      "level": 3,
      "page": 292
    },
    {
      "heading": "Over to you - Would you have done something differently?",
      "level": 3,
      "page": 292
    },
    {
      "heading": "How to store passwords safely in the database and how to",
      "level": 2,
      "page": 293
    },
    {
      "heading": "validate a password?",
      "level": 2,
      "page": 293
    },
    {
      "heading": "𝐓𝐡𝐢𝐧𝐠𝐬 𝐍𝐎𝐓 𝐭𝐨 𝐝𝐨",
      "level": 3,
      "page": 293
    },
    {
      "heading": "🔹 Storing passwords in plain text is not a good idea because anyone with internal access can see",
      "level": 3,
      "page": 293
    },
    {
      "heading": "them.",
      "level": 3,
      "page": 293
    },
    {
      "heading": "🔹 Storing password hashes directly is not sufficient because it is pruned to precomputation attacks,",
      "level": 3,
      "page": 293
    },
    {
      "heading": "such as rainbow tables.",
      "level": 3,
      "page": 293
    },
    {
      "heading": "🔹 To mitigate precomputation attacks, we salt the passwords.",
      "level": 3,
      "page": 293
    },
    {
      "heading": "𝐖𝐡𝐚𝐭 𝐢𝐬 𝐬𝐚𝐥𝐭?",
      "level": 3,
      "page": 293
    },
    {
      "heading": "According to OWASP guidelines, “a salt is a unique, randomly generated string that is added to each",
      "level": 3,
      "page": 293
    },
    {
      "heading": "password as part of the hashing process”.",
      "level": 3,
      "page": 293
    },
    {
      "heading": "𝐇𝐨𝐰 𝐭𝐨 𝐬𝐭𝐨𝐫𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝 𝐚𝐧𝐝 𝐬𝐚𝐥𝐭?",
      "level": 3,
      "page": 293
    },
    {
      "heading": "1️⃣ A salt is not meant to be secret and it can be stored in plain text in the database. It is used to",
      "level": 3,
      "page": 293
    },
    {
      "heading": "ensure the hash result is unique to each password.",
      "level": 3,
      "page": 293
    },
    {
      "heading": "2️⃣ The password can be stored in the database using the following format: 𝘩𝘢𝘴𝘩( 𝘱𝘢𝘴𝘴𝘸𝘰𝘳𝘥 + 𝘴𝘢𝘭𝘵).",
      "level": 3,
      "page": 293
    },
    {
      "heading": "𝐇𝐨𝐰 𝐭𝐨 𝐯𝐚𝐥𝐢𝐝𝐚𝐭𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝?",
      "level": 3,
      "page": 293
    },
    {
      "heading": "To validate a password, it can go through the following process:",
      "level": 3,
      "page": 294
    },
    {
      "heading": "1️⃣ A client enters the password.",
      "level": 3,
      "page": 294
    },
    {
      "heading": "2️⃣ The system fetches the corresponding salt from the database.",
      "level": 3,
      "page": 294
    },
    {
      "heading": "3️⃣ The system appends the salt to the password and hashes it. Let’s call the hashed value H1.",
      "level": 3,
      "page": 294
    },
    {
      "heading": "4️⃣ The system compares H1 and H2, where H2 is the hash stored in the database. If they are the",
      "level": 3,
      "page": 294
    },
    {
      "heading": "same, the password is valid.",
      "level": 3,
      "page": 294
    },
    {
      "heading": "Over to you: what other mechanisms can we use to ensure password safety?",
      "level": 3,
      "page": 294
    },
    {
      "heading": "Cybersecurity 101 in one picture.",
      "level": 2,
      "page": 295
    },
    {
      "heading": "1. Introduction to Cybersecurity",
      "level": 3,
      "page": 295
    },
    {
      "heading": "2. The CIA Triad",
      "level": 3,
      "page": 295
    },
    {
      "heading": "3. Common Cybersecurity Threats",
      "level": 3,
      "page": 295
    },
    {
      "heading": "4. Basic Defense Mechanisms",
      "level": 3,
      "page": 295
    },
    {
      "heading": "To combat these threats, several basic defense mechanisms are employed:",
      "level": 3,
      "page": 295
    },
    {
      "heading": "- Firewalls: Network security devices that monitor and control incoming and outgoing network traffic.",
      "level": 3,
      "page": 295
    },
    {
      "heading": "- Antivirus Software: Programs designed to detect and remove malware.",
      "level": 3,
      "page": 295
    },
    {
      "heading": "- Encryption: The process of converting information into a code to prevent unauthorized access.",
      "level": 3,
      "page": 295
    },
    {
      "heading": "5. Cybersecurity Frameworks",
      "level": 3,
      "page": 295
    },
    {
      "heading": "What do version numbers mean?",
      "level": 2,
      "page": 296
    },
    {
      "heading": "Semantic Versioning (SemVer) is a versioning scheme for software that aims to convey meaning",
      "level": 3,
      "page": 296
    },
    {
      "heading": "about the underlying changes in a release.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "🔹 SemVer uses a three-part version number: MAJOR.MINOR.PATCH.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "- MAJOR version: Incremented when there are incompatible API changes.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "- MINOR version: Incremented when functionality is added in a backward-compatible manner.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "- PATCH version: Incremented when backward-compatible bug fixes are made.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "🔹 Example Workflow",
      "level": 3,
      "page": 296
    },
    {
      "heading": "1 - Initial Development Phase",
      "level": 3,
      "page": 296
    },
    {
      "heading": "Start with version 0.1.0.",
      "level": 3,
      "page": 296
    },
    {
      "heading": "2 - First Stable Release",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Reach a stable release: 1.0.0.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "3 - Subsequent Changes",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Patch Release: A bug fix is needed for 1.0.0. Update to 1.0.1.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Minor Release: A new, backward-compatible feature is added to 1.0.3. Update to 1.1.0.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Major Release: A significant change that is not backward-compatible is introduced in 1.2.2. Update",
      "level": 3,
      "page": 297
    },
    {
      "heading": "to 2.0.0.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "4 - Special Versions and Pre-releases",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Pre-release Versions: 1.0.0-alpha, 1.0.0-beta, 1.0.0-rc.1.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "Build Metadata: 1.0.0+20130313144700.",
      "level": 3,
      "page": 297
    },
    {
      "heading": "What is k8s (Kubernetes)?",
      "level": 2,
      "page": 298
    },
    {
      "heading": "k8s is a container orchestration system. It is used for container deployment and management. Its",
      "level": 3,
      "page": 298
    },
    {
      "heading": "design is greatly impacted by Google’s internal system Borg.",
      "level": 3,
      "page": 298
    },
    {
      "heading": "A k8s cluster consists of a set of worker machines, called nodes, that run containerized applications.",
      "level": 3,
      "page": 298
    },
    {
      "heading": "Every cluster has at least one worker node.",
      "level": 3,
      "page": 298
    },
    {
      "heading": "The worker node(s) host the Pods that are the components of the application workload. The control",
      "level": 3,
      "page": 298
    },
    {
      "heading": "plane manages the worker nodes and the Pods in the cluster. In production environments, the",
      "level": 3,
      "page": 298
    },
    {
      "heading": "control plane usually runs across multiple computers and a cluster usually runs multiple nodes,",
      "level": 3,
      "page": 298
    },
    {
      "heading": "providing fault-tolerance and high availability.",
      "level": 3,
      "page": 298
    },
    {
      "heading": "🔹 Control Plane Components",
      "level": 3,
      "page": 299
    },
    {
      "heading": "1. API Server",
      "level": 3,
      "page": 299
    },
    {
      "heading": "The API server talks to all the components in the k8s cluster. All the operations on pods are",
      "level": 3,
      "page": 299
    },
    {
      "heading": "executed by talking to the API server.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "2. Scheduler",
      "level": 3,
      "page": 299
    },
    {
      "heading": "The scheduler watches the workloads on pods and assigns loads on newly created pods.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "3. Controller Manager",
      "level": 3,
      "page": 299
    },
    {
      "heading": "The controller manager runs the controllers, including Node Controller, Job Controller, EndpointSlice",
      "level": 3,
      "page": 299
    },
    {
      "heading": "Controller, and ServiceAccount Controller.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "4. etcd",
      "level": 3,
      "page": 299
    },
    {
      "heading": "etcd is a key-value store used as Kubernetes' backing store for all cluster data.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "🔹 Nodes",
      "level": 3,
      "page": 299
    },
    {
      "heading": "1. Pods",
      "level": 3,
      "page": 299
    },
    {
      "heading": "A pod is a group of containers and is the smallest unit that k8s administers. Pods have a single IP",
      "level": 3,
      "page": 299
    },
    {
      "heading": "address applied to every container within the pod.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "2. Kubelet",
      "level": 3,
      "page": 299
    },
    {
      "heading": "An agent that runs on each node in the cluster. It ensures containers are running in a Pod.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "3. Kube Proxy",
      "level": 3,
      "page": 299
    },
    {
      "heading": "kube-proxy is a network proxy that runs on each node in your cluster. It routes traffic coming into a",
      "level": 3,
      "page": 299
    },
    {
      "heading": "node from the service. It forwards requests for work to the correct containers.",
      "level": 3,
      "page": 299
    },
    {
      "heading": "HTTP Status Code You Should Know",
      "level": 2,
      "page": 300
    },
    {
      "heading": "The response codes for HTTP are divided into five categories:",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Informational (100-199)",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Success (200-299)",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Redirection (300-399)",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Client Error (400-499)",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Server Error (500-599)",
      "level": 3,
      "page": 300
    },
    {
      "heading": "These codes are defined in RFC 9110. To save you from reading the entire document (which is",
      "level": 3,
      "page": 300
    },
    {
      "heading": "about 200 pages), here is a summary of the most common ones:",
      "level": 3,
      "page": 300
    },
    {
      "heading": "Over to you: HTTP status code 401 is for Unauthorized. Can you explain the difference between",
      "level": 3,
      "page": 300
    },
    {
      "heading": "authentication and authorization, and which one does code 401 check for?",
      "level": 3,
      "page": 300
    },
    {
      "heading": "18 Most-used Linux Commands You Should Know",
      "level": 2,
      "page": 301
    },
    {
      "heading": "Linux commands are instructions for interacting with the operating system. They help manage files,",
      "level": 3,
      "page": 301
    },
    {
      "heading": "directories, system processes, and many other aspects of the system. You need to become familiar",
      "level": 3,
      "page": 301
    },
    {
      "heading": "with these commands in order to navigate and maintain Linux-based systems efficiently and",
      "level": 3,
      "page": 301
    },
    {
      "heading": "effectively. The following are some popular Linux commands:",
      "level": 3,
      "page": 301
    },
    {
      "heading": "🔹ls - List files and directories",
      "level": 3,
      "page": 301
    },
    {
      "heading": "🔹cd - Change the current directory",
      "level": 3,
      "page": 301
    },
    {
      "heading": "🔹mkdir - Create a new directory",
      "level": 3,
      "page": 301
    },
    {
      "heading": "🔹rm - Remove files or directories",
      "level": 3,
      "page": 301
    },
    {
      "heading": "🔹cp - Copy files or directories",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹mv - Move or rename files or directories",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹chmod - Change file or directory permissions",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹grep - Search for a pattern in files",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹find - Search for files and directories",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹tar - manipulate tarball archive files",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹vi - Edit files using text editors",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹cat - display the content of files",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹top - Display processes and resource usage",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹ps - Display processes information",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹kill - Terminate a process by sending a signal",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹du - Estimate file space usage",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹ifconfig - Configure network interfaces",
      "level": 3,
      "page": 302
    },
    {
      "heading": "🔹ping - Test network connectivity between hosts",
      "level": 3,
      "page": 302
    },
    {
      "heading": "Over to you: What is your favorite Linux command?",
      "level": 3,
      "page": 302
    },
    {
      "heading": "Iterative, Agile, Waterfall, Spiral Model, RAD Model... What",
      "level": 2,
      "page": 303
    },
    {
      "heading": "are the differences?",
      "level": 2,
      "page": 303
    },
    {
      "heading": "The Software Development Life Cycle (SDLC) is a framework that outlines the process of developing",
      "level": 3,
      "page": 303
    },
    {
      "heading": "software in a systematic way. Here are some of the most common ones:",
      "level": 3,
      "page": 303
    },
    {
      "heading": "1 - Waterfall Model:",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- A linear and sequential approach.",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- Divides the project into distinct phases: Requirements, Design, Implementation, Verification, and",
      "level": 3,
      "page": 303
    },
    {
      "heading": "Maintenance.",
      "level": 3,
      "page": 303
    },
    {
      "heading": "2 - Agile Model:",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- Development is done in small, manageable increments called sprints.",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- Common Agile methodologies include Scrum, Kanban, and Extreme Programming (XP).",
      "level": 3,
      "page": 303
    },
    {
      "heading": "3 - V-Model (Validation and Verification Model):",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- An extension of the Waterfall model.",
      "level": 3,
      "page": 303
    },
    {
      "heading": "- Each development phase is associated with a testing phase, forming a V shape.",
      "level": 3,
      "page": 303
    },
    {
      "heading": "4 - Iterative Model:",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Focuses on building a system incrementally.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Each iteration builds upon the previous one until the final product is achieved.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "5 - Spiral Model:",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Combines iterative development with systematic aspects of the Waterfall model.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Each cycle involves planning, risk analysis, engineering, and evaluation.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "6 - Big Bang Model:",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- All coding is done with minimal planning, and the entire software is integrated and tested at once.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "7 - RAD Model (Rapid Application Development):",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Emphasizes rapid prototyping and quick feedback.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- Focuses on quick development and delivery.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "8 - Incremental Model:",
      "level": 3,
      "page": 304
    },
    {
      "heading": "- The product is designed, implemented, and tested incrementally until the product is finished.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "Each of these models has its advantages and disadvantages, and the choice of which to use often",
      "level": 3,
      "page": 304
    },
    {
      "heading": "depends on the specific requirements and constraints of the project at hand.",
      "level": 3,
      "page": 304
    },
    {
      "heading": "Design Patterns Cheat Sheet - Part 1 and Part 2",
      "level": 2,
      "page": 305
    },
    {
      "heading": "The cheat sheet briefly explains each pattern and how to use it.",
      "level": 3,
      "page": 305
    },
    {
      "heading": "What's included?",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- Factory",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- Builder",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- Prototype",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- Singleton",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- Chain of Responsibility",
      "level": 3,
      "page": 305
    },
    {
      "heading": "- And many more!",
      "level": 3,
      "page": 305
    },
    {
      "heading": "9 Essential Components of a Production Microservice",
      "level": 2,
      "page": 306
    },
    {
      "heading": "Application",
      "level": 2,
      "page": 306
    },
    {
      "heading": "1 - API Gateway",
      "level": 3,
      "page": 306
    },
    {
      "heading": "The gateway provides a unified entry point for client applications. It handles routing, filtering, and",
      "level": 3,
      "page": 306
    },
    {
      "heading": "load balancing.",
      "level": 3,
      "page": 306
    },
    {
      "heading": "2 - Service Registry",
      "level": 3,
      "page": 306
    },
    {
      "heading": "The service registry contains the details of all the services. The gateway discovers the service using",
      "level": 3,
      "page": 306
    },
    {
      "heading": "the registry. For example, Consul, Eureka, Zookeeper, etc.",
      "level": 3,
      "page": 306
    },
    {
      "heading": "3 - Service Layer",
      "level": 3,
      "page": 306
    },
    {
      "heading": "Each microservices serves a specific business function and can run on multiple instances. These",
      "level": 3,
      "page": 306
    },
    {
      "heading": "services can be built using frameworks like Spring Boot, NestJS, etc.",
      "level": 3,
      "page": 306
    },
    {
      "heading": "4 - Authorization Server",
      "level": 3,
      "page": 306
    },
    {
      "heading": "Used to secure the microservices and manage identity and access control. Tools like Keycloak,",
      "level": 3,
      "page": 306
    },
    {
      "heading": "Azure AD, and Okta can help over here.",
      "level": 3,
      "page": 306
    },
    {
      "heading": "5 - Data Storage",
      "level": 3,
      "page": 306
    },
    {
      "heading": "Databases like PostgreSQL and MySQL can store application data generated by the services.",
      "level": 3,
      "page": 307
    },
    {
      "heading": "6 - Distributed Caching",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Caching is a great approach for boosting the application performance. Options include caching",
      "level": 3,
      "page": 307
    },
    {
      "heading": "solutions like Redis, Couchbase, Memcached, etc.",
      "level": 3,
      "page": 307
    },
    {
      "heading": "7 - Async Microservices Communication",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Use platforms such as Kafka and RabbitMQ to support async communication between",
      "level": 3,
      "page": 307
    },
    {
      "heading": "microservices.",
      "level": 3,
      "page": 307
    },
    {
      "heading": "8 - Metrics Visualization",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Microservices can be configured to publish metrics to Prometheus and tools like Grafana can help",
      "level": 3,
      "page": 307
    },
    {
      "heading": "visualize the metrics.",
      "level": 3,
      "page": 307
    },
    {
      "heading": "9 - Log Aggregation and Visualization",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Logs generated by the services are aggregated using Logstash, stored in Elasticsearch, and",
      "level": 3,
      "page": 307
    },
    {
      "heading": "visualized with Kibana.",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Over to you: What else would you add to your production microservice architecture?",
      "level": 3,
      "page": 307
    },
    {
      "heading": "Which latency numbers you should know?",
      "level": 2,
      "page": 308
    },
    {
      "heading": "Please note those are not precise numbers. They are based on some online benchmarks (Jeff",
      "level": 3,
      "page": 308
    },
    {
      "heading": "Dean’s latency numbers + some other sources).",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹L1 and L2 caches: 1 ns, 10 ns",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: They are usually built onto the microprocessor chip. Unless you work with hardware directly,",
      "level": 3,
      "page": 308
    },
    {
      "heading": "you probably don’t need to worry about them.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹RAM access: 100 ns",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: It takes around 100 ns to read data from memory. Redis is an in-memory data store, so it takes",
      "level": 3,
      "page": 308
    },
    {
      "heading": "about 100 ns to read data from Redis.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹Send 1K bytes over 1 Gbps network: 10 us",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: It takes around 10 us to send 1KB of data from Memcached through the network.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹Read from SSD: 100 us",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: RocksDB is a disk-based K/V store, so the read latency is around 100 us on SSD.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹Database insert operation: 1 ms.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: Postgresql commit might take 1ms. The database needs to store the data, create the index,",
      "level": 3,
      "page": 308
    },
    {
      "heading": "and flush logs. All these actions take time.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹Send packet CA->Netherlands->CA: 100 ms",
      "level": 3,
      "page": 308
    },
    {
      "heading": "E.g.: If we have a long-distance Zoom call, the latency might be around 100 ms.",
      "level": 3,
      "page": 308
    },
    {
      "heading": "🔹Retry/refresh internal: 1-10s",
      "level": 3,
      "page": 309
    },
    {
      "heading": "E.g: In a monitoring system, the refresh interval is usually set to 5~10 seconds.",
      "level": 3,
      "page": 309
    },
    {
      "heading": "Notes",
      "level": 3,
      "page": 309
    },
    {
      "heading": "-----",
      "level": 3,
      "page": 309
    },
    {
      "heading": "1 ns = 10^-9 seconds",
      "level": 3,
      "page": 309
    },
    {
      "heading": "1 us = 10^-6 seconds = 1,000 ns",
      "level": 3,
      "page": 309
    },
    {
      "heading": "1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns",
      "level": 3,
      "page": 309
    },
    {
      "heading": "API Gateway 101",
      "level": 2,
      "page": 310
    },
    {
      "heading": "and security policies, passing requests to the back-end service, and then returning the appropriate",
      "level": 3,
      "page": 310
    },
    {
      "heading": "result to the client.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "It is essentially a middleman between the client and the server, managing and optimizing API traffic.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "Key Functions of an API Gateway",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 Request Routing: Directs incoming API requests to the appropriate backend service.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 Load Balancing: Distributes requests across multiple servers to ensure no single server is",
      "level": 3,
      "page": 310
    },
    {
      "heading": "overwhelmed.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 Security: Implements security measures like authentication, authorization, and data encryption.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 Rate Limiting and Throttling: Controls the number of requests a client can make within a certain",
      "level": 3,
      "page": 310
    },
    {
      "heading": "period.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 API Composition: Combines multiple backend API requests into a single frontend request to",
      "level": 3,
      "page": 310
    },
    {
      "heading": "optimize performance.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "🔹 Caching: Stores responses temporarily to reduce the need for repeated processing.",
      "level": 3,
      "page": 310
    },
    {
      "heading": "A Roadmap for Full-Stack Development.",
      "level": 2,
      "page": 311
    },
    {
      "heading": "A full-stack developer needs to be proficient in a wide range of technologies and tools across",
      "level": 3,
      "page": 311
    },
    {
      "heading": "different areas of software development. Here’s a comprehensive look at the technical stacks",
      "level": 3,
      "page": 311
    },
    {
      "heading": "required for a full-stack developer.",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 1. Frontend Development",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 2. Backend Development",
      "level": 3,
      "page": 311
    },
    {
      "heading": "Backend development involves managing the server-side logic, databases, and integration of",
      "level": 3,
      "page": 311
    },
    {
      "heading": "various services.",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 3. Database Development",
      "level": 3,
      "page": 311
    },
    {
      "heading": "Database development involves managing data storage, retrieval, and manipulation.",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 4. Mobile Development",
      "level": 3,
      "page": 311
    },
    {
      "heading": "Mobile development involves creating applications for mobile devices.",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 5. Cloud Computing",
      "level": 3,
      "page": 311
    },
    {
      "heading": "Cloud computing involves deploying and managing applications on cloud platforms.",
      "level": 3,
      "page": 311
    },
    {
      "heading": "🔹 6. UI/UX Design",
      "level": 3,
      "page": 312
    },
    {
      "heading": "UI/UX design involves designing the user interface and experience of applications.",
      "level": 3,
      "page": 312
    },
    {
      "heading": "🔹 7. Infrastructure and DevOps",
      "level": 3,
      "page": 312
    },
    {
      "heading": "Infrastructure and DevOps involve managing the infrastructure, deployment, and continuous",
      "level": 3,
      "page": 312
    },
    {
      "heading": "integration/continuous delivery (CI/CD) of applications.",
      "level": 3,
      "page": 312
    },
    {
      "heading": "OAuth 2.0 Flows",
      "level": 2,
      "page": 313
    },
    {
      "heading": "Authorization Code Flow: The most common OAuth flow. After user authentication, the client",
      "level": 3,
      "page": 313
    },
    {
      "heading": "receives an authorization code and exchanges it for an access token and refresh token.",
      "level": 3,
      "page": 313
    },
    {
      "heading": "Client Credentials Flow: Designed for single-page applications. The access token is returned directly",
      "level": 3,
      "page": 313
    },
    {
      "heading": "to the client without an intermediate authorization code.",
      "level": 3,
      "page": 313
    },
    {
      "heading": "Implicit Code Flow: Designed for single-page applications. The access token is returned directly to",
      "level": 3,
      "page": 313
    },
    {
      "heading": "the client without an intermediate authorization code.",
      "level": 3,
      "page": 313
    },
    {
      "heading": "Resource Owner Password Grant Flow: Allows users to provide their username and password",
      "level": 3,
      "page": 313
    },
    {
      "heading": "directly to the client, which then exchanges them for an access token.",
      "level": 3,
      "page": 313
    },
    {
      "heading": "Over to you - So which one do you think is something that you should use next in your application?",
      "level": 3,
      "page": 313
    },
    {
      "heading": "10 Key Data Structures We Use Every Day",
      "level": 2,
      "page": 314
    },
    {
      "heading": "- list: keep your Twitter feeds",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- stack: support undo/redo of the word editor",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- queue: keep printer jobs, or send user actions in-game",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- hash table: cashing systems",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- Array: math operations",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- heap: task scheduling",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- tree: keep the HTML document, or for AI decision",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- suffix tree: for searching string in a document",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- graph: for tracking friendship, or path finding",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- r-tree: for finding the nearest neighbor",
      "level": 3,
      "page": 314
    },
    {
      "heading": "- vertex buffer: for sending data to GPU for rendering",
      "level": 3,
      "page": 314
    },
    {
      "heading": "Over to you: Which additional data structures have we overlooked?",
      "level": 3,
      "page": 315
    },
    {
      "heading": "Top 10 k8s Design Patterns",
      "level": 2,
      "page": 316
    },
    {
      "heading": "🔹 Foundational Patterns",
      "level": 3,
      "page": 316
    },
    {
      "heading": "These patterns are the fundamental principles for applications to be automated on k8s, regardless of",
      "level": 3,
      "page": 316
    },
    {
      "heading": "the application's nature.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "1. Health Probe Pattern",
      "level": 3,
      "page": 316
    },
    {
      "heading": "This pattern requires that every container must implement observable APIs for the platform to",
      "level": 3,
      "page": 316
    },
    {
      "heading": "manage the application.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "2. Predictable Demands Pattern",
      "level": 3,
      "page": 316
    },
    {
      "heading": "This pattern requires that we should declare application requirements and runtime dependencies.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "Every container should declare its resource profile.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "3. Automated Placement Pattern",
      "level": 3,
      "page": 316
    },
    {
      "heading": "This pattern describes the principles of Kubernetes’ scheduling algorithm.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "🔹 Structural Patterns",
      "level": 3,
      "page": 316
    },
    {
      "heading": "These patterns focus on structuring and organizing containers in a Pod.",
      "level": 3,
      "page": 316
    },
    {
      "heading": "4. Init Container Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern has a separate life cycle for initialization-releated tasks.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "5. Sidecar Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern extends a container’s functionalities without changing it.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "🔹 Behavioral Patterns",
      "level": 3,
      "page": 317
    },
    {
      "heading": "These patterns describe the life cycle management of a Pod. Depending on the type of the",
      "level": 3,
      "page": 317
    },
    {
      "heading": "workload, it can run as a service or a batch job.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "6. Batch Job Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern is used to manage isolated atomic units of work.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "7. Stateful Service Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern creates distributed stateful applications.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "8. Service Discovery Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern describes how clients discover the services.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "🔹 Higher-Level Patterns",
      "level": 3,
      "page": 317
    },
    {
      "heading": "These patterns focus on higher-level application management.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "9. Controller Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern monitors the current state and reconciles with the declared target state.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "10. Operator Pattern",
      "level": 3,
      "page": 317
    },
    {
      "heading": "This pattern defines operational knowledge in an algorithmic and automated form.",
      "level": 3,
      "page": 317
    },
    {
      "heading": "Reference: developers.redhat. com/blog/2020/05/11/top-10-must-know-kubernetes-design-patterns",
      "level": 3,
      "page": 317
    },
    {
      "heading": "What is a Load Balancer?",
      "level": 2,
      "page": 318
    },
    {
      "heading": "across multiple servers.",
      "level": 3,
      "page": 318
    },
    {
      "heading": "🔹 What Does a Load Balancer Do?",
      "level": 3,
      "page": 318
    },
    {
      "heading": "1. Distributes Traffic",
      "level": 3,
      "page": 318
    },
    {
      "heading": "2. Ensures Availability and Reliability",
      "level": 3,
      "page": 318
    },
    {
      "heading": "3. Improves Performance",
      "level": 3,
      "page": 318
    },
    {
      "heading": "4. Scales Applications",
      "level": 3,
      "page": 318
    },
    {
      "heading": "🔹 Types of Load Balancers",
      "level": 3,
      "page": 318
    },
    {
      "heading": "1. Hardware Load Balancers: These are physical devices designed to distribute traffic across",
      "level": 3,
      "page": 318
    },
    {
      "heading": "servers.",
      "level": 3,
      "page": 318
    },
    {
      "heading": "2. Software Load Balancers: These are applications that can be installed on standard hardware or",
      "level": 3,
      "page": 318
    },
    {
      "heading": "virtual machines.",
      "level": 3,
      "page": 318
    },
    {
      "heading": "3. Cloud-based Load Balancers: Provided by cloud service providers, these load balancers are",
      "level": 3,
      "page": 319
    },
    {
      "heading": "integrated into the cloud infrastructure. Examples include AWS Elastic Load Balancer, Google Cloud",
      "level": 3,
      "page": 319
    },
    {
      "heading": "Load Balancing, and Azure Load Balancer.",
      "level": 3,
      "page": 319
    },
    {
      "heading": "4. Layer 4 Load Balancers (Transport Layer): Operate at the transport layer (OSI Layer 4) and make",
      "level": 3,
      "page": 319
    },
    {
      "heading": "forwarding decisions based on IP address and TCP/UDP ports.",
      "level": 3,
      "page": 319
    },
    {
      "heading": "5. Layer 7 Load Balancers (Application Layer): Operate at the application layer (OSI Layer 7) .",
      "level": 3,
      "page": 319
    },
    {
      "heading": "6. Global Server Load Balancing (GSLB): Distributes traffic across multiple geographical locations to",
      "level": 3,
      "page": 319
    },
    {
      "heading": "improve redundancy and performance on a global scale.",
      "level": 3,
      "page": 319
    },
    {
      "heading": "8 Common System Design Problems and Solutions",
      "level": 2,
      "page": 320
    },
    {
      "heading": "Do you know those 8 common problems in large-scale production systems and their solutions?",
      "level": 3,
      "page": 320
    },
    {
      "heading": "Time to test your skills!",
      "level": 3,
      "page": 320
    },
    {
      "heading": "1 - Read-Heavy System",
      "level": 3,
      "page": 320
    },
    {
      "heading": "Use caching to make the reads faster.",
      "level": 3,
      "page": 320
    },
    {
      "heading": "2 - High-Write Traffic",
      "level": 3,
      "page": 320
    },
    {
      "heading": "Use async workers to process the writes",
      "level": 3,
      "page": 320
    },
    {
      "heading": "Use databases powered by LSM-Trees",
      "level": 3,
      "page": 320
    },
    {
      "heading": "3 - Single Point of Failure",
      "level": 3,
      "page": 320
    },
    {
      "heading": "Implement redundancy and failover mechanisms for critical components like databases.",
      "level": 3,
      "page": 320
    },
    {
      "heading": "4 - High Availability",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use load balancing to ensure that requests go to healthy server instances.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use database replication to improve durability and availability.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "5 - High Latency",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use a content delivery network to reduce latency",
      "level": 3,
      "page": 321
    },
    {
      "heading": "6 - Handling Large Files",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use block storage and object storage to handle large files and complex data.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "7 - Monitoring and Alerting",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use a centralized logging system using something like the ELK stack.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "8 - Slower Database Queries",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use proper indexes to optimize queries.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Use sharding to scale the database horizontally.",
      "level": 3,
      "page": 321
    },
    {
      "heading": "Over to you: What other common problems and solutions have you seen?",
      "level": 3,
      "page": 321
    },
    {
      "heading": "How does SSH work?",
      "level": 2,
      "page": 322
    },
    {
      "heading": "SSH (Secure Shell) is a network protocol used to securely connect to remote machines over an",
      "level": 3,
      "page": 322
    },
    {
      "heading": "unsecured network. It encrypts the connection and provides various mechanisms for authentication",
      "level": 3,
      "page": 322
    },
    {
      "heading": "and data transfer.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "SSH has two versions: SSH-1 and SSH-2. SSH-2 was standardized by the IETF.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "It has three main layers: Transport Layer, Authentication Layer, and Connection Layer.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "1. Transport Layer",
      "level": 3,
      "page": 322
    },
    {
      "heading": "The Transport Layer provides encryption, integrity, and data protection to ensure secure",
      "level": 3,
      "page": 322
    },
    {
      "heading": "communication between the client and server.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "2. Authentication Layer",
      "level": 3,
      "page": 322
    },
    {
      "heading": "The Authentication Layer verifies the identity of the client to ensure that only authorized users can",
      "level": 3,
      "page": 322
    },
    {
      "heading": "access the server.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "3. Connection Layer",
      "level": 3,
      "page": 322
    },
    {
      "heading": "The Connection Layer multiplexes the encrypted and authenticated communication into multiple",
      "level": 3,
      "page": 322
    },
    {
      "heading": "logical channels.",
      "level": 3,
      "page": 322
    },
    {
      "heading": "How to load your websites at lightning speed?",
      "level": 2,
      "page": 323
    },
    {
      "heading": "Check out these 8 tips to boost frontend performance:",
      "level": 3,
      "page": 323
    },
    {
      "heading": "1 - Compression",
      "level": 3,
      "page": 323
    },
    {
      "heading": "Compress files and minimize data size before transmission to reduce network load.",
      "level": 3,
      "page": 323
    },
    {
      "heading": "2 - Selective Rendering/Windowing",
      "level": 3,
      "page": 323
    },
    {
      "heading": "Display only visible elements to optimize rendering performance. For example, in a dynamic list, only",
      "level": 3,
      "page": 323
    },
    {
      "heading": "render visible items.",
      "level": 3,
      "page": 323
    },
    {
      "heading": "3 - Modular Architecture with Code Splitting",
      "level": 3,
      "page": 323
    },
    {
      "heading": "Split a bigger application bundle into multiple smaller bundles for efficient loading.",
      "level": 3,
      "page": 323
    },
    {
      "heading": "4 - Priority-Based Loading",
      "level": 3,
      "page": 323
    },
    {
      "heading": "Prioritize essential resources and visible (or above-the-fold) content for a better user experience.",
      "level": 3,
      "page": 323
    },
    {
      "heading": "5 - Pre-loading",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Fetch resources in advance before they are requested to improve loading speed.",
      "level": 3,
      "page": 324
    },
    {
      "heading": "6 - Tree Shaking or Dead Code Removal",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Optimize the final JS bundle by removing dead code that will never be used.",
      "level": 3,
      "page": 324
    },
    {
      "heading": "7 - Pre-fetching",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Proactively fetch or cache resources that are likely to be needed soon.",
      "level": 3,
      "page": 324
    },
    {
      "heading": "8 - Dynamic Imports",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Load code modules dynamically based on user actions to optimize the initial loading times.",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Over to you: What other frontend performance tips would you add to this cheat sheet?",
      "level": 3,
      "page": 324
    },
    {
      "heading": "Why is Nginx so popular?",
      "level": 2,
      "page": 325
    },
    {
      "heading": "Nginx is a high-performance web server and reverse proxy.",
      "level": 3,
      "page": 325
    },
    {
      "heading": "It follows a master-worker process model that contributes to its stability, scalability, and efficient",
      "level": 3,
      "page": 325
    },
    {
      "heading": "resource utilization.",
      "level": 3,
      "page": 325
    },
    {
      "heading": "The master process is responsible for reading the configuration and managing worker processes.",
      "level": 3,
      "page": 325
    },
    {
      "heading": "Worker processes handle incoming connections using an event-driven non-blocking I/O model.",
      "level": 3,
      "page": 325
    },
    {
      "heading": "Due to its architecture, Nginx excels in supporting multiple features such as:",
      "level": 3,
      "page": 325
    },
    {
      "heading": "1 - High-Performance Web Server",
      "level": 3,
      "page": 325
    },
    {
      "heading": "2 - Reverse Proxy and Load Balancing",
      "level": 3,
      "page": 325
    },
    {
      "heading": "3 - Content Cache",
      "level": 3,
      "page": 325
    },
    {
      "heading": "4 - SSL Termination",
      "level": 3,
      "page": 325
    },
    {
      "heading": "Over to you: Do you know any other features supported by Nginx?",
      "level": 3,
      "page": 326
    },
    {
      "heading": "How Discord Stores Trillions of Messages",
      "level": 2,
      "page": 326
    },
    {
      "heading": ".The diagram below shows the evolution of message storage at Discord:",
      "level": 3,
      "page": 326
    },
    {
      "heading": "MongoDB ➡️ Cassandra ➡️ ScyllaDB",
      "level": 3,
      "page": 326
    },
    {
      "heading": "In 2015, the first version of Discord was built on top of a single MongoDB replica. Around Nov 2015,",
      "level": 3,
      "page": 326
    },
    {
      "heading": "MongoDB stored 100 million messages and the RAM couldn’t hold the data and index any longer.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "The latency became unpredictable. Message storage needs to be moved to another database.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "Cassandra was chosen.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "In 2017, Discord had 12 Cassandra nodes and stored billions of messages.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "At the beginning of 2022, it had 177 nodes with trillions of messages. At this point, latency was",
      "level": 3,
      "page": 326
    },
    {
      "heading": "unpredictable, and maintenance operations became too expensive to run.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "There are several reasons for the issue:",
      "level": 3,
      "page": 326
    },
    {
      "heading": "- Cassandra uses the LSM tree for the internal data structure. The reads are more expensive than",
      "level": 3,
      "page": 326
    },
    {
      "heading": "the writes. There can be many concurrent reads on a server with hundreds of users, resulting in",
      "level": 3,
      "page": 326
    },
    {
      "heading": "hotspots.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "- Maintaining clusters, such as compacting SSTables, impacts performance.",
      "level": 3,
      "page": 326
    },
    {
      "heading": "- Garbage collection pauses would cause significant latency spikes",
      "level": 3,
      "page": 327
    },
    {
      "heading": "ScyllaDB is Cassandra compatible database written in C++. Discord redesigned its architecture to",
      "level": 3,
      "page": 327
    },
    {
      "heading": "have a monolithic API, a data service written in Rust, and ScyllaDB-based storage.",
      "level": 3,
      "page": 327
    },
    {
      "heading": "The p99 read latency in ScyllaDB is 15ms compared to 40-125ms in Cassandra. The p99 write",
      "level": 3,
      "page": 327
    },
    {
      "heading": "latency is 5ms compared to 5-70ms in Cassandra.",
      "level": 3,
      "page": 327
    },
    {
      "heading": "Over to you: What kind of NoSQL database have you used? How do you like it?",
      "level": 3,
      "page": 327
    },
    {
      "heading": "How does Garbage Collection work?",
      "level": 2,
      "page": 328
    },
    {
      "heading": "Garbage collection is an automatic memory management feature used in programming languages to",
      "level": 3,
      "page": 328
    },
    {
      "heading": "reclaim memory no longer used by the program.",
      "level": 3,
      "page": 328
    },
    {
      "heading": "🔹 Java",
      "level": 3,
      "page": 328
    },
    {
      "heading": "Java provides several garbage collectors, each suited for different use cases:",
      "level": 3,
      "page": 328
    },
    {
      "heading": "1. Serial Garbage Collector: Best for single-threaded environments or small applications.",
      "level": 3,
      "page": 328
    },
    {
      "heading": "2. Parallel Garbage Collector: Also known as the \"Throughput Collector.\"",
      "level": 3,
      "page": 328
    },
    {
      "heading": "3. CMS (Concurrent Mark-Sweep) Garbage Collector: Low-latency collector aiming to minimize",
      "level": 3,
      "page": 328
    },
    {
      "heading": "pause times.",
      "level": 3,
      "page": 328
    },
    {
      "heading": "4. G1 (Garbage-First) Garbage Collector: Aims to balance throughput and latency.",
      "level": 3,
      "page": 328
    },
    {
      "heading": "5. Z Garbage Collector (ZGC): A low-latency garbage collector designed for applications that require",
      "level": 3,
      "page": 328
    },
    {
      "heading": "large heap sizes and minimal pause times.",
      "level": 3,
      "page": 328
    },
    {
      "heading": "🔹 Python",
      "level": 3,
      "page": 329
    },
    {
      "heading": "Python's garbage collection is based on reference counting and a cyclic garbage collector:",
      "level": 3,
      "page": 329
    },
    {
      "heading": "1. Reference Counting: Each object has a reference count; when it reaches zero, the memory is",
      "level": 3,
      "page": 329
    },
    {
      "heading": "freed.",
      "level": 3,
      "page": 329
    },
    {
      "heading": "2. Cyclic Garbage Collector: Handles circular references that can't be resolved by reference",
      "level": 3,
      "page": 329
    },
    {
      "heading": "counting.",
      "level": 3,
      "page": 329
    },
    {
      "heading": "🔹 GoLang",
      "level": 3,
      "page": 329
    },
    {
      "heading": "Concurrent Mark-and-Sweep Garbage Collector: Go's garbage collector operates concurrently with",
      "level": 3,
      "page": 329
    },
    {
      "heading": "the application, minimizing stop-the-world pauses.",
      "level": 3,
      "page": 329
    },
    {
      "heading": "A Cheat Sheet for Designing Fault-Tolerant Systems.",
      "level": 2,
      "page": 330
    },
    {
      "heading": "Designing fault-tolerant systems is crucial for ensuring high availability and reliability in various",
      "level": 3,
      "page": 330
    },
    {
      "heading": "applications. Here are six top principles of designing fault-tolerant systems:",
      "level": 3,
      "page": 330
    },
    {
      "heading": "1. Replication",
      "level": 3,
      "page": 330
    },
    {
      "heading": "Replication involves creating multiple copies of data or services across different nodes or locations.",
      "level": 3,
      "page": 330
    },
    {
      "heading": "2. Redundancy",
      "level": 3,
      "page": 330
    },
    {
      "heading": "Redundancy refers to having additional components or systems that can take over in case of a",
      "level": 3,
      "page": 330
    },
    {
      "heading": "failure.",
      "level": 3,
      "page": 330
    },
    {
      "heading": "3. Load Balancing",
      "level": 3,
      "page": 330
    },
    {
      "heading": "Load balancing distributes incoming network traffic across multiple servers to ensure no single",
      "level": 3,
      "page": 330
    },
    {
      "heading": "server becomes a point of failure.",
      "level": 3,
      "page": 330
    },
    {
      "heading": "4. Failover Mechanisms",
      "level": 3,
      "page": 330
    },
    {
      "heading": "Failover mechanisms automatically switch to a standby system or component when the primary one",
      "level": 3,
      "page": 331
    },
    {
      "heading": "fails.",
      "level": 3,
      "page": 331
    },
    {
      "heading": "5. Graceful Degradation",
      "level": 3,
      "page": 331
    },
    {
      "heading": "Graceful degradation ensures that a system continues to operate at reduced functionality rather than",
      "level": 3,
      "page": 331
    },
    {
      "heading": "completely failing when some components fail.",
      "level": 3,
      "page": 331
    },
    {
      "heading": "6. Monitoring and Alerting",
      "level": 3,
      "page": 331
    },
    {
      "heading": "Continuously monitor the system's health and performance, and set up alerts for any anomalies or",
      "level": 3,
      "page": 331
    },
    {
      "heading": "failures.",
      "level": 3,
      "page": 331
    },
    {
      "heading": "If you don’t know trade-offs, you DON'T KNOW system",
      "level": 2,
      "page": 332
    },
    {
      "heading": "design.",
      "level": 2,
      "page": 332
    },
    {
      "heading": "10 System Design Tradeoffs You Cannot Ignore",
      "level": 3,
      "page": 332
    },
    {
      "heading": "1 - Vertical vs Horizontal Scaling",
      "level": 3,
      "page": 332
    },
    {
      "heading": "Vertical scaling is adding more resources (CPU, RAM) to an existing server.",
      "level": 3,
      "page": 332
    },
    {
      "heading": "Horizontal scaling means adding more servers to the pool.",
      "level": 3,
      "page": 332
    },
    {
      "heading": "2 - SQL vs NoSQL",
      "level": 3,
      "page": 332
    },
    {
      "heading": "SQL databases organize data into tables of rows and columns.",
      "level": 3,
      "page": 332
    },
    {
      "heading": "NoSQL is ideal for applications that need a flexible schema.",
      "level": 3,
      "page": 332
    },
    {
      "heading": "3 - Batch vs Stream Processing",
      "level": 3,
      "page": 332
    },
    {
      "heading": "Batch processing involves collecting data and processing it all at once. For example, daily billing",
      "level": 3,
      "page": 333
    },
    {
      "heading": "processes.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "4 - Normalization vs Denormalization",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Normalization splits data into related tables to ensure that each piece of information is stored only",
      "level": 3,
      "page": 333
    },
    {
      "heading": "once.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Denormalization combines data into fewer tables for better query performance.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "5 - Consistency vs Availability",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Consistency is the assurance of getting the most recent data every single time.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Availability is about ensuring that the system is always up and running, even if some parts are",
      "level": 3,
      "page": 333
    },
    {
      "heading": "having problems.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "6 - Strong vs Eventual Consistency",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Strong consistency is when data updates are immediately reflected.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Eventual consistency is when data updates are delayed before being available across nodes.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "7 - REST vs GraphQL",
      "level": 3,
      "page": 333
    },
    {
      "heading": "With REST endpoints, you gather data by accessing multiple endpoints.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "With GraphQL, you get more efficient data fetching with specific queries but the design cost is",
      "level": 3,
      "page": 333
    },
    {
      "heading": "higher.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "8 - Stateful vs Stateless",
      "level": 3,
      "page": 333
    },
    {
      "heading": "A stateful system remembers past interactions.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "A stateless system does not keep track of past interactions.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "9 - Read-Through vs Write-Through Cache",
      "level": 3,
      "page": 333
    },
    {
      "heading": "A write-through cache simultaneously writes data updates to the cache and storage.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "10 - Sync vs Async Processing",
      "level": 3,
      "page": 333
    },
    {
      "heading": "In synchronous processing, tasks are performed one after another.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "In asynchronous processing, tasks can run in the background. New tasks can be started without",
      "level": 3,
      "page": 333
    },
    {
      "heading": "waiting for a new task.",
      "level": 3,
      "page": 333
    },
    {
      "heading": "Over to you: Which other tradeoffs have you encountered?",
      "level": 3,
      "page": 334
    },
    {
      "heading": "8 Tips for Efficient API Design.",
      "level": 2,
      "page": 334
    },
    {
      "heading": "🔹 Domain Model Driven",
      "level": 3,
      "page": 334
    },
    {
      "heading": "When designing the path structure of a RESTful API, we can refer to the domain model.",
      "level": 3,
      "page": 334
    },
    {
      "heading": "🔹 Choose Proper HTTP Methods",
      "level": 3,
      "page": 334
    },
    {
      "heading": "Defining a few basic HTTP Methods can simplify the API design. For example, PATCH can often be",
      "level": 3,
      "page": 334
    },
    {
      "heading": "a problem for teams.",
      "level": 3,
      "page": 334
    },
    {
      "heading": "🔹 Implement Idempotence Properly",
      "level": 3,
      "page": 334
    },
    {
      "heading": "Designing for idempotence in advance can improve the robustness of an API. GET method is",
      "level": 3,
      "page": 334
    },
    {
      "heading": "idempotent, but POST needs to be designed properly to be idempotent.",
      "level": 3,
      "page": 334
    },
    {
      "heading": "🔹 Choose Proper HTTP Status Codes",
      "level": 3,
      "page": 335
    },
    {
      "heading": "Define a limited number of HTTP status codes to use to simplify application development.",
      "level": 3,
      "page": 335
    },
    {
      "heading": "🔹 Versioning",
      "level": 3,
      "page": 335
    },
    {
      "heading": "Designing the version number for the API in advance can simplify upgrade work.",
      "level": 3,
      "page": 335
    },
    {
      "heading": "🔹 Semantic Paths",
      "level": 3,
      "page": 335
    },
    {
      "heading": "Using semantic paths makes APIs easier to understand, so that users can find the correct APIs in",
      "level": 3,
      "page": 335
    },
    {
      "heading": "the documentation.",
      "level": 3,
      "page": 335
    },
    {
      "heading": "🔹 Batch Processing",
      "level": 3,
      "page": 335
    },
    {
      "heading": "Use batch/bulk as a keyword and place it at the end of the path.",
      "level": 3,
      "page": 335
    },
    {
      "heading": "🔹 Query Language",
      "level": 3,
      "page": 335
    },
    {
      "heading": "Designing a set of query rules makes the API more flexible. For example, pagination, sorting,",
      "level": 3,
      "page": 335
    },
    {
      "heading": "filtering etc.",
      "level": 3,
      "page": 335
    },
    {
      "heading": "The Ultimate Kafka 101 You Cannot Miss",
      "level": 2,
      "page": 336
    },
    {
      "heading": "Kafka is super-popular but can be overwhelming in the beginning.",
      "level": 3,
      "page": 336
    },
    {
      "heading": "Here are 8 simple steps that can help you understand the fundamentals of Kafka.",
      "level": 3,
      "page": 336
    },
    {
      "heading": "1 - What is Kafka?",
      "level": 3,
      "page": 336
    },
    {
      "heading": "Kafka is a distributed event store and a streaming platform. It began as an internal project at",
      "level": 3,
      "page": 336
    },
    {
      "heading": "LinkedIn and now powers some of the largest data pipelines in the world in orgs like Netflix, Uber,",
      "level": 3,
      "page": 336
    },
    {
      "heading": "etc.",
      "level": 3,
      "page": 336
    },
    {
      "heading": "2 - Kafka Messages",
      "level": 3,
      "page": 336
    },
    {
      "heading": "Message is the basic unit of data in Kafka. It’s like a record in a table consisting of headers, key, and",
      "level": 3,
      "page": 336
    },
    {
      "heading": "value.",
      "level": 3,
      "page": 336
    },
    {
      "heading": "3 - Kafka Topics and Partitions",
      "level": 3,
      "page": 336
    },
    {
      "heading": "Every message goes to a particular Topic. Think of the topic as a folder on your computer. Topics",
      "level": 3,
      "page": 336
    },
    {
      "heading": "also have multiple partitions.",
      "level": 3,
      "page": 336
    },
    {
      "heading": "4 - Advantages of Kafka",
      "level": 3,
      "page": 336
    },
    {
      "heading": "Kafka can handle multiple producers and consumers, while providing disk-based data retention and",
      "level": 3,
      "page": 337
    },
    {
      "heading": "high scalability.",
      "level": 3,
      "page": 337
    },
    {
      "heading": "5 - Kafka Producer",
      "level": 3,
      "page": 337
    },
    {
      "heading": "Producers in Kafka create new messages, batch them, and send them to a Kafka topic. They also",
      "level": 3,
      "page": 337
    },
    {
      "heading": "take care of balancing messages across different partitions.",
      "level": 3,
      "page": 337
    },
    {
      "heading": "6 - Kafka Consumer",
      "level": 3,
      "page": 337
    },
    {
      "heading": "Kafka consumers work together as a consumer group to read messages from the broker.",
      "level": 3,
      "page": 337
    },
    {
      "heading": "7 - Kafka Cluster",
      "level": 3,
      "page": 337
    },
    {
      "heading": "A Kafka cluster consists of several brokers where each partition is replicated across multiple brokers",
      "level": 3,
      "page": 337
    },
    {
      "heading": "to ensure high availability and redundancy.",
      "level": 3,
      "page": 337
    },
    {
      "heading": "8 - Use Cases of Kafka",
      "level": 3,
      "page": 337
    },
    {
      "heading": "Over to you: What else would you add to get a better understanding of Kafka?",
      "level": 3,
      "page": 337
    },
    {
      "heading": "A Cheatsheet for UML Class Diagrams",
      "level": 2,
      "page": 338
    },
    {
      "heading": "UML is a standard way to visualize the design of your system and class diagrams are used across",
      "level": 3,
      "page": 338
    },
    {
      "heading": "the industry.",
      "level": 3,
      "page": 338
    },
    {
      "heading": "They consist of:",
      "level": 3,
      "page": 338
    },
    {
      "heading": "1 - Class",
      "level": 3,
      "page": 338
    },
    {
      "heading": "Acts as the blueprint that defines the properties and behavior of an object.",
      "level": 3,
      "page": 338
    },
    {
      "heading": "2 - Attributes",
      "level": 3,
      "page": 338
    },
    {
      "heading": "Attributes in a UML class diagram represent the data fields of the class.",
      "level": 3,
      "page": 338
    },
    {
      "heading": "3 - Methods",
      "level": 3,
      "page": 338
    },
    {
      "heading": "Methods in a UML class diagram represent the behavior that a class can perform.",
      "level": 3,
      "page": 338
    },
    {
      "heading": "4 - Interfaces",
      "level": 3,
      "page": 338
    },
    {
      "heading": "Defines a contract for classes that implement it. Includes a set of methods that the implementing",
      "level": 3,
      "page": 339
    },
    {
      "heading": "classes must provide.",
      "level": 3,
      "page": 339
    },
    {
      "heading": "5 - Enumeration",
      "level": 3,
      "page": 339
    },
    {
      "heading": "6 - Relationships",
      "level": 3,
      "page": 339
    },
    {
      "heading": "Determines how one class is related to another. Some common relationships are as follows:",
      "level": 3,
      "page": 339
    },
    {
      "heading": "- Association",
      "level": 3,
      "page": 339
    },
    {
      "heading": "- Aggregation",
      "level": 3,
      "page": 339
    },
    {
      "heading": "- Composition",
      "level": 3,
      "page": 339
    },
    {
      "heading": "- Inheritance",
      "level": 3,
      "page": 339
    },
    {
      "heading": "- Implementation",
      "level": 3,
      "page": 339
    },
    {
      "heading": "Over to you: What other building blocks have you seen in UML class diagrams?",
      "level": 3,
      "page": 339
    },
    {
      "heading": "20 Popular Open Source Projects Started or Supported By",
      "level": 2,
      "page": 340
    },
    {
      "heading": "Big Companies",
      "level": 2,
      "page": 340
    },
    {
      "heading": "1 - Google",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- Kubernetes",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- TensorFlow",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- Go",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- Angular",
      "level": 3,
      "page": 340
    },
    {
      "heading": "2 - Meta",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- React",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- PyTorch",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- GraphQL",
      "level": 3,
      "page": 340
    },
    {
      "heading": "- Cassandra",
      "level": 3,
      "page": 340
    },
    {
      "heading": "3 - Microsoft",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- VSCode",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- TypeScript",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Playwright",
      "level": 3,
      "page": 341
    },
    {
      "heading": "4 - Netflix",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Chaos Monkey",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Hystrix",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Zuul",
      "level": 3,
      "page": 341
    },
    {
      "heading": "5 - LinkedIn",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Kafka",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Samza",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Pinot",
      "level": 3,
      "page": 341
    },
    {
      "heading": "6 - RedHat",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Ansible",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- OpenShift",
      "level": 3,
      "page": 341
    },
    {
      "heading": "- Ceph Storage",
      "level": 3,
      "page": 341
    },
    {
      "heading": "Over to you: Which other project would you add to the list?",
      "level": 3,
      "page": 341
    },
    {
      "heading": "A Crash Course on Database Sharding",
      "level": 2,
      "page": 342
    },
    {
      "heading": "1 What is Sharding?",
      "level": 3,
      "page": 342
    },
    {
      "heading": "Sharding is an architectural pattern that addresses the challenges of managing and querying large",
      "level": 3,
      "page": 342
    },
    {
      "heading": "datasets in databases. It involves splitting a large database into smaller, more manageable parts",
      "level": 3,
      "page": 342
    },
    {
      "heading": "called shards.",
      "level": 3,
      "page": 342
    },
    {
      "heading": "The benefits of sharding are scalability, improved performance, and better availability.",
      "level": 3,
      "page": 342
    },
    {
      "heading": "2 Types of Sharding",
      "level": 3,
      "page": 342
    },
    {
      "heading": "Three main sharding strategies are as follows:",
      "level": 3,
      "page": 342
    },
    {
      "heading": "- Range-based Sharding: Split database rows based on a range of values.",
      "level": 3,
      "page": 342
    },
    {
      "heading": "- Key/Hash-based Sharding: Assign a particular key to a shard using a hash function",
      "level": 3,
      "page": 342
    },
    {
      "heading": "- Directory-based Sharding: Relies on a lookup table to determine the distribution of records across",
      "level": 3,
      "page": 342
    },
    {
      "heading": "shards.",
      "level": 3,
      "page": 342
    },
    {
      "heading": "3 Selecting the Shard Key",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Choosing an appropriate shard key is crucial for an effective sharding strategy. Designers should",
      "level": 3,
      "page": 343
    },
    {
      "heading": "consider several factors such as:",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Cardinality: Number of possible values that a shard key can have. It’s better to have a shard key",
      "level": 3,
      "page": 343
    },
    {
      "heading": "with high cardinality.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Frequency: Represents how often a particular shard key value appears. Higher frequency can",
      "level": 3,
      "page": 343
    },
    {
      "heading": "result in hotspots.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Monotonic Change: Refers to the shard key value increasing or decreasing over time. Monotonic",
      "level": 3,
      "page": 343
    },
    {
      "heading": "increases or decreases can result in unbalanced shards.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "4 Request Routing",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- With sharding, the most critical consideration is determining which query should go to which shard.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "There are three main approaches:",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Shard-aware Node: The client can contact any node and the node will serve/redirect the request to",
      "level": 3,
      "page": 343
    },
    {
      "heading": "the correct shard.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Routing Tier: Client requests go to a dedicated routing tier that determines the node responsible for",
      "level": 3,
      "page": 343
    },
    {
      "heading": "handling the request.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "- Shard-aware Client: Clients are aware of the shard distribution across the nodes.",
      "level": 3,
      "page": 343
    },
    {
      "heading": "Is PostgreSQL eating the database world?",
      "level": 2,
      "page": 344
    },
    {
      "heading": "It seems that no matter what the use case, PostgreSQL supports it. When in doubt, you can simply",
      "level": 3,
      "page": 344
    },
    {
      "heading": "use PostgreSQL.",
      "level": 3,
      "page": 344
    },
    {
      "heading": "1 - TimeSeries",
      "level": 3,
      "page": 344
    },
    {
      "heading": "PostgreSQL embraces Timescale, a powerful time-series database extension for efficient handling of",
      "level": 3,
      "page": 344
    },
    {
      "heading": "time-stamped data.",
      "level": 3,
      "page": 344
    },
    {
      "heading": "2 - Machine Learning",
      "level": 3,
      "page": 344
    },
    {
      "heading": "With pgVector and PostgresML, Postgres can support machine learning capabilities and vector",
      "level": 3,
      "page": 344
    },
    {
      "heading": "similarity searches.",
      "level": 3,
      "page": 344
    },
    {
      "heading": "3 - OLAP",
      "level": 3,
      "page": 344
    },
    {
      "heading": "Postgres can support OLAP with tools such as Hydra, Citus, and pg_analytics.",
      "level": 3,
      "page": 344
    },
    {
      "heading": "4 - Derived",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Even derived databases such as DuckDB, FerretDB, CockroachDB, AlloyDB, YugaByte DB,",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Supabase, etc provide PostgreSQL.",
      "level": 3,
      "page": 345
    },
    {
      "heading": "5 - GeoSpatial",
      "level": 3,
      "page": 345
    },
    {
      "heading": "PostGIS extends PostgreSQL with geospatial capabilities, enabling you to easily store, query, and",
      "level": 3,
      "page": 345
    },
    {
      "heading": "analyze geographic data.",
      "level": 3,
      "page": 345
    },
    {
      "heading": "6 - Search",
      "level": 3,
      "page": 345
    },
    {
      "heading": "and data parsing capabilities.",
      "level": 3,
      "page": 345
    },
    {
      "heading": "7 - Federated",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Postgres seamlessly integrates with various data sources such as MongoDB, MySQL, Redis,",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Oracle, ParquetDB, SQLite, etc, enabling federated querying and data access.",
      "level": 3,
      "page": 345
    },
    {
      "heading": "8 - Graph",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Apache AGE and EdgeDB are graph databases built on top of PostgreSQL. Also, pg_graphql is an",
      "level": 3,
      "page": 345
    },
    {
      "heading": "extension that provides GraphQL support for Postgres.",
      "level": 3,
      "page": 345
    },
    {
      "heading": "Over to you: Have you seen any other use cases of PostgreSQL?",
      "level": 3,
      "page": 345
    },
    {
      "heading": "The Ultimate Software Architect Knowledge Map",
      "level": 2,
      "page": 346
    },
    {
      "heading": "Becoming a Software Architect is a journey where you are always learning. But there are some",
      "level": 3,
      "page": 346
    },
    {
      "heading": "things you must definitely strive to know.",
      "level": 3,
      "page": 346
    },
    {
      "heading": "1 - Master a Programming Language",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Look to master 1-2 programming languages such as Java, Python, Golang, JavaScript, etc.",
      "level": 3,
      "page": 346
    },
    {
      "heading": "2 - Tools",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Build proficiency with key tools such as GitHub, Jenkins, Jira, ELK, Sonar, etc.",
      "level": 3,
      "page": 346
    },
    {
      "heading": "3 - Design Principles",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Learn about important design principles such as OOPS, Clean Code, TDD, DDD, CAP Theorem,",
      "level": 3,
      "page": 346
    },
    {
      "heading": "MVC Pattern, ACID, and GOF.",
      "level": 3,
      "page": 346
    },
    {
      "heading": "4 - Architectural Principles",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Become proficient in multiple architectural patterns such as Microservices, Publish-Subscribe,",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Layered, Event-Driven, Client-Server, Hexagonal, etc.",
      "level": 3,
      "page": 346
    },
    {
      "heading": "5 - Platform Knowledge",
      "level": 3,
      "page": 346
    },
    {
      "heading": "Get to know about several platforms such as containers, orchestration, cloud, serverless, CDN, API",
      "level": 3,
      "page": 347
    },
    {
      "heading": "Gateways, Distributed Systems, and CI/CD",
      "level": 3,
      "page": 347
    },
    {
      "heading": "6 - Data Analytics",
      "level": 3,
      "page": 347
    },
    {
      "heading": "Build a solid knowledge of data and analytics components like SQL and NoSQL databases, data",
      "level": 3,
      "page": 347
    },
    {
      "heading": "streaming solutions with Kafka, object storage, data migration, OLAP, and so on.",
      "level": 3,
      "page": 347
    },
    {
      "heading": "7 - Networking and Security",
      "level": 3,
      "page": 347
    },
    {
      "heading": "Learn about networking and security concepts such as DNS, TCP, TLS, HTTPS, Encryption, JWT,",
      "level": 3,
      "page": 347
    },
    {
      "heading": "OAuth, and Credential Management.",
      "level": 3,
      "page": 347
    },
    {
      "heading": "8 - Supporting Skills",
      "level": 3,
      "page": 347
    },
    {
      "heading": "Apart from technical, software architects also need several supporting skills such as",
      "level": 3,
      "page": 347
    },
    {
      "heading": "leadership, etc.",
      "level": 3,
      "page": 347
    },
    {
      "heading": "Over to you - What else would you add to the roadmap?",
      "level": 3,
      "page": 347
    },
    {
      "heading": "A Crash Course on Scaling the Data Layer",
      "level": 2,
      "page": 348
    },
    {
      "heading": "How can Cache Systems go wrong?",
      "level": 2,
      "page": 349
    },
    {
      "heading": "The diagram below shows 4 typical cases where caches can go wrong and their solutions.",
      "level": 3,
      "page": 349
    },
    {
      "heading": "1. Thunder herd problem",
      "level": 3,
      "page": 349
    },
    {
      "heading": "This happens when a large number of keys in the cache expire at the same time. Then the query",
      "level": 3,
      "page": 349
    },
    {
      "heading": "requests directly hit the database, which overloads the database.",
      "level": 3,
      "page": 349
    },
    {
      "heading": "There are two ways to mitigate this issue: one is to avoid setting the same expiry time for the keys,",
      "level": 3,
      "page": 349
    },
    {
      "heading": "adding a random number in the configuration; the other is to allow only the core business data to hit",
      "level": 3,
      "page": 349
    },
    {
      "heading": "the database and prevent non-core data to access the database until the cache is back up.",
      "level": 3,
      "page": 349
    },
    {
      "heading": "2. Cache penetration",
      "level": 3,
      "page": 349
    },
    {
      "heading": "This happens when the key doesn’t exist in the cache or the database. The application cannot",
      "level": 3,
      "page": 350
    },
    {
      "heading": "retrieve relevant data from the database to update the cache. This problem creates a lot of pressure",
      "level": 3,
      "page": 350
    },
    {
      "heading": "on both the cache and the database.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "To solve this, there are two suggestions. One is to cache a null value for non-existent keys, avoiding",
      "level": 3,
      "page": 350
    },
    {
      "heading": "hitting the database. The other is to use a bloom filter to check the key existence first, and if the key",
      "level": 3,
      "page": 350
    },
    {
      "heading": "doesn’t exist, we can avoid hitting the database.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "3. Cache breakdown",
      "level": 3,
      "page": 350
    },
    {
      "heading": "This is similar to the thunder herd problem. It happens when a hot key expires. A large number of",
      "level": 3,
      "page": 350
    },
    {
      "heading": "requests hit the database.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "Since the hot keys take up 80% of the queries, we do not set an expiration time for them.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "4. Cache crash",
      "level": 3,
      "page": 350
    },
    {
      "heading": "This happens when the cache is down and all the requests go to the database.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "There are two ways to solve this problem. One is to set up a circuit breaker, and when the cache is",
      "level": 3,
      "page": 350
    },
    {
      "heading": "down, the application services cannot visit the cache or the database. The other is to set up a cluster",
      "level": 3,
      "page": 350
    },
    {
      "heading": "for the cache to improve cache availability.",
      "level": 3,
      "page": 350
    },
    {
      "heading": "Over to you: Have you met any of these issues in production?",
      "level": 3,
      "page": 350
    },
    {
      "heading": "4 Popular GraphQL Adoption Patterns",
      "level": 2,
      "page": 351
    },
    {
      "heading": "Typically, teams begin their GraphQL journey with a basic architecture where a client application",
      "level": 3,
      "page": 351
    },
    {
      "heading": "queries a single GraphQL server.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "However, multiple patterns are available:",
      "level": 3,
      "page": 351
    },
    {
      "heading": "1 - Client-based GraphQL",
      "level": 3,
      "page": 351
    },
    {
      "heading": "The client wraps existing APIs behind a single GraphQL endpoint. This approach improves the",
      "level": 3,
      "page": 351
    },
    {
      "heading": "developer experience but the client still bears the performance costs of aggregating data.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "2 - GraphQL with BFFs",
      "level": 3,
      "page": 351
    },
    {
      "heading": "BFF or Backend-for-Frontends adds a new layer where each client has a dedicated BFF service.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "GraphQL is a natural fit to build a client-focused intermediary layer.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "Performance and developer experience for the clients is improved but there’s a tradeoff in building",
      "level": 3,
      "page": 351
    },
    {
      "heading": "and maintaining BFFs.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "3 - The Monolithic GraphQL",
      "level": 3,
      "page": 351
    },
    {
      "heading": "Multiple teams share one codebase for a GraphQL server used by several clients. Also, a single",
      "level": 3,
      "page": 351
    },
    {
      "heading": "team owns a GraphQL API that is accessed by multiple client teams.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "4 - GraphQL Federation",
      "level": 3,
      "page": 351
    },
    {
      "heading": "This involves consolidating multiple graphs into a supergraph.",
      "level": 3,
      "page": 351
    },
    {
      "heading": "GraphQL Federated Gateway takes care of routing the requests to the downstream subgraph",
      "level": 3,
      "page": 352
    },
    {
      "heading": "services that take care of a specific part of the GraphQL schema. This approach maintains",
      "level": 3,
      "page": 352
    },
    {
      "heading": "ownership of data with the domain team while avoiding duplication of effort.",
      "level": 3,
      "page": 352
    },
    {
      "heading": "Over to you: Which GraphQL adoption approach have you seen or used?",
      "level": 3,
      "page": 352
    },
    {
      "heading": "Top 8 Popular Network Protocols",
      "level": 2,
      "page": 353
    },
    {
      "heading": "Network protocols are standard methods of transferring data between two computers in a network.",
      "level": 3,
      "page": 353
    },
    {
      "heading": "1. HTTP (HyperText Transfer Protocol)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "2. HTTP/3",
      "level": 3,
      "page": 353
    },
    {
      "heading": "3. HTTPS (HyperText Transfer Protocol Secure)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "4. WebSocket",
      "level": 3,
      "page": 353
    },
    {
      "heading": "5. TCP (Transmission Control Protocol)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "6. UDP (User Datagram Protocol)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "7. SMTP (Simple Mail Transfer Protocol)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "8. FTP (File Transfer Protocol)",
      "level": 3,
      "page": 353
    },
    {
      "heading": "11 Things I learned about API Development from POST/CON",
      "level": 2,
      "page": 354
    },
    {
      "heading": "2024 by Postman.",
      "level": 2,
      "page": 354
    },
    {
      "heading": "These learnings can be put into three major buckets:",
      "level": 3,
      "page": 354
    },
    {
      "heading": "API Development Toolkit",
      "level": 3,
      "page": 354
    },
    {
      "heading": "- API workflows are a critical requirement to build real-world applications. Postman Flows enables",
      "level": 3,
      "page": 354
    },
    {
      "heading": "developers to automate API workflow visually without writing any code.",
      "level": 3,
      "page": 354
    },
    {
      "heading": "- Monitoring and observability have become harder. Postman Insights delivers a fully automated,",
      "level": 3,
      "page": 354
    },
    {
      "heading": "API-first approach to monitoring.",
      "level": 3,
      "page": 354
    },
    {
      "heading": "- TTFC or Time to First Call is a crucial parameter for developers. Postman’s Related Request",
      "level": 3,
      "page": 354
    },
    {
      "heading": "feature can get you a 200 OK response in less than a second.",
      "level": 3,
      "page": 354
    },
    {
      "heading": "- Authorization is a key friction point in API development. Postman reduces the friction by providing a",
      "level": 3,
      "page": 355
    },
    {
      "heading": "streamlined auth experience by encrypting and storing credentials locally.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- AI is transforming API development. Postbot helps you write tests for your APIs, document APIs,",
      "level": 3,
      "page": 355
    },
    {
      "heading": "debug requests, and visualize responses.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "API Collaboration",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- A streamlined developer workflow is crucial for modern API development. Postman supports this",
      "level": 3,
      "page": 355
    },
    {
      "heading": "goal with scripting, tests, visualizers, and team collaboration.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- API collaboration should bring producers and consumers together. Postman enables collaboration",
      "level": 3,
      "page": 355
    },
    {
      "heading": "using collections, workspaces, and private API networks.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- Designing a delightful API experience is a cross-functional effort that goes beyond writing good",
      "level": 3,
      "page": 355
    },
    {
      "heading": "documentation.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "API Community Growth",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- Developers like to test their APIs right inside their editor. Postman’s VS Code extension makes it a",
      "level": 3,
      "page": 355
    },
    {
      "heading": "reality.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- Product teams want to market their APIs to the global community. Postman’s public workspaces",
      "level": 3,
      "page": 355
    },
    {
      "heading": "makes the process seamless.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "- Postman API Network can be a game-changer for organizations to reach new customers.",
      "level": 3,
      "page": 355
    },
    {
      "heading": "How do Search Engines really Work?",
      "level": 2,
      "page": 356
    },
    {
      "heading": "The diagram below shows a high-level walk-through of a search engine.",
      "level": 3,
      "page": 356
    },
    {
      "heading": "▶️ Step 1 - Crawling",
      "level": 3,
      "page": 356
    },
    {
      "heading": "Web Crawlers scan the internet for web pages. They follow the URL links from one page to another",
      "level": 3,
      "page": 356
    },
    {
      "heading": "videos, and files.",
      "level": 3,
      "page": 356
    },
    {
      "heading": "▶️ Step 2 - Indexing",
      "level": 3,
      "page": 356
    },
    {
      "heading": "Once a web page is crawled, the search engine parses the page and indexes the content found on",
      "level": 3,
      "page": 356
    },
    {
      "heading": "the page in a database. The content is analyzed and categorized. For example, keywords, site",
      "level": 3,
      "page": 356
    },
    {
      "heading": "quality, content freshness, and many other factors are assessed to understand what the page is",
      "level": 3,
      "page": 356
    },
    {
      "heading": "about.",
      "level": 3,
      "page": 356
    },
    {
      "heading": "▶️ Step 3 - Ranking",
      "level": 3,
      "page": 357
    },
    {
      "heading": "Search engines use complex algorithms to determine the order of search results. These algorithms",
      "level": 3,
      "page": 357
    },
    {
      "heading": "page load speed, and many others. Some search engines also personalize results based on the",
      "level": 3,
      "page": 357
    },
    {
      "heading": "user's past search history, location, device, and other personal factors.",
      "level": 3,
      "page": 357
    },
    {
      "heading": "▶️ Step 4 - Querying",
      "level": 3,
      "page": 357
    },
    {
      "heading": "When a user performs a search, the search engine sifts through its index to provide the most",
      "level": 3,
      "page": 357
    },
    {
      "heading": "relevant results.",
      "level": 3,
      "page": 357
    },
    {
      "heading": "The Ultimate Walkthrough of the Generative AI Landscape",
      "level": 2,
      "page": 358
    },
    {
      "heading": "Generative AI and LLMs are fast becoming a game-changer in the business world. Everyone wants",
      "level": 3,
      "page": 358
    },
    {
      "heading": "to learn more about it.",
      "level": 3,
      "page": 358
    },
    {
      "heading": "The landscape covers the following points:",
      "level": 3,
      "page": 358
    },
    {
      "heading": "1 - What is GenAI?",
      "level": 3,
      "page": 358
    },
    {
      "heading": "2 - Foundational Models and LLMs",
      "level": 3,
      "page": 358
    },
    {
      "heading": "3 - “Attention is All You Need” and its impact",
      "level": 3,
      "page": 358
    },
    {
      "heading": "4 - GenAI vs Traditional AI",
      "level": 3,
      "page": 358
    },
    {
      "heading": "5 - How to train a foundation model?",
      "level": 3,
      "page": 358
    },
    {
      "heading": "6 - The GenAI Development Stack (LLMs, Frameworks, Programming Languages, etc.)",
      "level": 3,
      "page": 358
    },
    {
      "heading": "7 - GenAI Applications",
      "level": 3,
      "page": 358
    },
    {
      "heading": "8 - Designing a simple GenAI application",
      "level": 3,
      "page": 358
    },
    {
      "heading": "9 - The AI Engineer Job Role",
      "level": 3,
      "page": 358
    },
    {
      "heading": "Over to you: What else would you add to the GenAI landscape?",
      "level": 3,
      "page": 358
    },
    {
      "heading": "Cheatsheet on Relational Database Design",
      "level": 2,
      "page": 359
    },
    {
      "heading": "A relational database is a type of database that organizes data into structured tables, also known as",
      "level": 3,
      "page": 359
    },
    {
      "heading": "relations. These tables consist of rows (records) and columns (fields).",
      "level": 3,
      "page": 359
    },
    {
      "heading": "Some key points to know about Relational Database Design",
      "level": 3,
      "page": 359
    },
    {
      "heading": "1 - SQL",
      "level": 3,
      "page": 359
    },
    {
      "heading": "SQL is the standard programming language used to interact with relational databases. It supports",
      "level": 3,
      "page": 359
    },
    {
      "heading": "fundamental operations for data manipulation, data definition, and data control.",
      "level": 3,
      "page": 359
    },
    {
      "heading": "2 - Fundamental RDBMS Concepts",
      "level": 3,
      "page": 359
    },
    {
      "heading": "There are some fundamental RDBMS concepts such as table, row, column, primary key, foreign key,",
      "level": 3,
      "page": 360
    },
    {
      "heading": "join, index, and view.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "3 - Keys in Relational Databases",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Different types of keys are as follows:",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Primary Key: A column or combination of columns uniquely identifying each record in a table.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Surrogate Key: Artificial key generated by the database system or a globally unique identifier that",
      "level": 3,
      "page": 360
    },
    {
      "heading": "has no inherent meaning to the data.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Foreign Key: A column or a combination of columns in one table that references the primary key of",
      "level": 3,
      "page": 360
    },
    {
      "heading": "another table.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "4 - Relation Types",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Relationships between tables play a key role in defining how data is connected. Three main types of",
      "level": 3,
      "page": 360
    },
    {
      "heading": "relationships are:",
      "level": 3,
      "page": 360
    },
    {
      "heading": "One-to-One Relationship: A record in one table is associated with one record in another table.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "One-to-Many Relationship: A record in one table is associated with multiple records in another table",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Many-to-Many Relationship: Records in both tables can have multiple records in the other table.",
      "level": 3,
      "page": 360
    },
    {
      "heading": "5 - Joins",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Joins act as bridges, connecting different tables based on their relationship. They are extremely",
      "level": 3,
      "page": 360
    },
    {
      "heading": "useful when you need to retrieve data from multiple tables. There are 3 main types of joins:",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Inner Join",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Right Outer Join",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Left Outer Join",
      "level": 3,
      "page": 360
    },
    {
      "heading": "Over to you: What else should you know about relational database design?",
      "level": 3,
      "page": 360
    },
    {
      "heading": "My Favorite 10 Soft Skill Books that Can Help You Become a",
      "level": 2,
      "page": 361
    },
    {
      "heading": "Better Developer",
      "level": 2,
      "page": 361
    },
    {
      "heading": "Productivity & Personal Development",
      "level": 3,
      "page": 361
    },
    {
      "heading": "1 - Deep Work by Cal Newport",
      "level": 3,
      "page": 361
    },
    {
      "heading": "2 - Atomic Habits by James Clear",
      "level": 3,
      "page": 361
    },
    {
      "heading": "3 - The Effective Executive by Peter Drucker",
      "level": 3,
      "page": 361
    },
    {
      "heading": "Communication Skills",
      "level": 3,
      "page": 361
    },
    {
      "heading": "1 - Crucial Conversations by Kerry Patterson et al.",
      "level": 3,
      "page": 361
    },
    {
      "heading": "2 - How to Win Friends and Influence People by Dale Carnegie",
      "level": 3,
      "page": 361
    },
    {
      "heading": "Leadership & Team Dynamics",
      "level": 3,
      "page": 361
    },
    {
      "heading": "1 - Extreme Ownership by Jocko Willink and Leif Babin",
      "level": 3,
      "page": 361
    },
    {
      "heading": "2 - The Five Dysfunctions of a Team by Patrick Lencioni",
      "level": 3,
      "page": 361
    },
    {
      "heading": "3 - Start with Why by Simon Sinek",
      "level": 3,
      "page": 362
    },
    {
      "heading": "Design & Craftsmanship",
      "level": 3,
      "page": 362
    },
    {
      "heading": "1 - The Clean Coder by Robert Martin",
      "level": 3,
      "page": 362
    },
    {
      "heading": "2 - The Design of Everyday Things by Dan Norman",
      "level": 3,
      "page": 362
    },
    {
      "heading": "Over to you: What is your favorite book?",
      "level": 3,
      "page": 362
    },
    {
      "heading": "REST API Authentication Methods",
      "level": 2,
      "page": 363
    },
    {
      "heading": "Authentication in REST APIs acts as the crucial gateway, ensuring that solely authorized users",
      "level": 3,
      "page": 363
    },
    {
      "heading": "or applications gain access to the API's resources.",
      "level": 3,
      "page": 363
    },
    {
      "heading": "Some popular authentication methods for REST APIs include:",
      "level": 3,
      "page": 363
    },
    {
      "heading": "1. Basic Authentication:",
      "level": 3,
      "page": 363
    },
    {
      "heading": "Involves sending a username and password with each request, but can be less secure without",
      "level": 3,
      "page": 363
    },
    {
      "heading": "encryption.",
      "level": 3,
      "page": 363
    },
    {
      "heading": "When to use:",
      "level": 3,
      "page": 363
    },
    {
      "heading": "Suitable for simple applications where security and encryption aren’t the primary concern or when",
      "level": 3,
      "page": 363
    },
    {
      "heading": "used over secured connections.",
      "level": 3,
      "page": 363
    },
    {
      "heading": "2. Token Authentication:",
      "level": 3,
      "page": 363
    },
    {
      "heading": "Uses generated tokens, like JSON Web Tokens (JWT), exchanged between client and server,",
      "level": 3,
      "page": 364
    },
    {
      "heading": "offering enhanced security without sending login credentials with each request.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "When to use:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Ideal for more secure and scalable systems, especially when avoiding sending login credentials with",
      "level": 3,
      "page": 364
    },
    {
      "heading": "each request is a priority.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "3. OAuth Authentication:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Enables third-party limited access to user resources without revealing credentials by issuing access",
      "level": 3,
      "page": 364
    },
    {
      "heading": "tokens after user authentication.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "When to use:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Ideal for scenarios requiring controlled access to user resources by third-party applications or",
      "level": 3,
      "page": 364
    },
    {
      "heading": "services.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "4. API Key Authentication:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Assigns unique keys to users or applications, sent in headers or parameters; while simple, it might",
      "level": 3,
      "page": 364
    },
    {
      "heading": "lack the security features of token-based or OAuth methods.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "When to use:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Convenient for straightforward access control in less sensitive environments or for granting access",
      "level": 3,
      "page": 364
    },
    {
      "heading": "to certain functionalities without the need for user-specific permissions.",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 364
    },
    {
      "heading": "Which REST API authentication method do you find most effective in ensuring both security and",
      "level": 3,
      "page": 364
    },
    {
      "heading": "usability for your applications?",
      "level": 3,
      "page": 364
    },
    {
      "heading": "How to Design a System Like YouTube?",
      "level": 3,
      "page": 365
    },
    {
      "heading": "Here’s a 9-step process:",
      "level": 3,
      "page": 365
    },
    {
      "heading": "1 - The user creates a video upload request and provides the video files along with the details about",
      "level": 3,
      "page": 365
    },
    {
      "heading": "the video.",
      "level": 3,
      "page": 365
    },
    {
      "heading": "2 - The raw video files are uploaded to an Object Storage (such as S3).",
      "level": 3,
      "page": 365
    },
    {
      "heading": "3 - Also, the metadata is saved in a database as well as a cache for faster retrieval when needed.",
      "level": 3,
      "page": 365
    },
    {
      "heading": "4 - The raw video files are sent for transcoding to a special transcoding server. Transcoding is the",
      "level": 3,
      "page": 365
    },
    {
      "heading": "process of encoding the videos into compatible bitrates and formats for streaming.",
      "level": 3,
      "page": 365
    },
    {
      "heading": "5 - The transcoded video is uploaded to another object storage.",
      "level": 3,
      "page": 365
    },
    {
      "heading": "6 - The notification for transcoding completion is sent to a special service via a message queue.",
      "level": 3,
      "page": 365
    },
    {
      "heading": "7 - The Transcoding Status Handler updates the metadata DB and cache with the latest details of",
      "level": 3,
      "page": 366
    },
    {
      "heading": "the video.",
      "level": 3,
      "page": 366
    },
    {
      "heading": "8 - The user raises a video streaming request that goes to a Content Delivery Network (CDN).",
      "level": 3,
      "page": 366
    },
    {
      "heading": "9 - The CDN fetches the video from the object storage for streaming. It also caches the video locally",
      "level": 3,
      "page": 366
    },
    {
      "heading": "for subsequent streaming requests.",
      "level": 3,
      "page": 366
    },
    {
      "heading": "Over to you: What else would you add to make the YouTube-like system?",
      "level": 3,
      "page": 366
    },
    {
      "heading": "The Evolving Landscape of API Protocols",
      "level": 2,
      "page": 367
    },
    {
      "heading": "This is a brief summary of the blog post I wrote for Postman.",
      "level": 3,
      "page": 367
    },
    {
      "heading": "In this blog post, I cover the six most popular API protocols: REST, Webhooks, GraphQL, SOAP,",
      "level": 3,
      "page": 367
    },
    {
      "heading": "WebSocket, and gRPC. The discussion includes the benefits and challenges associated with each",
      "level": 3,
      "page": 367
    },
    {
      "heading": "protocol.",
      "level": 3,
      "page": 367
    }
  ]
}