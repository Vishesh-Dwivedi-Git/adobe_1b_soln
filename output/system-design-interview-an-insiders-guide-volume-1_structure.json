{
  "title": "Untitled Document",
  "outline": [
    {
      "heading": "System Design",
      "level": 1,
      "page": 2
    },
    {
      "heading": "What are database isolation levels? What are they used for?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "What is IaaS/PaaS/SaaS?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Most popular programming languages",
      "level": 3,
      "page": 2
    },
    {
      "heading": "What is the future of online payments?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "What is SSO (Single Sign-On)?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How to store passwords safely in the database?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How does HTTPS work?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How to learn design patterns?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "A visual guide on how to choose the right Database",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Do you know how to generate globally unique IDs?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How does Twitter work?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "What is the difference between Process and Thread?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Interview Question: design Google Docs",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Deployment strategies",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Flowchart of how slack decides to send a notification",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How does Amazon build and operate the software?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How to design a secure web API access for your website?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How do microservices collaborate and interact with each other?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "What are the differences between Virtualization (VMware) and",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Containerization (Docker)?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Which cloud provider should be used when building a big data",
      "level": 3,
      "page": 2
    },
    {
      "heading": "solution?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "How to avoid crawling duplicate URLs at Google scale?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Why is a solid-state drive (SSD) fast?",
      "level": 3,
      "page": 2
    },
    {
      "heading": "Handling a large-scale outage",
      "level": 3,
      "page": 2
    },
    {
      "heading": "AWS Lambda behind the scenes",
      "level": 3,
      "page": 2
    },
    {
      "heading": "HTTP 1.0 -> HTTP 1.1 -> HTTP 2.0 -> HTTP 3.0 (QUIC).",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How to scale a website to support millions of users?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "DevOps Books",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Why is Kafka fast?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "SOAP vs REST vs GraphQL vs RPC.",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How do modern browsers work?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Redis vs Memcached",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Optimistic locking",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Tradeoff between latency and consistency",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Cache miss attack",
      "level": 3,
      "page": 3
    },
    {
      "heading": "How to diagnose a mysterious process that’s taking too much CPU,",
      "level": 3,
      "page": 3
    },
    {
      "heading": "memory, IO, etc?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "What are the top cache strategies?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Upload large files",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Why is Redis so Fast?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "SWIFT payment network",
      "level": 3,
      "page": 3
    },
    {
      "heading": "At-most once, at-least once, and exactly once",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Vertical partitioning and Horizontal partitioning",
      "level": 3,
      "page": 3
    },
    {
      "heading": "CDN",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Erasure coding",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Foreign exchange in payment",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Block storage, file storage and object storage",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Block storage, file storage and object storage",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Domain Name System (DNS) lookup",
      "level": 3,
      "page": 3
    },
    {
      "heading": "What happens when you type a URL into your browser?",
      "level": 3,
      "page": 3
    },
    {
      "heading": "AI Coding engine",
      "level": 3,
      "page": 3
    },
    {
      "heading": "101",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Read replica pattern",
      "level": 3,
      "page": 3
    },
    {
      "heading": "103",
      "level": 3,
      "page": 3
    },
    {
      "heading": "Read replica pattern",
      "level": 3,
      "page": 4
    },
    {
      "heading": "105",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Email receiving flow",
      "level": 3,
      "page": 4
    },
    {
      "heading": "107",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Email sending flow",
      "level": 3,
      "page": 4
    },
    {
      "heading": "109",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Interview Question: Design Gmail",
      "level": 3,
      "page": 4
    },
    {
      "heading": "111",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Map rendering",
      "level": 3,
      "page": 4
    },
    {
      "heading": "113",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Interview Question: Design Google Maps",
      "level": 3,
      "page": 4
    },
    {
      "heading": "115",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Pull vs push models",
      "level": 3,
      "page": 4
    },
    {
      "heading": "117",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Money movement",
      "level": 3,
      "page": 4
    },
    {
      "heading": "119",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Reconciliation",
      "level": 3,
      "page": 4
    },
    {
      "heading": "122",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Which database shall I use for the metrics collecting system?",
      "level": 3,
      "page": 4
    },
    {
      "heading": "126",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Metrics monitoring and altering system",
      "level": 3,
      "page": 4
    },
    {
      "heading": "129",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Reconciliation",
      "level": 3,
      "page": 4
    },
    {
      "heading": "131",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Big data papers",
      "level": 3,
      "page": 4
    },
    {
      "heading": "134",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Avoid double charge",
      "level": 3,
      "page": 4
    },
    {
      "heading": "136",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Payment security",
      "level": 3,
      "page": 4
    },
    {
      "heading": "138",
      "level": 3,
      "page": 4
    },
    {
      "heading": "System Design Interview Tip",
      "level": 3,
      "page": 4
    },
    {
      "heading": "139",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Big data evolvement",
      "level": 3,
      "page": 4
    },
    {
      "heading": "140",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Quadtree",
      "level": 3,
      "page": 4
    },
    {
      "heading": "142",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How do we find nearby restaurants on Yelp?",
      "level": 3,
      "page": 4
    },
    {
      "heading": "144",
      "level": 3,
      "page": 4
    },
    {
      "heading": "How does a modern stock exchange achieve microsecond latency? 147",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Match buy and sell orders",
      "level": 3,
      "page": 4
    },
    {
      "heading": "149",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Stock exchange design",
      "level": 3,
      "page": 4
    },
    {
      "heading": "151",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Design a payment system",
      "level": 3,
      "page": 4
    },
    {
      "heading": "153",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Design a flash sale system",
      "level": 3,
      "page": 4
    },
    {
      "heading": "155",
      "level": 3,
      "page": 4
    },
    {
      "heading": "Back-of-the-envelope estimation",
      "level": 3,
      "page": 4
    },
    {
      "heading": "157",
      "level": 3,
      "page": 4
    },
    {
      "heading": "What are database isolation levels? What are they used",
      "level": 2,
      "page": 5
    },
    {
      "heading": "for?",
      "level": 2,
      "page": 5
    },
    {
      "heading": "Database isolation allows a transaction to execute as if there are no",
      "level": 3,
      "page": 5
    },
    {
      "heading": "other concurrently running transactions.",
      "level": 3,
      "page": 5
    },
    {
      "heading": "The diagram below illustrates four isolation levels.",
      "level": 3,
      "page": 5
    },
    {
      "heading": "🔹Serializalble: This is the highest isolation level. Concurrent",
      "level": 3,
      "page": 5
    },
    {
      "heading": "transactions are guaranteed to be executed in sequence.",
      "level": 3,
      "page": 5
    },
    {
      "heading": "'Repeatable Read: Data read during the transaction stays the same",
      "level": 3,
      "page": 5
    },
    {
      "heading": "as the transaction starts.",
      "level": 3,
      "page": 5
    },
    {
      "heading": "'Read Committed: Data modification can only be read after the",
      "level": 3,
      "page": 5
    },
    {
      "heading": "transaction is committed.",
      "level": 3,
      "page": 5
    },
    {
      "heading": "🔹Read Uncommitted: The data modification can be read by other",
      "level": 3,
      "page": 6
    },
    {
      "heading": "transactions before a transaction is committed.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "The isolation is guaranteed by MVCC (Multi-Version Consistency",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Control) and locks.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "The diagram below takes Repeatable Read as an example to",
      "level": 3,
      "page": 6
    },
    {
      "heading": "demonstrate how MVCC works:",
      "level": 3,
      "page": 6
    },
    {
      "heading": "There are two hidden columns for each row: transaction_id and",
      "level": 3,
      "page": 6
    },
    {
      "heading": "roll_pointer. When transaction A starts, a new Read View with",
      "level": 3,
      "page": 6
    },
    {
      "heading": "transaction_id=201 is created. Shortly afterward, transaction B starts,",
      "level": 3,
      "page": 6
    },
    {
      "heading": "and a new Read View with transaction_id=202 is created.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Now transaction A modifies the balance to 200, a new row of the log is",
      "level": 3,
      "page": 6
    },
    {
      "heading": "created, and the roll_pointer points to the old row. Before transaction A",
      "level": 3,
      "page": 6
    },
    {
      "heading": "commits, transaction B reads the balance data. Transaction B finds",
      "level": 3,
      "page": 6
    },
    {
      "heading": "that transaction_id 201 is not committed, it reads the next committed",
      "level": 3,
      "page": 6
    },
    {
      "heading": "record(transaction_id=200).",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Even when transaction A commits, transaction B still reads data based",
      "level": 3,
      "page": 6
    },
    {
      "heading": "on the Read View created when transaction B starts. So transaction B",
      "level": 3,
      "page": 6
    },
    {
      "heading": "always reads the data with balance=100.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Over to you: have you seen isolation levels used in the wrong way?",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Did it cause serious outages?",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 6
    },
    {
      "heading": "What is IaaS/PaaS/SaaS?",
      "level": 2,
      "page": 7
    },
    {
      "heading": "The diagram below illustrates the differences between IaaS",
      "level": 3,
      "page": 7
    },
    {
      "heading": "(Infrastructure-as-a-Service), PaaS (Platform-as-a-Service), and SaaS",
      "level": 3,
      "page": 7
    },
    {
      "heading": "(Software-as-a-Service).",
      "level": 3,
      "page": 7
    },
    {
      "heading": "For a non-cloud application, we own and manage all the hardware and",
      "level": 3,
      "page": 7
    },
    {
      "heading": "software. We say the application is on-premises.",
      "level": 3,
      "page": 7
    },
    {
      "heading": "With cloud computing, cloud service vendors provide three kinds of",
      "level": 3,
      "page": 7
    },
    {
      "heading": "models for us to use: IaaS, PaaS, and SaaS.",
      "level": 3,
      "page": 7
    },
    {
      "heading": "𝐈𝐚𝐚𝐒 provides us access to cloud vendors' infrastructure, like servers,",
      "level": 3,
      "page": 7
    },
    {
      "heading": "storage, and networking. We pay for the infrastructure service and",
      "level": 3,
      "page": 7
    },
    {
      "heading": "install and manage supporting software on it for our application.",
      "level": 3,
      "page": 7
    },
    {
      "heading": "𝐏𝐚𝐚𝐒 goes further. It provides a platform with a variety of middleware,",
      "level": 3,
      "page": 7
    },
    {
      "heading": "frameworks, and tools to build our application. We only focus on",
      "level": 3,
      "page": 7
    },
    {
      "heading": "application development and data.",
      "level": 3,
      "page": 7
    },
    {
      "heading": "𝐒𝐚𝐚𝐒 enables the application to run in the cloud. We pay a monthly or",
      "level": 3,
      "page": 7
    },
    {
      "heading": "annual fee to use the SaaS product.",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Over to you: which IaaS/PaaS/SaaS products have you used? How do",
      "level": 3,
      "page": 7
    },
    {
      "heading": "you decide which architecture to use?",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Image Source: https://www.ibm.com/cloud/learn/iaas-paas-saas",
      "level": 3,
      "page": 7
    },
    {
      "heading": "Most popular programming languages",
      "level": 2,
      "page": 8
    },
    {
      "heading": "Programming languages come and go. Some stand the test of time.",
      "level": 3,
      "page": 8
    },
    {
      "heading": "Some already are shooting stars and some are rising rapidly on the",
      "level": 3,
      "page": 8
    },
    {
      "heading": "horizon.",
      "level": 3,
      "page": 8
    },
    {
      "heading": "I draw a diagram by putting the top 38 most commonly used",
      "level": 3,
      "page": 8
    },
    {
      "heading": "programming languages in one place, sorted by year. Data source:",
      "level": 3,
      "page": 8
    },
    {
      "heading": "StackOverflow survey.",
      "level": 3,
      "page": 8
    },
    {
      "heading": "1 JavaScript",
      "level": 3,
      "page": 8
    },
    {
      "heading": "2 HTML/CSS",
      "level": 3,
      "page": 8
    },
    {
      "heading": "3 Python",
      "level": 3,
      "page": 8
    },
    {
      "heading": "4 SQL",
      "level": 3,
      "page": 8
    },
    {
      "heading": "5 Java",
      "level": 3,
      "page": 8
    },
    {
      "heading": "6 Node",
      "level": 3,
      "page": 8
    },
    {
      "heading": "7 TypeScript",
      "level": 3,
      "page": 8
    },
    {
      "heading": "8 C",
      "level": 3,
      "page": 8
    },
    {
      "heading": "9 Bash/Shell",
      "level": 3,
      "page": 8
    },
    {
      "heading": "10 C",
      "level": 3,
      "page": 8
    },
    {
      "heading": "11 PHP",
      "level": 3,
      "page": 8
    },
    {
      "heading": "12 C",
      "level": 3,
      "page": 9
    },
    {
      "heading": "13 PowerShell",
      "level": 3,
      "page": 9
    },
    {
      "heading": "14 Go",
      "level": 3,
      "page": 9
    },
    {
      "heading": "15 Kotlin",
      "level": 3,
      "page": 9
    },
    {
      "heading": "16 Rust",
      "level": 3,
      "page": 9
    },
    {
      "heading": "17 Ruby",
      "level": 3,
      "page": 9
    },
    {
      "heading": "18 Dart",
      "level": 3,
      "page": 9
    },
    {
      "heading": "19 Assembly",
      "level": 3,
      "page": 9
    },
    {
      "heading": "20 Swift",
      "level": 3,
      "page": 9
    },
    {
      "heading": "21 R",
      "level": 3,
      "page": 9
    },
    {
      "heading": "22 VBA",
      "level": 3,
      "page": 9
    },
    {
      "heading": "23 Matlab",
      "level": 3,
      "page": 9
    },
    {
      "heading": "24 Groovy",
      "level": 3,
      "page": 9
    },
    {
      "heading": "25 Objective-C",
      "level": 3,
      "page": 9
    },
    {
      "heading": "26 Scala",
      "level": 3,
      "page": 9
    },
    {
      "heading": "27 Perl",
      "level": 3,
      "page": 9
    },
    {
      "heading": "28 Haskell",
      "level": 3,
      "page": 9
    },
    {
      "heading": "29 Delphi",
      "level": 3,
      "page": 9
    },
    {
      "heading": "30 Clojure",
      "level": 3,
      "page": 9
    },
    {
      "heading": "31 Elixir",
      "level": 3,
      "page": 9
    },
    {
      "heading": "32 LISP",
      "level": 3,
      "page": 9
    },
    {
      "heading": "33 Julia",
      "level": 3,
      "page": 9
    },
    {
      "heading": "34 F",
      "level": 3,
      "page": 9
    },
    {
      "heading": "35 Erlang",
      "level": 3,
      "page": 9
    },
    {
      "heading": "36 APL",
      "level": 3,
      "page": 9
    },
    {
      "heading": "37 Crystal",
      "level": 3,
      "page": 9
    },
    {
      "heading": "38 COBOL",
      "level": 3,
      "page": 9
    },
    {
      "heading": "Over to you: what’s the first programming language you learned? And",
      "level": 3,
      "page": 9
    },
    {
      "heading": "what are the other languages you learned over the years?",
      "level": 3,
      "page": 9
    },
    {
      "heading": "What is the future of online payments?",
      "level": 2,
      "page": 10
    },
    {
      "heading": "I don’t know the answer, but I do know one of the candidates is the",
      "level": 3,
      "page": 10
    },
    {
      "heading": "blockchain.",
      "level": 3,
      "page": 10
    },
    {
      "heading": "As a fan of technology, I always seek new solutions to old challenges.",
      "level": 3,
      "page": 10
    },
    {
      "heading": "A book that explains a lot about an emerging payment system is",
      "level": 3,
      "page": 10
    },
    {
      "heading": "‘Mastering Bitcoin’ by Andreas M. Antonopoulos. I want to share my",
      "level": 3,
      "page": 10
    },
    {
      "heading": "discovery of this book with you because it explains very clearly bitcoin",
      "level": 3,
      "page": 10
    },
    {
      "heading": "and its underlying blockchain. This book makes me rethink how to",
      "level": 3,
      "page": 10
    },
    {
      "heading": "renovate payment systems.",
      "level": 3,
      "page": 10
    },
    {
      "heading": "Here are the takeaways:",
      "level": 3,
      "page": 10
    },
    {
      "heading": "1. The bitcoin wallet balance is calculated on the fly, while the",
      "level": 3,
      "page": 10
    },
    {
      "heading": "traditional wallet balance is stored in the database. You can check",
      "level": 3,
      "page": 10
    },
    {
      "heading": "chapter 12 of System Design Interview Volume 2, on how to implement",
      "level": 3,
      "page": 10
    },
    {
      "heading": "a traditional wallet (https://amzn.to/34G2vmC).",
      "level": 3,
      "page": 10
    },
    {
      "heading": "2. The golden source of truth for bitcoin is the blockchain, which is also",
      "level": 3,
      "page": 11
    },
    {
      "heading": "the journal. It’s the same if we use Event Sourcing architecture to build",
      "level": 3,
      "page": 11
    },
    {
      "heading": "a traditional wallet, although there are other options.",
      "level": 3,
      "page": 11
    },
    {
      "heading": "3. There is a small virtual machine for bitcoin - and also Ethereum. The",
      "level": 3,
      "page": 11
    },
    {
      "heading": "virtual machine defines a set of bytecodes to do basic tasks such as",
      "level": 3,
      "page": 11
    },
    {
      "heading": "validation.",
      "level": 3,
      "page": 11
    },
    {
      "heading": "Over to you: if Elon Musk set up a base on planet Mars, what payment",
      "level": 3,
      "page": 11
    },
    {
      "heading": "solution will you recommend?",
      "level": 3,
      "page": 11
    },
    {
      "heading": "What is SSO (Single Sign-On)?",
      "level": 2,
      "page": 12
    },
    {
      "heading": "A friend recently went through the irksome experience of being signed",
      "level": 3,
      "page": 12
    },
    {
      "heading": "out from a number of websites they use daily. This event will be familiar",
      "level": 3,
      "page": 12
    },
    {
      "heading": "to millions of web users, and it is a tedious process to fix. It can involve",
      "level": 3,
      "page": 12
    },
    {
      "heading": "trying to remember multiple long-forgotten passwords, or typing in the",
      "level": 3,
      "page": 12
    },
    {
      "heading": "names of pets from childhood to answer security questions. SSO",
      "level": 3,
      "page": 12
    },
    {
      "heading": "removes this inconvenience and makes life online better. But how does",
      "level": 3,
      "page": 12
    },
    {
      "heading": "it work?",
      "level": 3,
      "page": 12
    },
    {
      "heading": "Basically, Single Sign-On (SSO) is an authentication scheme. It allows",
      "level": 3,
      "page": 12
    },
    {
      "heading": "a user to log in to different systems using a single ID.",
      "level": 3,
      "page": 12
    },
    {
      "heading": "The diagram below illustrates how SSO works.",
      "level": 3,
      "page": 12
    },
    {
      "heading": "Step 1: A user visits Gmail, or any email service. Gmail finds the user",
      "level": 3,
      "page": 12
    },
    {
      "heading": "is not logged in and so redirects them to the SSO authentication",
      "level": 3,
      "page": 12
    },
    {
      "heading": "server, which also finds the user is not logged in. As a result, the user",
      "level": 3,
      "page": 12
    },
    {
      "heading": "is redirected to the SSO login page, where they enter their login",
      "level": 3,
      "page": 13
    },
    {
      "heading": "credentials.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Steps 2-3: The SSO authentication server validates the credentials,",
      "level": 3,
      "page": 13
    },
    {
      "heading": "creates the global session for the user, and creates a token.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Steps 4-7: Gmail validates the token in the SSO authentication server.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "The authentication server registers the Gmail system, and returns",
      "level": 3,
      "page": 13
    },
    {
      "heading": "“valid.” Gmail returns the protected resource to the user.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Step 8: From Gmail, the user navigates to another Google-owned",
      "level": 3,
      "page": 13
    },
    {
      "heading": "website, for example, YouTube.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Steps 9-10: YouTube finds the user is not logged in, and then requests",
      "level": 3,
      "page": 13
    },
    {
      "heading": "authentication. The SSO authentication server finds the user is already",
      "level": 3,
      "page": 13
    },
    {
      "heading": "logged in and returns the token.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Step 11-14: YouTube validates the token in the SSO authentication",
      "level": 3,
      "page": 13
    },
    {
      "heading": "server. The authentication server registers the YouTube system, and",
      "level": 3,
      "page": 13
    },
    {
      "heading": "returns “valid.” YouTube returns the protected resource to the user.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "The process is complete and the user gets back access to their",
      "level": 3,
      "page": 13
    },
    {
      "heading": "account.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Question 1: have you implemented SSO in your projects? What is the",
      "level": 3,
      "page": 13
    },
    {
      "heading": "most difficult part?",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Question 2: what’s your favorite sign-in method and why?",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 13
    },
    {
      "heading": "How to store passwords safely in the database?",
      "level": 2,
      "page": 14
    },
    {
      "heading": "Let’s take a look.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "𝐓𝐡𝐢𝐧𝐠𝐬 𝐍𝐎𝐓 𝐭𝐨 𝐝𝐨",
      "level": 3,
      "page": 14
    },
    {
      "heading": "🔹 Storing passwords in plain text is not a good idea because anyone",
      "level": 3,
      "page": 14
    },
    {
      "heading": "with internal access can see them.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "' Storing password hashes directly is not sufficient because it is",
      "level": 3,
      "page": 14
    },
    {
      "heading": "pruned to precomputation attacks, such as rainbow tables.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "' To mitigate precomputation attacks, we salt the passwords.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "𝐖𝐡𝐚𝐭 𝐢𝐬 𝐬𝐚𝐥𝐭?",
      "level": 3,
      "page": 14
    },
    {
      "heading": "According to OWASP guidelines, “a salt is a unique, randomly",
      "level": 3,
      "page": 14
    },
    {
      "heading": "generated string that is added to each password as part of the hashing",
      "level": 3,
      "page": 14
    },
    {
      "heading": "process”.",
      "level": 3,
      "page": 14
    },
    {
      "heading": "𝐇𝐨𝐰 𝐭𝐨 𝐬𝐭𝐨𝐫𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝 𝐚𝐧𝐝 𝐬𝐚𝐥𝐭?",
      "level": 3,
      "page": 15
    },
    {
      "heading": "1⃣ A salt is not meant to be secret and it can be stored in plain text in",
      "level": 3,
      "page": 15
    },
    {
      "heading": "the database. It is used to ensure the hash result is unique to each",
      "level": 3,
      "page": 15
    },
    {
      "heading": "password.",
      "level": 3,
      "page": 15
    },
    {
      "heading": "2⃣  The password can be stored in the database using the following",
      "level": 3,
      "page": 15
    },
    {
      "heading": "format: 𝘩𝘢𝘴𝘩( 𝘱𝘢𝘴𝘴𝘸𝘰𝘳𝘥 + 𝘴𝘢𝘭𝘵).",
      "level": 3,
      "page": 15
    },
    {
      "heading": "𝐇𝐨𝐰 𝐭𝐨 𝐯𝐚𝐥𝐢𝐝𝐚𝐭𝐞 𝐚 𝐩𝐚𝐬𝐬𝐰𝐨𝐫𝐝?",
      "level": 3,
      "page": 15
    },
    {
      "heading": "To validate a password, it can go through the following process:",
      "level": 3,
      "page": 15
    },
    {
      "heading": "1⃣ A client enters the password.",
      "level": 3,
      "page": 15
    },
    {
      "heading": "2⃣ The system fetches the corresponding salt from the database.",
      "level": 3,
      "page": 15
    },
    {
      "heading": "3⃣ The system appends the salt to the password and hashes it. Let’s",
      "level": 3,
      "page": 16
    },
    {
      "heading": "call the hashed value H1.",
      "level": 3,
      "page": 16
    },
    {
      "heading": "4⃣ The system compares H1 and H2, where H2 is the hash stored in the",
      "level": 3,
      "page": 16
    },
    {
      "heading": "database. If they are the same, the password is valid.",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Over to you: what other mechanisms can we use to ensure password",
      "level": 3,
      "page": 16
    },
    {
      "heading": "safety?",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 16
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 16
    },
    {
      "heading": "How does HTTPS work?",
      "level": 2,
      "page": 17
    },
    {
      "heading": "Hypertext Transfer Protocol Secure (HTTPS) is an extension of the",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Hypertext Transfer Protocol (HTTP.) HTTPS transmits encrypted data",
      "level": 3,
      "page": 17
    },
    {
      "heading": "using Transport Layer Security (TLS.) If the data is hijacked online, all",
      "level": 3,
      "page": 17
    },
    {
      "heading": "the hijacker gets is binary code.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "How is the data encrypted and decrypted?",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Step 1 - The client (browser) and the server establish a TCP",
      "level": 3,
      "page": 17
    },
    {
      "heading": "connection.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "Step 2 - The client sends a “client hello” to the server. The message",
      "level": 3,
      "page": 17
    },
    {
      "heading": "contains a set of necessary encryption algorithms (cipher suites) and",
      "level": 3,
      "page": 17
    },
    {
      "heading": "the latest TLS version it can support. The server responds with a",
      "level": 3,
      "page": 17
    },
    {
      "heading": "“server hello” so the browser knows whether it can support the",
      "level": 3,
      "page": 17
    },
    {
      "heading": "algorithms and TLS version.",
      "level": 3,
      "page": 17
    },
    {
      "heading": "The server then sends the SSL certificate to the client. The certificate",
      "level": 3,
      "page": 18
    },
    {
      "heading": "contains the public key, host name, expiry dates, etc. The client",
      "level": 3,
      "page": 18
    },
    {
      "heading": "validates the certificate.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Step 3 - After validating the SSL certificate, the client generates a",
      "level": 3,
      "page": 18
    },
    {
      "heading": "session key and encrypts it using the public key. The server receives",
      "level": 3,
      "page": 18
    },
    {
      "heading": "the encrypted session key and decrypts it with the private key.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Step 4 - Now that both the client and the server hold the same session",
      "level": 3,
      "page": 18
    },
    {
      "heading": "key (symmetric encryption), the encrypted data is transmitted in a",
      "level": 3,
      "page": 18
    },
    {
      "heading": "secure bi-directional channel.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Why does HTTPS switch to symmetric encryption during data",
      "level": 3,
      "page": 18
    },
    {
      "heading": "transmission? There are two main reasons:",
      "level": 3,
      "page": 18
    },
    {
      "heading": "1. Security: The asymmetric encryption goes only one way. This means",
      "level": 3,
      "page": 18
    },
    {
      "heading": "that if the server tries to send the encrypted data back to the client,",
      "level": 3,
      "page": 18
    },
    {
      "heading": "anyone can decrypt the data using the public key.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "2. Server resources: The asymmetric encryption adds quite a lot of",
      "level": 3,
      "page": 18
    },
    {
      "heading": "mathematical overhead. It is not suitable for data transmissions in long",
      "level": 3,
      "page": 18
    },
    {
      "heading": "sessions.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Over to you: how much performance overhead does HTTPS add,",
      "level": 3,
      "page": 18
    },
    {
      "heading": "compared to HTTP?",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 18
    },
    {
      "heading": "How to learn design patterns?",
      "level": 2,
      "page": 19
    },
    {
      "heading": "Besides reading a lot of well-written code, a good book guides us like a",
      "level": 3,
      "page": 19
    },
    {
      "heading": "good teacher.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "𝐇𝐞𝐚𝐝 𝐅𝐢𝐫𝐬𝐭 𝐃𝐞𝐬𝐢𝐠𝐧 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬, second edition, is the one I would",
      "level": 3,
      "page": 19
    },
    {
      "heading": "recommend.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "When I began my journey in software engineering, I found it hard to",
      "level": 3,
      "page": 19
    },
    {
      "heading": "understand the classic textbook, 𝐃𝐞𝐬𝐢𝐠𝐧 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬, by the Gang of Four.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Luckily, I discovered Head First Design Patterns in the school library.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "This book solved a lot of puzzles for me. When I went back to the",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Design Patterns book, everything looked familiar and more",
      "level": 3,
      "page": 19
    },
    {
      "heading": "understandable.",
      "level": 3,
      "page": 19
    },
    {
      "heading": "Last year, I bought the second edition of Head First Design Patterns",
      "level": 3,
      "page": 19
    },
    {
      "heading": "and read through it. Here are a few things I like about the book:",
      "level": 3,
      "page": 19
    },
    {
      "heading": "🔹This book solves the challenge of software’s abstract, “invisible”",
      "level": 3,
      "page": 20
    },
    {
      "heading": "nature. Software is difficult to build because we cannot see its",
      "level": 3,
      "page": 20
    },
    {
      "heading": "architecture; its details are embedded in the code and binary files. It is",
      "level": 3,
      "page": 20
    },
    {
      "heading": "even harder to understand software design patterns because these are",
      "level": 3,
      "page": 20
    },
    {
      "heading": "higher-level abstractions of the software. The book fixes this by using",
      "level": 3,
      "page": 20
    },
    {
      "heading": "visualization. There are lots of diagrams, arrows, and comments on",
      "level": 3,
      "page": 20
    },
    {
      "heading": "almost every page. If I do not understand the text, it’s no problem. The",
      "level": 3,
      "page": 20
    },
    {
      "heading": "diagrams explain things very well.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "' We all have questions we are afraid to ask when we first learn a",
      "level": 3,
      "page": 20
    },
    {
      "heading": "new skill. Maybe we think it’s an easy one. This book is good at",
      "level": 3,
      "page": 20
    },
    {
      "heading": "tackling design patterns from the student’s point of view. It guides us by",
      "level": 3,
      "page": 20
    },
    {
      "heading": "asking our questions and clearly answering them. There is a Guru in",
      "level": 3,
      "page": 20
    },
    {
      "heading": "the book and there’s also a Student.",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Over to you: which book helped you understand a challenging topic?",
      "level": 3,
      "page": 20
    },
    {
      "heading": "Why do you like it?",
      "level": 3,
      "page": 20
    },
    {
      "heading": "A visual guide on how to choose the right Database",
      "level": 2,
      "page": 21
    },
    {
      "heading": "Picking a database is a long-term commitment so the decision",
      "level": 3,
      "page": 21
    },
    {
      "heading": "shouldn’t be made lightly. The important thing to keep in mind is to",
      "level": 3,
      "page": 21
    },
    {
      "heading": "choose the right database for the right job.",
      "level": 3,
      "page": 21
    },
    {
      "heading": "Data can be structured (SQL table schema), semi-structured (JSON,",
      "level": 3,
      "page": 22
    },
    {
      "heading": "XML, etc.), and unstructured (Blob).",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Common database categories include:",
      "level": 3,
      "page": 22
    },
    {
      "heading": "🔹 Relational",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' Columnar",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' Key-value",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' In-memory",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' Wide column",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' Time Series",
      "level": 3,
      "page": 22
    },
    {
      "heading": "' Immutable ledger",
      "level": 3,
      "page": 22
    },
    {
      "heading": "'Geospatial",
      "level": 3,
      "page": 22
    },
    {
      "heading": "'Graph",
      "level": 3,
      "page": 22
    },
    {
      "heading": "'Document",
      "level": 3,
      "page": 22
    },
    {
      "heading": "'Text search",
      "level": 3,
      "page": 22
    },
    {
      "heading": "'Blob",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Thanks, Satish Chandra Gupta",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Over to you - Which database have you used for which workload?",
      "level": 3,
      "page": 22
    },
    {
      "heading": "Do you know how to generate globally unique IDs?",
      "level": 2,
      "page": 23
    },
    {
      "heading": "In this post, we will explore common requirements for IDs that are used",
      "level": 3,
      "page": 23
    },
    {
      "heading": "in social media such as Facebook, Twitter, and LinkedIn.",
      "level": 3,
      "page": 23
    },
    {
      "heading": "Requirements:",
      "level": 3,
      "page": 23
    },
    {
      "heading": "🔹Globally unique",
      "level": 3,
      "page": 23
    },
    {
      "heading": "'Roughly sorted by time",
      "level": 3,
      "page": 23
    },
    {
      "heading": "'Numerical values only",
      "level": 3,
      "page": 23
    },
    {
      "heading": "'64 bits",
      "level": 3,
      "page": 23
    },
    {
      "heading": "'Highly scalable, low latency",
      "level": 3,
      "page": 23
    },
    {
      "heading": "The implementation details of the algorithms can be found online so",
      "level": 3,
      "page": 24
    },
    {
      "heading": "we will not go into detail here.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Over to you: What kind of ID generators have you used?",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 24
    },
    {
      "heading": "How does Twitter work?",
      "level": 2,
      "page": 25
    },
    {
      "heading": "This post is a summary of a tech talk given by Twitter in 2013. Let’s",
      "level": 3,
      "page": 25
    },
    {
      "heading": "take a look.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "𝐓𝐡𝐞 𝐋𝐢𝐟𝐞 𝐨𝐟 𝐚 𝐓𝐰𝐞𝐞𝐭:",
      "level": 3,
      "page": 25
    },
    {
      "heading": "1⃣ A tweet comes in through the Write API.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "2⃣ The Write API routes the request to the Fanout service.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "3⃣ The Fanout service does a lot of processing and stores them in the",
      "level": 3,
      "page": 25
    },
    {
      "heading": "Redis cache.",
      "level": 3,
      "page": 25
    },
    {
      "heading": "4⃣ The Timeline service is used to find the Redis server that has the",
      "level": 3,
      "page": 26
    },
    {
      "heading": "home timeline on it.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "5⃣ A user pulls their home timeline through the Timeline service.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "𝐒𝐞𝐚𝐫𝐜𝐡 & 𝐃𝐢𝐬𝐜𝐨𝐯𝐞𝐫𝐲",
      "level": 3,
      "page": 26
    },
    {
      "heading": "🔹 Ingester: annotates and tokenizes Tweets so the data can be",
      "level": 3,
      "page": 26
    },
    {
      "heading": "indexed.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "' Earlybird: stores search index.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "' Blender: creates the search and discovery timelines.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "𝐏𝐮𝐬𝐡 𝐂𝐨𝐦𝐩𝐮𝐭𝐞",
      "level": 3,
      "page": 26
    },
    {
      "heading": "'HTTP push",
      "level": 3,
      "page": 26
    },
    {
      "heading": "'Mobile push",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Disclaimer: This article is based on the tech talk given by Twitter in",
      "level": 3,
      "page": 26
    },
    {
      "heading": "2013 (https://bit.ly/3vNfjRp). Even though many years have passed, it’s",
      "level": 3,
      "page": 26
    },
    {
      "heading": "still quite relevant. I redraw the diagram as the original diagram is",
      "level": 3,
      "page": 26
    },
    {
      "heading": "difficult to read.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Do you use Twitter? What are some of the biggest differences between",
      "level": 3,
      "page": 26
    },
    {
      "heading": "LinkedIn and Twitter that might shape their system architectures?",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 26
    },
    {
      "heading": "What is the difference between Process and Thread?",
      "level": 2,
      "page": 27
    },
    {
      "heading": "To better understand this question, let’s first take a look at what is a",
      "level": 3,
      "page": 27
    },
    {
      "heading": "Program. A 𝐏𝐫𝐨𝐠𝐫𝐚𝐦 is an executable file containing a set of",
      "level": 3,
      "page": 27
    },
    {
      "heading": "instructions and passively stored on disk. One program can have",
      "level": 3,
      "page": 27
    },
    {
      "heading": "multiple processes. For example, the Chrome browser creates a",
      "level": 3,
      "page": 27
    },
    {
      "heading": "different process for every single tab.",
      "level": 3,
      "page": 27
    },
    {
      "heading": "A 𝐏𝐫𝐨𝐜𝐞𝐬𝐬 means a program is in execution. When a program is loaded",
      "level": 3,
      "page": 27
    },
    {
      "heading": "into the memory and becomes active, the program becomes a",
      "level": 3,
      "page": 27
    },
    {
      "heading": "process. The process requires some essential resources such as",
      "level": 3,
      "page": 27
    },
    {
      "heading": "registers, program counter, and stack.",
      "level": 3,
      "page": 27
    },
    {
      "heading": "A 𝐓𝐡𝐫𝐞𝐚𝐝 is the smallest unit of execution within a process.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "The following process explains the relationship between program,",
      "level": 3,
      "page": 28
    },
    {
      "heading": "process, and thread.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "1. The program contains a set of instructions.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "2. The program is loaded into memory. It becomes one or more",
      "level": 3,
      "page": 28
    },
    {
      "heading": "running processes.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "3. When a process starts, it is assigned memory and resources. A",
      "level": 3,
      "page": 28
    },
    {
      "heading": "process can have one or more threads. For example, in the Microsoft",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Word app, a thread might be responsible for spelling checking and the",
      "level": 3,
      "page": 28
    },
    {
      "heading": "other thread for inserting text into the doc.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Main differences between process and thread:",
      "level": 3,
      "page": 28
    },
    {
      "heading": "🔹 Processes are usually independent, while threads exist as subsets",
      "level": 3,
      "page": 28
    },
    {
      "heading": "of a process.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "' Each process has its own memory space. Threads that belong to",
      "level": 3,
      "page": 28
    },
    {
      "heading": "the same process share the same memory.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "' A process is a heavyweight operation. It takes more time to create",
      "level": 3,
      "page": 28
    },
    {
      "heading": "and terminate.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "' Context switching is more expensive between processes.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "' Inter-thread communication is faster for threads.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Over to you:",
      "level": 3,
      "page": 28
    },
    {
      "heading": "1). Some programming languages support coroutine. What is the",
      "level": 3,
      "page": 28
    },
    {
      "heading": "difference between coroutine and thread?",
      "level": 3,
      "page": 28
    },
    {
      "heading": "2). How to list running processes in Linux?",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 28
    },
    {
      "heading": "Interview Question: design Google Docs",
      "level": 2,
      "page": 29
    },
    {
      "heading": "1⃣ Clients send document editing operations to the WebSocket Server.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "2⃣ The real-time communication is handled by the WebSocket Server.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "3⃣ Documents operations are persisted in the Message Queue.",
      "level": 3,
      "page": 29
    },
    {
      "heading": "4⃣ The File Operation Server consumes operations produced by clients",
      "level": 3,
      "page": 30
    },
    {
      "heading": "and generates transformed operations using collaboration algorithms.",
      "level": 3,
      "page": 30
    },
    {
      "heading": "5⃣ Three types of data are stored: file metadata, file content, and",
      "level": 3,
      "page": 30
    },
    {
      "heading": "operations.",
      "level": 3,
      "page": 30
    },
    {
      "heading": "One of the biggest challenges is real-time conflict resolution. Common",
      "level": 3,
      "page": 30
    },
    {
      "heading": "algorithms include:",
      "level": 3,
      "page": 30
    },
    {
      "heading": "🔹 Operational transformation (OT)",
      "level": 3,
      "page": 30
    },
    {
      "heading": "' Differential Synchronization (DS)",
      "level": 3,
      "page": 30
    },
    {
      "heading": "' Conflict-free replicated data type (CRDT)",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Google Doc uses OT according to its Wikipedia page and CRDT is an",
      "level": 3,
      "page": 30
    },
    {
      "heading": "active area of research for real-time concurrent editing.",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Over to you - Have you encountered any issues while using Google",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Docs? If so, what do you think might have caused the issue?",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 30
    },
    {
      "heading": "Deployment strategies",
      "level": 2,
      "page": 31
    },
    {
      "heading": "Deploying or upgrading services is risky. In this post, we explore risk",
      "level": 3,
      "page": 31
    },
    {
      "heading": "mitigation strategies.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "The diagram below illustrates the common ones.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "𝐌𝐮𝐥𝐭𝐢-𝐒𝐞𝐫𝐯𝐢𝐜𝐞 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭",
      "level": 3,
      "page": 31
    },
    {
      "heading": "In this model, we deploy new changes to multiple services",
      "level": 3,
      "page": 31
    },
    {
      "heading": "simultaneously. This approach is easy to implement. But since all the",
      "level": 3,
      "page": 31
    },
    {
      "heading": "services are upgraded at the same time, it is hard to manage and test",
      "level": 3,
      "page": 31
    },
    {
      "heading": "dependencies. It’s also hard to rollback safely.",
      "level": 3,
      "page": 31
    },
    {
      "heading": "𝐁𝐥𝐮𝐞-𝐆𝐫𝐞𝐞𝐧 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭",
      "level": 3,
      "page": 32
    },
    {
      "heading": "With blue-green deployment, we have two identical environments: one",
      "level": 3,
      "page": 32
    },
    {
      "heading": "is staging (blue) and the other is production (green). The staging",
      "level": 3,
      "page": 32
    },
    {
      "heading": "environment is one version ahead of production. Once testing is done",
      "level": 3,
      "page": 32
    },
    {
      "heading": "in the staging environment, user traffic is switched to the staging",
      "level": 3,
      "page": 32
    },
    {
      "heading": "environment, and the staging becomes the production. This",
      "level": 3,
      "page": 32
    },
    {
      "heading": "deployment strategy is simple to perform rollback, but having two",
      "level": 3,
      "page": 32
    },
    {
      "heading": "identical production quality environments could be expensive.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "𝐂𝐚𝐧𝐚𝐫𝐲 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭",
      "level": 3,
      "page": 32
    },
    {
      "heading": "A canary deployment upgrades services gradually, each time to a",
      "level": 3,
      "page": 32
    },
    {
      "heading": "subset of users. It is cheaper than blue-green deployment and easy to",
      "level": 3,
      "page": 32
    },
    {
      "heading": "perform rollback. However, since there is no staging environment, we",
      "level": 3,
      "page": 32
    },
    {
      "heading": "have to test on production. This process is more complicated because",
      "level": 3,
      "page": 32
    },
    {
      "heading": "we need to monitor the canary while gradually migrating more and",
      "level": 3,
      "page": 32
    },
    {
      "heading": "more users away from the old version.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "𝐀/𝐁 𝐓𝐞𝐬𝐭",
      "level": 3,
      "page": 32
    },
    {
      "heading": "In the A/B test, different versions of services run in production",
      "level": 3,
      "page": 32
    },
    {
      "heading": "simultaneously. Each version runs an “experiment” for a subset of",
      "level": 3,
      "page": 32
    },
    {
      "heading": "users. A/B test is a cheap method to test new features in production.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "We need to control the deployment process in case some features are",
      "level": 3,
      "page": 32
    },
    {
      "heading": "pushed to users by accident.",
      "level": 3,
      "page": 32
    },
    {
      "heading": "Over to you - Which deployment strategy have you used? Did you",
      "level": 3,
      "page": 32
    },
    {
      "heading": "witness any deployment-related outages in production and why did",
      "level": 3,
      "page": 32
    },
    {
      "heading": "they happen?",
      "level": 3,
      "page": 32
    },
    {
      "heading": "Flowchart of how slack decides to send a notification",
      "level": 2,
      "page": 33
    },
    {
      "heading": "It is a great example of why a simple feature may take much longer to",
      "level": 3,
      "page": 33
    },
    {
      "heading": "develop than many people think.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "When we have a great design, users may not notice the complexity",
      "level": 3,
      "page": 33
    },
    {
      "heading": "because it feels like the feature is just working as intended.",
      "level": 3,
      "page": 33
    },
    {
      "heading": "What’s your takeaway from this diagram?",
      "level": 3,
      "page": 33
    },
    {
      "heading": "Image source:",
      "level": 3,
      "page": 33
    },
    {
      "heading": "https://slack.engineering/reducing-slacks-memory-footprint/",
      "level": 3,
      "page": 33
    },
    {
      "heading": "How does Amazon build and operate the software?",
      "level": 2,
      "page": 34
    },
    {
      "heading": "In 2019, Amazon released The Amazon Builders' Library. It contains",
      "level": 3,
      "page": 34
    },
    {
      "heading": "architecture-based articles that describe how Amazon architects,",
      "level": 3,
      "page": 34
    },
    {
      "heading": "releases, and operates technology.",
      "level": 3,
      "page": 34
    },
    {
      "heading": "As of today, it published 26 articles. It took me two weekends to go",
      "level": 3,
      "page": 34
    },
    {
      "heading": "through all the articles. I’ve had great fun and learned a lot. Here are",
      "level": 3,
      "page": 34
    },
    {
      "heading": "some of my favorites:",
      "level": 3,
      "page": 34
    },
    {
      "heading": "🔹Making retries safe with idempotent APIs",
      "level": 3,
      "page": 34
    },
    {
      "heading": "'Timeouts, retries, and backoff with jitter",
      "level": 3,
      "page": 34
    },
    {
      "heading": "'Beyond five 9s: Lessons from our highest available data planes",
      "level": 3,
      "page": 34
    },
    {
      "heading": "'Caching challenges and strategies",
      "level": 3,
      "page": 34
    },
    {
      "heading": "'Ensuring rollback safety during deployments",
      "level": 3,
      "page": 34
    },
    {
      "heading": "'Going faster with continuous delivery",
      "level": 3,
      "page": 34
    },
    {
      "heading": "🔹Challenges with distributed systems",
      "level": 3,
      "page": 35
    },
    {
      "heading": "'Amazon's approach to high-availability deployment",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Over to you: what’s your favorite place to learn system design and",
      "level": 3,
      "page": 35
    },
    {
      "heading": "design principles?",
      "level": 3,
      "page": 35
    },
    {
      "heading": "Link to The Amazon Builders' Library: aws.amazon.com/builders-library",
      "level": 3,
      "page": 35
    },
    {
      "heading": "How to design a secure web API access for your",
      "level": 2,
      "page": 36
    },
    {
      "heading": "website?",
      "level": 2,
      "page": 36
    },
    {
      "heading": "When we open web API access to users, we need to make sure each",
      "level": 3,
      "page": 36
    },
    {
      "heading": "API call is authenticated. This means the user must be who they claim",
      "level": 3,
      "page": 36
    },
    {
      "heading": "to be.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "In this post, we explore two common ways:",
      "level": 3,
      "page": 36
    },
    {
      "heading": "1. Token based authentication",
      "level": 3,
      "page": 36
    },
    {
      "heading": "2. HMAC (Hash-based Message Authentication Code) authentication",
      "level": 3,
      "page": 36
    },
    {
      "heading": "The diagram below illustrates how they work.",
      "level": 3,
      "page": 36
    },
    {
      "heading": "𝐓𝐨𝐤𝐞𝐧 𝐛𝐚𝐬𝐞𝐝",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Step 1 - the user enters their password into the client, and the client",
      "level": 3,
      "page": 37
    },
    {
      "heading": "sends the password to the Authentication Server.",
      "level": 3,
      "page": 37
    },
    {
      "heading": "Step 2 - the Authentication Server authenticates the credentials and",
      "level": 3,
      "page": 38
    },
    {
      "heading": "generates a token with an expiry time.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Steps 3 and 4 - now the client can send requests to access server",
      "level": 3,
      "page": 38
    },
    {
      "heading": "resources with the token in the HTTP header. This access is valid until",
      "level": 3,
      "page": 38
    },
    {
      "heading": "the token expires.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "𝐇𝐌𝐀𝐂 𝐛𝐚𝐬𝐞𝐝",
      "level": 3,
      "page": 38
    },
    {
      "heading": "This mechanism generates a Message Authentication Code",
      "level": 3,
      "page": 38
    },
    {
      "heading": "(signature) by using a hash function (SHA256 or MD5).",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Steps 1 and 2 - the server generates two keys, one is Public APP ID",
      "level": 3,
      "page": 38
    },
    {
      "heading": "(public key) and the other one is API Key (private key).",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Step 3 - we now generate a HMAC signature on the client side (hmac",
      "level": 3,
      "page": 38
    },
    {
      "heading": "A). This signature is generated with a set of attributes listed in the",
      "level": 3,
      "page": 38
    },
    {
      "heading": "diagram.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Step 4 - the client sends requests to access server resources with",
      "level": 3,
      "page": 38
    },
    {
      "heading": "hmac A in the HTTP header.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Step 5 - the server receives the request which contains the request",
      "level": 3,
      "page": 38
    },
    {
      "heading": "data and the authentication header. It extracts the necessary attributes",
      "level": 3,
      "page": 38
    },
    {
      "heading": "from the request and uses the API key that’s stored on the server side",
      "level": 3,
      "page": 38
    },
    {
      "heading": "to generate a signature (hmac B.)",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Steps 6 and 7 - the server compares hmac A (generated on the client",
      "level": 3,
      "page": 38
    },
    {
      "heading": "side) and hmac B (generated on the server side). If they are matched,",
      "level": 3,
      "page": 38
    },
    {
      "heading": "the requested resource will be returned to the client.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Question - How does HMAC authentication ensure data integrity? Why",
      "level": 3,
      "page": 38
    },
    {
      "heading": "do we include “request timestamp” in HMAC signature generation?",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 38
    },
    {
      "heading": "How do microservices collaborate and interact with each",
      "level": 2,
      "page": 39
    },
    {
      "heading": "other?",
      "level": 2,
      "page": 39
    },
    {
      "heading": "There are two ways: 𝐨𝐫𝐜𝐡𝐞𝐬𝐭𝐫𝐚𝐭𝐢𝐨𝐧 and 𝐜𝐡𝐨𝐫𝐞𝐨𝐠𝐫𝐚𝐩𝐡𝐲.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "The diagram below illustrates the collaboration of microservices.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Choreography is like having a choreographer set all the rules. Then the",
      "level": 3,
      "page": 39
    },
    {
      "heading": "dancers on stage (the microservices) interact according to them.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Service choreography describes this exchange of messages and the",
      "level": 3,
      "page": 39
    },
    {
      "heading": "rules by which the microservices interact.",
      "level": 3,
      "page": 39
    },
    {
      "heading": "Orchestration is different. The orchestrator acts as a center of",
      "level": 3,
      "page": 39
    },
    {
      "heading": "authority. It is responsible for invoking and combining the services. It",
      "level": 3,
      "page": 39
    },
    {
      "heading": "describes the interactions between all the participating services. It is",
      "level": 3,
      "page": 40
    },
    {
      "heading": "just like a conductor leading the musicians in a musical symphony. The",
      "level": 3,
      "page": 40
    },
    {
      "heading": "orchestration pattern also includes the transaction management",
      "level": 3,
      "page": 40
    },
    {
      "heading": "among different services.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "The benefits of orchestration:",
      "level": 3,
      "page": 40
    },
    {
      "heading": "1. Reliability - orchestration has built-in transaction management and",
      "level": 3,
      "page": 40
    },
    {
      "heading": "error handling, while choreography is point-to-point communications",
      "level": 3,
      "page": 40
    },
    {
      "heading": "and the fault tolerance scenarios are much more complicated.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "2. Scalability - when adding a new service into orchestration, only the",
      "level": 3,
      "page": 40
    },
    {
      "heading": "orchestrator needs to modify the interaction rules, while in",
      "level": 3,
      "page": 40
    },
    {
      "heading": "choreography all the interacting services need to be modified.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Some limitations of orchestration:",
      "level": 3,
      "page": 40
    },
    {
      "heading": "1. Performance - all the services talk via a centralized orchestrator, so",
      "level": 3,
      "page": 40
    },
    {
      "heading": "latency is higher than it is with choreography. Also, the throughput is",
      "level": 3,
      "page": 40
    },
    {
      "heading": "bound to the capacity of the orchestrator.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "2. Single point of failure - if the orchestrator goes down, no services",
      "level": 3,
      "page": 40
    },
    {
      "heading": "can talk to each other. To mitigate this, the orchestrator must be highly",
      "level": 3,
      "page": 40
    },
    {
      "heading": "available.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Real-world use case: Netflix Conductor is a microservice orchestrator",
      "level": 3,
      "page": 40
    },
    {
      "heading": "and you can read more details on the orchestrator design.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Question - Have you used orchestrator products in production? What",
      "level": 3,
      "page": 40
    },
    {
      "heading": "are their pros & cons?",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 40
    },
    {
      "heading": "What are the differences between Virtualization",
      "level": 2,
      "page": 41
    },
    {
      "heading": "(VMware) and Containerization (Docker)?",
      "level": 2,
      "page": 41
    },
    {
      "heading": "The diagram below illustrates the layered architecture of virtualization",
      "level": 3,
      "page": 41
    },
    {
      "heading": "and containerization.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "“Virtualization is a technology that allows you to create multiple",
      "level": 3,
      "page": 41
    },
    {
      "heading": "simulated environments or dedicated resources from a single, physical",
      "level": 3,
      "page": 41
    },
    {
      "heading": "hardware system” [1].",
      "level": 3,
      "page": 41
    },
    {
      "heading": "“Containerization is the packaging together of software code with all its",
      "level": 3,
      "page": 41
    },
    {
      "heading": "necessary components like libraries, frameworks, and other",
      "level": 3,
      "page": 41
    },
    {
      "heading": "dependencies so that they are isolated in their own \"container\" [2].",
      "level": 3,
      "page": 41
    },
    {
      "heading": "The major differences are:",
      "level": 3,
      "page": 41
    },
    {
      "heading": "🔹 In virtualization, the hypervisor creates an abstraction layer over",
      "level": 3,
      "page": 41
    },
    {
      "heading": "hardware, so that multiple operating systems can run alongside each",
      "level": 3,
      "page": 41
    },
    {
      "heading": "other. This technique is considered to be the first generation of cloud",
      "level": 3,
      "page": 41
    },
    {
      "heading": "computing.",
      "level": 3,
      "page": 41
    },
    {
      "heading": "'Containerization is considered to be a lightweight version of",
      "level": 3,
      "page": 41
    },
    {
      "heading": "virtualization, which virtualizes the operating system instead of",
      "level": 3,
      "page": 41
    },
    {
      "heading": "hardware. Without the hypervisor, the containers enjoy faster resource",
      "level": 3,
      "page": 41
    },
    {
      "heading": "provisioning. All the resources (including code, dependencies) that are",
      "level": 3,
      "page": 41
    },
    {
      "heading": "needed to run the application or microservice are packaged together,",
      "level": 3,
      "page": 42
    },
    {
      "heading": "so that the applications can run anywhere.",
      "level": 3,
      "page": 42
    },
    {
      "heading": "Question: how much performance differences have you observed in",
      "level": 3,
      "page": 42
    },
    {
      "heading": "production between virtualization, containerization, and bare-metal?",
      "level": 3,
      "page": 42
    },
    {
      "heading": "Image Source: https://lnkd.in/gaPYcGTz",
      "level": 3,
      "page": 42
    },
    {
      "heading": "Sources:",
      "level": 3,
      "page": 42
    },
    {
      "heading": "[1] Understanding virtualization: https://lnkd.in/gtQY9gkx",
      "level": 3,
      "page": 42
    },
    {
      "heading": "[2] What is containerization?: https://lnkd.in/gm4Qv_x2",
      "level": 3,
      "page": 42
    },
    {
      "heading": "Which cloud provider should be used when building a",
      "level": 2,
      "page": 43
    },
    {
      "heading": "big data solution?",
      "level": 2,
      "page": 43
    },
    {
      "heading": "The diagram below illustrates the detailed comparison of AWS, Google",
      "level": 3,
      "page": 43
    },
    {
      "heading": "Cloud, and Microsoft Azure.",
      "level": 3,
      "page": 43
    },
    {
      "heading": "The common parts of the solutions:",
      "level": 3,
      "page": 44
    },
    {
      "heading": "1. Data ingestion of structured or unstructured data.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "2. Raw data storage.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "3. Data processing, including filtering, transformation, normalization,",
      "level": 3,
      "page": 44
    },
    {
      "heading": "etc.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "4. Data warehouse, including key-value storage, relational database,",
      "level": 3,
      "page": 44
    },
    {
      "heading": "OLAP database, etc.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "5. Presentation layer with dashboards and real-time notifications.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "It is interesting to see different cloud vendors have different names for",
      "level": 3,
      "page": 44
    },
    {
      "heading": "the same type of products.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "For example, the first step and the last step both use the serverless",
      "level": 3,
      "page": 44
    },
    {
      "heading": "product. The product is called “lambda” in AWS, and “function” in",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Azure and Google Cloud.",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Question - which products have you used in production? What kind of",
      "level": 3,
      "page": 44
    },
    {
      "heading": "application did you use it for?",
      "level": 3,
      "page": 44
    },
    {
      "heading": "Source: S.C. Gupta’s post",
      "level": 3,
      "page": 44
    },
    {
      "heading": "How to avoid crawling duplicate URLs at Google scale?",
      "level": 2,
      "page": 45
    },
    {
      "heading": "Option 1: Use a Set data structure to check if a URL already exists or",
      "level": 3,
      "page": 45
    },
    {
      "heading": "not. Set is fast, but it is not space-efficient.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "Option 2: Store URLs in a database and check if a new URL is in the",
      "level": 3,
      "page": 45
    },
    {
      "heading": "database. This can work but the load to the database will be very high.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "Option 3: 𝐁𝐥𝐨𝐨𝐦 𝐟𝐢𝐥𝐭𝐞𝐫. This option is preferred. Bloom filter was",
      "level": 3,
      "page": 45
    },
    {
      "heading": "proposed by Burton Howard Bloom in 1970. It is a probabilistic data",
      "level": 3,
      "page": 45
    },
    {
      "heading": "structure that is used to test whether an element is a member of a set.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "🔹false: the element is definitely not in the set.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "' true: the element is probably in the set.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "False-positive matches are possible, but false negatives are not.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "The diagram below illustrates how the Bloom filter works. The basic",
      "level": 3,
      "page": 45
    },
    {
      "heading": "data structure for the Bloom filter is Bit Vector. Each bit represents a",
      "level": 3,
      "page": 45
    },
    {
      "heading": "hashed value.",
      "level": 3,
      "page": 45
    },
    {
      "heading": "Step 1: To add an element to the bloom filter, we feed it to 3 different",
      "level": 3,
      "page": 46
    },
    {
      "heading": "hash functions (A, B, and C) and set the bits at the resulting positions.",
      "level": 3,
      "page": 46
    },
    {
      "heading": "Note that both “www.myweb1.com” and “www.myweb2.com” mark the",
      "level": 3,
      "page": 46
    },
    {
      "heading": "same bit with 1 at index 5. False positives are possible because a bit",
      "level": 3,
      "page": 46
    },
    {
      "heading": "might be set by another element.",
      "level": 3,
      "page": 46
    },
    {
      "heading": "Step 2: When testing the existence of a URL string, the same hash",
      "level": 3,
      "page": 46
    },
    {
      "heading": "functions A, B, and C are applied to the URL string. If all three bits are",
      "level": 3,
      "page": 46
    },
    {
      "heading": "1, then the URL may exist in the dataset; if any of the bits is 0, then the",
      "level": 3,
      "page": 47
    },
    {
      "heading": "URL definitely does not exist in the dataset.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Hash function choices are important. They must be uniformly",
      "level": 3,
      "page": 47
    },
    {
      "heading": "distributed and fast. For example, RedisBloom and Apache Spark use",
      "level": 3,
      "page": 47
    },
    {
      "heading": "murmur, and InfluxDB uses xxhash.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Question - In our example, we used three hash functions. How many",
      "level": 3,
      "page": 47
    },
    {
      "heading": "hash functions should we use in reality? What are the trade-offs?",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 47
    },
    {
      "heading": "Why is a solid-state drive (SSD) fast?",
      "level": 2,
      "page": 48
    },
    {
      "heading": "“A solid state drive reads up to 10 times faster and writes up to 20",
      "level": 3,
      "page": 48
    },
    {
      "heading": "times faster than a hard disk drive.” [1].",
      "level": 3,
      "page": 48
    },
    {
      "heading": "“An SSD is a flash-memory based data storage device. Bits are stored",
      "level": 3,
      "page": 48
    },
    {
      "heading": "into cells, which are made of floating-gate transistors. SSDs are made",
      "level": 3,
      "page": 48
    },
    {
      "heading": "entirely of electronic components, there are no moving or mechanical",
      "level": 3,
      "page": 48
    },
    {
      "heading": "parts like in hard drives (HDD)” [2].",
      "level": 3,
      "page": 48
    },
    {
      "heading": "The diagram below illustrates the SSD architecture.",
      "level": 3,
      "page": 48
    },
    {
      "heading": "Step 1: “Commands come from the user through the host interface” [2].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "The interface can be Serial ATA (SATA) or PCI Express (PCIe).",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Step 2: “The processor in the SSD controller takes the commands and",
      "level": 3,
      "page": 49
    },
    {
      "heading": "passes them to the flash controller” [2].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Step 3: “SSDs also have embedded RAM memory, generally for",
      "level": 3,
      "page": 49
    },
    {
      "heading": "caching purposes and to store mapping information” [2].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Step 4: “The packages of NAND flash memory are organized in gangs,",
      "level": 3,
      "page": 49
    },
    {
      "heading": "over multiple channels” [2].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "The second diagram illustrates how the logical and physical pages are",
      "level": 3,
      "page": 49
    },
    {
      "heading": "mapped, and why this architecture is fast.",
      "level": 3,
      "page": 49
    },
    {
      "heading": "SSD controller operates multiple FLASH particles in parallel, greatly",
      "level": 3,
      "page": 49
    },
    {
      "heading": "improving the underlying bandwidth. When we need to write more than",
      "level": 3,
      "page": 49
    },
    {
      "heading": "one page, the SSD controller can write them in parallel [3], whereas",
      "level": 3,
      "page": 49
    },
    {
      "heading": "the HDD has a single head and it can only read from one head at a",
      "level": 3,
      "page": 49
    },
    {
      "heading": "time.",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Every time a HOST Page is written, the SSD controller finds a Physical",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Page to write the data and this mapping is recorded. With this",
      "level": 3,
      "page": 49
    },
    {
      "heading": "mapping, the next time HOST reads a HOST Page, the SSD knows",
      "level": 3,
      "page": 49
    },
    {
      "heading": "where to read the data from FLASH [3].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Question - What are the main differences between SSD and HDD?",
      "level": 3,
      "page": 49
    },
    {
      "heading": "If you are interested in the architecture, I recommend reading Coding",
      "level": 3,
      "page": 49
    },
    {
      "heading": "for SSDs by Emmanuel Goossaert in reference [2].",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Sources:",
      "level": 3,
      "page": 49
    },
    {
      "heading": "[1] SSD or HDD: Which Is Right for You?:",
      "level": 3,
      "page": 49
    },
    {
      "heading": "https://www.avg.com/en/signal/ssd-hdd-which-is-best",
      "level": 3,
      "page": 49
    },
    {
      "heading": "[2] Coding for SSDs:",
      "level": 3,
      "page": 49
    },
    {
      "heading": "https://codecapsule.com/2014/02/12/coding-for-ssds-part-1-introductio",
      "level": 3,
      "page": 49
    },
    {
      "heading": "n-and-table-of-contents/",
      "level": 3,
      "page": 49
    },
    {
      "heading": "[3] Overview of SSD Structure and Basic Working Principle:",
      "level": 3,
      "page": 49
    },
    {
      "heading": "https://www.elinfor.com/knowledge/overview-of-ssd-structure-and-basic",
      "level": 3,
      "page": 49
    },
    {
      "heading": "-working-principle1-p-11203",
      "level": 3,
      "page": 49
    },
    {
      "heading": "Handling a large-scale outage",
      "level": 2,
      "page": 50
    },
    {
      "heading": "This is a true story about handling a large-scale outage written by Staff",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Engineers at Discord Sahn Lam.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "About 10 years ago, I witnessed the most impactful UI bugs in my",
      "level": 3,
      "page": 50
    },
    {
      "heading": "career.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "It was 9PM on a Friday. I was on the team responsible for one of the",
      "level": 3,
      "page": 50
    },
    {
      "heading": "largest social games at the time. It had about 30 million DAU. I just so",
      "level": 3,
      "page": 50
    },
    {
      "heading": "happened to glance at the operational dashboard before shutting down",
      "level": 3,
      "page": 50
    },
    {
      "heading": "for the night.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Every line on the dashboard was at zero.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "At that very moment, I got a phone call from my boss. He said the",
      "level": 3,
      "page": 50
    },
    {
      "heading": "entire game was down. Firefighting mode. Full on.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Everything had shut down. Every single instance on AWS was",
      "level": 3,
      "page": 50
    },
    {
      "heading": "terminated. HA proxy instances, PHP web servers, MySQL databases,",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Memcache nodes, everything.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "It took 50 people 10 hours to bring everything back up. It was quite a",
      "level": 3,
      "page": 50
    },
    {
      "heading": "feat. That in itself is a story for another day.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "We used a cloud management software vendor to manage our AWS",
      "level": 3,
      "page": 50
    },
    {
      "heading": "deployment. This was before Infrastructure as Code was a thing. There",
      "level": 3,
      "page": 50
    },
    {
      "heading": "was no Terraform. It was so early in cloud computing and we were so",
      "level": 3,
      "page": 50
    },
    {
      "heading": "big that AWS required an advanced warning before we scaled up.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "What had gone wrong? The software vendor had introduced a bug that",
      "level": 3,
      "page": 50
    },
    {
      "heading": "week in their confirmation dialog flow. When terminating a subset of",
      "level": 3,
      "page": 50
    },
    {
      "heading": "nodes in the UI, it would correctly show in the confirmation dialog box",
      "level": 3,
      "page": 50
    },
    {
      "heading": "the list of nodes to be terminated, but under the hood, it terminated",
      "level": 3,
      "page": 50
    },
    {
      "heading": "everything.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "Shortly before 9PM that fateful evening, one of our poor SREs fulfilled",
      "level": 3,
      "page": 50
    },
    {
      "heading": "our routine request and terminated an unused Memcache pool. I could",
      "level": 3,
      "page": 50
    },
    {
      "heading": "only imagine the horror and the phone conversation that ensured.",
      "level": 3,
      "page": 50
    },
    {
      "heading": "What kind of code structure could allow this disastrous bug to slip",
      "level": 3,
      "page": 51
    },
    {
      "heading": "through? We could only guess. We never received a full explanation.",
      "level": 3,
      "page": 51
    },
    {
      "heading": "What are some of the most impactful software bugs you encountered",
      "level": 3,
      "page": 51
    },
    {
      "heading": "in your career?",
      "level": 3,
      "page": 51
    },
    {
      "heading": "AWS Lambda behind the scenes",
      "level": 2,
      "page": 52
    },
    {
      "heading": "Serverless is one of the hottest topics in cloud services. How does",
      "level": 3,
      "page": 52
    },
    {
      "heading": "AWS Lambda work behind the scenes?",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Lambda is a 𝐬𝐞𝐫𝐯𝐞𝐫𝐥𝐞𝐬𝐬 computing service provided by Amazon Web",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Services (AWS), which runs functions in response to events.",
      "level": 3,
      "page": 52
    },
    {
      "heading": "𝐅𝐢𝐫𝐞𝐜𝐫𝐚𝐜𝐤𝐞𝐫 𝐌𝐢𝐜𝐫𝐨𝐕𝐌",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Firecracker is the engine powering all of the Lambda functions [1]. It is",
      "level": 3,
      "page": 52
    },
    {
      "heading": "a virtualization technology developed at Amazon and written in Rust.",
      "level": 3,
      "page": 52
    },
    {
      "heading": "The diagram below illustrates the isolation model for AWS Lambda",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Workers.",
      "level": 3,
      "page": 52
    },
    {
      "heading": "Lambda functions run within a sandbox, which provides a minimal",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Linux userland, some common libraries and utilities. It creates the",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Execution environment (worker) on EC2 instances.",
      "level": 3,
      "page": 53
    },
    {
      "heading": "How are lambdas initiated and invoked? There are two ways.",
      "level": 3,
      "page": 53
    },
    {
      "heading": "𝐒𝐲𝐧𝐜𝐡𝐫𝐨𝐧𝐨𝐮𝐬 𝐞𝐱𝐞𝐜𝐮𝐭𝐢𝐨𝐧",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Step1: \"The Worker Manager communicates with a Placement Service",
      "level": 3,
      "page": 53
    },
    {
      "heading": "which is responsible to place a workload on a location for the given",
      "level": 3,
      "page": 53
    },
    {
      "heading": "host (it’s provisioning the sandbox) and returns that to the Worker",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Manager\" [2].",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Step 2: \"The Worker Manager can then call 𝘐𝘯𝘪𝘵 to initialize the function",
      "level": 3,
      "page": 53
    },
    {
      "heading": "for execution by downloading the Lambda package from S3 and",
      "level": 3,
      "page": 53
    },
    {
      "heading": "setting up the Lambda runtime\" [2]",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Step 3: The Frontend Worker is now able to call 𝘐𝘯𝘷𝘰𝘬𝘦 [2].",
      "level": 3,
      "page": 53
    },
    {
      "heading": "𝐀𝐬𝐲𝐧𝐜𝐡𝐫𝐨𝐧𝐨𝐮𝐬 𝐞𝐱𝐞𝐜𝐮𝐭𝐢𝐨𝐧",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Step 1: The Application Load Balancer forwards the invocation to an",
      "level": 3,
      "page": 53
    },
    {
      "heading": "available Frontend which places the event onto an internal",
      "level": 3,
      "page": 53
    },
    {
      "heading": "queue(SQS).",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Step 2:  There is \"a set of pollers assigned to this internal queue which",
      "level": 3,
      "page": 53
    },
    {
      "heading": "are responsible for polling it and moving the event onto a Frontend",
      "level": 3,
      "page": 53
    },
    {
      "heading": "synchronously. After it’s been placed onto the Frontend it follows the",
      "level": 3,
      "page": 53
    },
    {
      "heading": "synchronous invocation call pattern which we covered earlier\" [2].",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Question: Can you think of any use cases for AWS Lambda?",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Sources:",
      "level": 3,
      "page": 53
    },
    {
      "heading": "[1] AWS Lambda whitepaper:",
      "level": 3,
      "page": 53
    },
    {
      "heading": "https://docs.aws.amazon.com/whitepapers/latest/security-overview-aw",
      "level": 3,
      "page": 53
    },
    {
      "heading": "s-lambda/lambda-executions.html",
      "level": 3,
      "page": 53
    },
    {
      "heading": "[2] Behind the scenes, Lambda:",
      "level": 3,
      "page": 53
    },
    {
      "heading": "https://www.bschaatsbergen.com/behind-the-scenes-lambda/",
      "level": 3,
      "page": 53
    },
    {
      "heading": "Image source: [1] [2]",
      "level": 3,
      "page": 53
    },
    {
      "heading": "HTTP 1.0 -> HTTP 1.1 -> HTTP 2.0 -> HTTP 3.0 (QUIC).",
      "level": 2,
      "page": 54
    },
    {
      "heading": "What problem does each generation of HTTP solve?",
      "level": 3,
      "page": 54
    },
    {
      "heading": "The diagram below illustrates the key features.",
      "level": 3,
      "page": 54
    },
    {
      "heading": "🔹HTTP 1.0 was finalized and fully documented in 1996. Every",
      "level": 3,
      "page": 54
    },
    {
      "heading": "request to the same server requires a separate TCP connection.",
      "level": 3,
      "page": 54
    },
    {
      "heading": "'HTTP 1.1 was published in 1997. A TCP connection can be left",
      "level": 3,
      "page": 54
    },
    {
      "heading": "open for reuse (persistent connection), but it doesn’t solve the HOL",
      "level": 3,
      "page": 54
    },
    {
      "heading": "(head-of-line) blocking issue.",
      "level": 3,
      "page": 54
    },
    {
      "heading": "HOL blocking - when the number of allowed parallel requests in the",
      "level": 3,
      "page": 54
    },
    {
      "heading": "browser is used up, subsequent requests need to wait for the former",
      "level": 3,
      "page": 54
    },
    {
      "heading": "ones to complete.",
      "level": 3,
      "page": 54
    },
    {
      "heading": "🔹HTTP 2.0 was published in 2015. It addresses HOL issue through",
      "level": 3,
      "page": 55
    },
    {
      "heading": "request multiplexing, which eliminates HOL blocking at the application",
      "level": 3,
      "page": 55
    },
    {
      "heading": "layer, but HOL still exists at the transport (TCP) layer.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "As you can see in the diagram, HTTP 2.0 introduced the concept of",
      "level": 3,
      "page": 55
    },
    {
      "heading": "HTTP “streams”: an abstraction that allows multiplexing different HTTP",
      "level": 3,
      "page": 55
    },
    {
      "heading": "exchanges onto the same TCP connection. Each stream doesn’t need",
      "level": 3,
      "page": 55
    },
    {
      "heading": "to be sent in order.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "'HTTP 3.0 first draft was published in 2020. It is the proposed",
      "level": 3,
      "page": 55
    },
    {
      "heading": "successor to HTTP 2.0. It uses QUIC instead of TCP for the underlying",
      "level": 3,
      "page": 55
    },
    {
      "heading": "transport protocol, thus removing HOL blocking in the transport layer.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "QUIC is based on UDP. It introduces streams as first-class citizens at",
      "level": 3,
      "page": 55
    },
    {
      "heading": "the transport layer. QUIC streams share the same QUIC connection,",
      "level": 3,
      "page": 55
    },
    {
      "heading": "so no additional handshakes and slow starts are required to create",
      "level": 3,
      "page": 55
    },
    {
      "heading": "new ones, but QUIC streams are delivered independently such that in",
      "level": 3,
      "page": 55
    },
    {
      "heading": "most cases packet loss affecting one stream doesn't affect others.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Question: When shall we upgrade to HTTP 3.0? Any pros & cons you",
      "level": 3,
      "page": 55
    },
    {
      "heading": "can think of?",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 55
    },
    {
      "heading": "How to scale a website to support millions of users?",
      "level": 2,
      "page": 56
    },
    {
      "heading": "We will explain this step-by-step.",
      "level": 3,
      "page": 56
    },
    {
      "heading": "The diagram below illustrates the evolution of a simplified eCommerce",
      "level": 3,
      "page": 56
    },
    {
      "heading": "website. It goes from a monolithic design on one single server, to a",
      "level": 3,
      "page": 56
    },
    {
      "heading": "service-oriented/microservice architecture.",
      "level": 3,
      "page": 56
    },
    {
      "heading": "Suppose we have two services: inventory service (handles product",
      "level": 3,
      "page": 58
    },
    {
      "heading": "descriptions and inventory management) and user service (handles",
      "level": 3,
      "page": 58
    },
    {
      "heading": "user information, registration, login, etc.).",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 1 - With the growth of the user base, one single application server",
      "level": 3,
      "page": 58
    },
    {
      "heading": "cannot handle the traffic anymore. We put the application server and",
      "level": 3,
      "page": 58
    },
    {
      "heading": "the database server into two separate servers.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 2 - The business continues to grow, and a single application",
      "level": 3,
      "page": 58
    },
    {
      "heading": "server is no longer enough. So we deploy a cluster of application",
      "level": 3,
      "page": 58
    },
    {
      "heading": "servers.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 3 - Now the incoming requests have to be routed to multiple",
      "level": 3,
      "page": 58
    },
    {
      "heading": "application servers, how can we ensure each application server gets",
      "level": 3,
      "page": 58
    },
    {
      "heading": "an even load? The load balancer handles this nicely.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 4 - With the business continuing to grow, the database might",
      "level": 3,
      "page": 58
    },
    {
      "heading": "become the bottleneck. To mitigate this, we separate reads and writes",
      "level": 3,
      "page": 58
    },
    {
      "heading": "in a way that frequent read queries go to read replicas. With this setup,",
      "level": 3,
      "page": 58
    },
    {
      "heading": "the throughput for the database writes can be greatly increased.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 5 - Suppose the business continues to grow. One single database",
      "level": 3,
      "page": 58
    },
    {
      "heading": "cannot handle the load on both the inventory table and user table. We",
      "level": 3,
      "page": 58
    },
    {
      "heading": "have a few options:",
      "level": 3,
      "page": 58
    },
    {
      "heading": "1. Vertical partition. Adding more power (CPU, RAM, etc.) to the",
      "level": 3,
      "page": 58
    },
    {
      "heading": "database server. It has a hard limit.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "2. Horizontal partition by adding more database servers.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "3. Adding a caching layer to offload read requests.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Step 6 - Now we can modularize the functions into different services.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "The architecture becomes service-oriented / microservice.",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Question: what else do we need to support an e-commerce website at",
      "level": 3,
      "page": 58
    },
    {
      "heading": "Amazon’s scale?",
      "level": 3,
      "page": 58
    },
    {
      "heading": "DevOps Books",
      "level": 2,
      "page": 59
    },
    {
      "heading": "Some 𝐃𝐞𝐯𝐎𝐩𝐬 books I find enlightening:",
      "level": 3,
      "page": 59
    },
    {
      "heading": "🔹Accelerate - presents both the findings and the science behind",
      "level": 3,
      "page": 59
    },
    {
      "heading": "measuring software delivery performance.",
      "level": 3,
      "page": 59
    },
    {
      "heading": "'Continuous Delivery - introduces automated architecture",
      "level": 3,
      "page": 59
    },
    {
      "heading": "management and data migration. It also pointed out key problems and",
      "level": 3,
      "page": 59
    },
    {
      "heading": "optimal solutions in each area.",
      "level": 3,
      "page": 59
    },
    {
      "heading": "'Site Reliability Engineering - famous Google SRE book. It explains",
      "level": 3,
      "page": 59
    },
    {
      "heading": "the whole life cycle of Google’s development, deployment, and",
      "level": 3,
      "page": 59
    },
    {
      "heading": "monitoring, and how to manage the world’s biggest software systems.",
      "level": 3,
      "page": 59
    },
    {
      "heading": "'Effective DevOps - provides effective ways to improve team",
      "level": 3,
      "page": 59
    },
    {
      "heading": "coordination.",
      "level": 3,
      "page": 59
    },
    {
      "heading": "🔹The Phoenix Project - a classic novel about effectiveness and",
      "level": 3,
      "page": 60
    },
    {
      "heading": "communications. IT work is like manufacturing plant work, and a",
      "level": 3,
      "page": 60
    },
    {
      "heading": "system must be established to streamline the workflow. Very",
      "level": 3,
      "page": 60
    },
    {
      "heading": "interesting read!",
      "level": 3,
      "page": 60
    },
    {
      "heading": "'The DevOps Handbook - introduces product development, quality",
      "level": 3,
      "page": 60
    },
    {
      "heading": "assurance, IT operations, and information security.",
      "level": 3,
      "page": 60
    },
    {
      "heading": "What’s your favorite dev-ops book?",
      "level": 3,
      "page": 60
    },
    {
      "heading": "Why is Kafka fast?",
      "level": 2,
      "page": 61
    },
    {
      "heading": "Kafka achieves low latency message delivery through Sequential I/O",
      "level": 3,
      "page": 61
    },
    {
      "heading": "and Zero Copy Principle. The same techniques are commonly used in",
      "level": 3,
      "page": 61
    },
    {
      "heading": "many other messaging/streaming platforms.",
      "level": 3,
      "page": 61
    },
    {
      "heading": "The diagram below illustrates how the data is transmitted between",
      "level": 3,
      "page": 61
    },
    {
      "heading": "producer and consumer, and what zero-copy means.",
      "level": 3,
      "page": 61
    },
    {
      "heading": "🔹Step 1.1 - 1.3: Producer writes data to the disk",
      "level": 3,
      "page": 61
    },
    {
      "heading": "🔹Step 2: Consumer reads data without zero-copy",
      "level": 3,
      "page": 62
    },
    {
      "heading": "2.1: The data is loaded from disk to OS cache",
      "level": 3,
      "page": 62
    },
    {
      "heading": "2.2 The data is copied from OS cache to Kafka application",
      "level": 3,
      "page": 62
    },
    {
      "heading": "2.3 Kafka application copies the data into the socket buffer",
      "level": 3,
      "page": 62
    },
    {
      "heading": "2.4 The data is copied from socket buffer to network card",
      "level": 3,
      "page": 62
    },
    {
      "heading": "2.5 The network card sends data out to the consumer",
      "level": 3,
      "page": 62
    },
    {
      "heading": "'Step 3: Consumer reads data with zero-copy",
      "level": 3,
      "page": 62
    },
    {
      "heading": "3.1: The data is loaded from disk to OS cache",
      "level": 3,
      "page": 62
    },
    {
      "heading": "3.2 OS cache directly copies the data to the network card via sendfile()",
      "level": 3,
      "page": 62
    },
    {
      "heading": "command",
      "level": 3,
      "page": 62
    },
    {
      "heading": "3.3 The network card sends data out to the consumer",
      "level": 3,
      "page": 62
    },
    {
      "heading": "Zero copy is a shortcut to save the multiple data copies between",
      "level": 3,
      "page": 62
    },
    {
      "heading": "application context and kernel context. This approach brings down the",
      "level": 3,
      "page": 62
    },
    {
      "heading": "time by",
      "level": 3,
      "page": 62
    },
    {
      "heading": "approximately 65%.",
      "level": 3,
      "page": 62
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 62
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 62
    },
    {
      "heading": "SOAP vs REST vs GraphQL vs RPC.",
      "level": 2,
      "page": 63
    },
    {
      "heading": "The diagram below illustrates the API timeline and API styles",
      "level": 3,
      "page": 63
    },
    {
      "heading": "comparison.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "Over time, different API architectural styles are released. Each of them",
      "level": 3,
      "page": 63
    },
    {
      "heading": "has its own patterns of standardizing data exchange.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "You can check out the use cases of each style in the diagram.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "Source: https://lnkd.in/gFgi33RY I combined a few diagrams together.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "The credit all goes to AltexSoft.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 63
    },
    {
      "heading": "How do modern browsers work?",
      "level": 2,
      "page": 64
    },
    {
      "heading": "Google published a series of articles about \"Inside look at modern web",
      "level": 3,
      "page": 64
    },
    {
      "heading": "browser\". It's a great read.",
      "level": 3,
      "page": 64
    },
    {
      "heading": "Links:",
      "level": 3,
      "page": 64
    },
    {
      "heading": "https://developer.chrome.com/blog/inside-browser-part1/",
      "level": 3,
      "page": 64
    },
    {
      "heading": "https://developer.chrome.com/blog/inside-browser-part2/",
      "level": 3,
      "page": 64
    },
    {
      "heading": "https://developer.chrome.com/blog/inside-browser-part3/",
      "level": 3,
      "page": 64
    },
    {
      "heading": "https://developer.chrome.com/blog/inside-browser-part4/",
      "level": 3,
      "page": 64
    },
    {
      "heading": "Redis vs Memcached",
      "level": 2,
      "page": 65
    },
    {
      "heading": "The diagram below illustrates the key differences.",
      "level": 3,
      "page": 65
    },
    {
      "heading": "The advantages on data structures make Redis a good choice for:",
      "level": 3,
      "page": 65
    },
    {
      "heading": "🔹 Recording the number of clicks and comments for each post (hash)",
      "level": 3,
      "page": 65
    },
    {
      "heading": "' Sorting the commented user list and deduping the users (zset)",
      "level": 3,
      "page": 65
    },
    {
      "heading": "' Caching user behavior history and filtering malicious behaviors",
      "level": 3,
      "page": 65
    },
    {
      "heading": "(zset, hash)",
      "level": 3,
      "page": 65
    },
    {
      "heading": "' Storing boolean information of extremely large data into small",
      "level": 3,
      "page": 65
    },
    {
      "heading": "space. For example, login status, membership status. (bitmap)",
      "level": 3,
      "page": 65
    },
    {
      "heading": "Optimistic locking",
      "level": 2,
      "page": 66
    },
    {
      "heading": "Optimistic locking, also referred to as optimistic concurrency control,",
      "level": 3,
      "page": 66
    },
    {
      "heading": "allows multiple concurrent users to attempt to update the same",
      "level": 3,
      "page": 66
    },
    {
      "heading": "resource.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "There are two common ways to implement optimistic locking: version",
      "level": 3,
      "page": 66
    },
    {
      "heading": "number and timestamp. Version number is generally considered to be",
      "level": 3,
      "page": 66
    },
    {
      "heading": "a better option because the server clock can be inaccurate over time.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "We explain how optimistic locking works with version number.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "The diagram below shows a successful case and a failure case.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "1. A new column called “version” is added to the database table.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "2. Before a user modifies a database row, the application reads the",
      "level": 3,
      "page": 66
    },
    {
      "heading": "version number of the row.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "3. When the user updates the row, the application increases the",
      "level": 3,
      "page": 66
    },
    {
      "heading": "version number by 1 and writes it back to the database.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "4. A database validation check is put in place; the next version number",
      "level": 3,
      "page": 66
    },
    {
      "heading": "should exceed the current version number by 1. The transaction aborts",
      "level": 3,
      "page": 66
    },
    {
      "heading": "if the validation fails and the user tries again from step 2.",
      "level": 3,
      "page": 66
    },
    {
      "heading": "Optimistic locking is usually faster than pessimistic locking because we",
      "level": 3,
      "page": 67
    },
    {
      "heading": "do not lock the database. However, the performance of optimistic",
      "level": 3,
      "page": 67
    },
    {
      "heading": "locking drops dramatically when concurrency is high.",
      "level": 3,
      "page": 67
    },
    {
      "heading": "To understand why, consider the case when many clients try to reserve",
      "level": 3,
      "page": 67
    },
    {
      "heading": "a hotel room at the same time. Because there is no limit on how many",
      "level": 3,
      "page": 67
    },
    {
      "heading": "clients can read the available room count, all of them read back the",
      "level": 3,
      "page": 67
    },
    {
      "heading": "same available room count and the current version number. When",
      "level": 3,
      "page": 67
    },
    {
      "heading": "different clients make reservations and write back the results to the",
      "level": 3,
      "page": 67
    },
    {
      "heading": "database, only one of them will succeed, and the rest of the clients",
      "level": 3,
      "page": 67
    },
    {
      "heading": "receive a version check failure message. These clients have to retry. In",
      "level": 3,
      "page": 67
    },
    {
      "heading": "the subsequent round of retries, there is only one successful client",
      "level": 3,
      "page": 67
    },
    {
      "heading": "again, and the rest have to retry. Although the end result is correct,",
      "level": 3,
      "page": 67
    },
    {
      "heading": "repeated retries cause a very unpleasant user experience.",
      "level": 3,
      "page": 67
    },
    {
      "heading": "Question: what are the possible ways of solving race conditions?",
      "level": 3,
      "page": 67
    },
    {
      "heading": "Tradeoff between latency and consistency",
      "level": 2,
      "page": 68
    },
    {
      "heading": "Understanding the 𝐭𝐫𝐚𝐝𝐞𝐨𝐟𝐟𝐬 is very important not only in system design",
      "level": 3,
      "page": 68
    },
    {
      "heading": "interviews but also designing real-world systems. When we talk about",
      "level": 3,
      "page": 68
    },
    {
      "heading": "data replication, there is a fundamental tradeoff between 𝐥𝐚𝐭𝐞𝐧𝐜𝐲 and",
      "level": 3,
      "page": 68
    },
    {
      "heading": "𝐜𝐨𝐧𝐬𝐢𝐬𝐭𝐞𝐧𝐜𝐲. It is illustrated by the diagram below.",
      "level": 3,
      "page": 68
    },
    {
      "heading": "Cache miss attack",
      "level": 2,
      "page": 69
    },
    {
      "heading": "Caching is awesome but it doesn’t come without a cost, just like many",
      "level": 3,
      "page": 69
    },
    {
      "heading": "things in life.",
      "level": 3,
      "page": 69
    },
    {
      "heading": "One of the issues is 𝐂𝐚𝐜𝐡𝐞 𝐌𝐢𝐬𝐬 𝐀𝐭𝐭𝐚𝐜𝐤. Correct me if this is not the",
      "level": 3,
      "page": 69
    },
    {
      "heading": "right term. It refers to the scenario where data to fetch doesn't exist in",
      "level": 3,
      "page": 69
    },
    {
      "heading": "the database and the data isn’t cached either. So every request hits",
      "level": 3,
      "page": 69
    },
    {
      "heading": "the database eventually, defeating the purpose of using a cache. If a",
      "level": 3,
      "page": 69
    },
    {
      "heading": "malicious user initiates lots of queries with such keys, the database",
      "level": 3,
      "page": 69
    },
    {
      "heading": "can easily be overloaded.",
      "level": 3,
      "page": 69
    },
    {
      "heading": "The diagram below illustrates the process.",
      "level": 3,
      "page": 69
    },
    {
      "heading": "Two approaches are commonly used to solve this problem:",
      "level": 3,
      "page": 69
    },
    {
      "heading": "🔹Cache keys with null value. Set a short TTL (Time to Live) for keys",
      "level": 3,
      "page": 70
    },
    {
      "heading": "with null value.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "'Using Bloom filter. A Bloom filter is a data structure that can rapidly",
      "level": 3,
      "page": 70
    },
    {
      "heading": "tell us whether an element is present in a set or not. If the key exists,",
      "level": 3,
      "page": 70
    },
    {
      "heading": "the request first goes to the cache and then queries the database if",
      "level": 3,
      "page": 70
    },
    {
      "heading": "needed. If the key doesn't exist in the data set, it means the key",
      "level": 3,
      "page": 70
    },
    {
      "heading": "doesn’t exist in the cache/database. In this case, the query will not hit",
      "level": 3,
      "page": 70
    },
    {
      "heading": "the cache or database layer.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 70
    },
    {
      "heading": "How to diagnose a mysterious process that’s taking too",
      "level": 2,
      "page": 71
    },
    {
      "heading": "much CPU, memory, IO, etc?",
      "level": 2,
      "page": 71
    },
    {
      "heading": "The diagram below illustrates helpful tools in a Linux system.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "🔹‘vmstat’ - reports information about processes, memory, paging,",
      "level": 3,
      "page": 71
    },
    {
      "heading": "block IO, traps, and CPU activity.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "'‘iostat’ - reports CPU and input/output statistics of the system.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "'‘netstat’ - displays statistical data related to IP, TCP, UDP, and ICMP",
      "level": 3,
      "page": 71
    },
    {
      "heading": "protocols.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "'‘lsof’ - lists open files of the current system.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "'‘pidstat’ - monitors the utilization of system resources by all or",
      "level": 3,
      "page": 71
    },
    {
      "heading": "specified processes, including CPU, memory, device IO, task",
      "level": 3,
      "page": 71
    },
    {
      "heading": "switching, threads, etc.",
      "level": 3,
      "page": 71
    },
    {
      "heading": "What are the top cache strategies?",
      "level": 2,
      "page": 72
    },
    {
      "heading": "Read data from the system:",
      "level": 3,
      "page": 72
    },
    {
      "heading": "🔹 Cache aside",
      "level": 3,
      "page": 72
    },
    {
      "heading": "' Read through",
      "level": 3,
      "page": 72
    },
    {
      "heading": "Write data to the system:",
      "level": 3,
      "page": 72
    },
    {
      "heading": "' Write around",
      "level": 3,
      "page": 72
    },
    {
      "heading": "' Write back",
      "level": 3,
      "page": 72
    },
    {
      "heading": "' Write through",
      "level": 3,
      "page": 72
    },
    {
      "heading": "The diagram below illustrates how those 5 strategies work. Some of",
      "level": 3,
      "page": 72
    },
    {
      "heading": "the caching strategies can be used together.",
      "level": 3,
      "page": 72
    },
    {
      "heading": "I left out a lot of details as that will make the post very long. Feel free to",
      "level": 3,
      "page": 73
    },
    {
      "heading": "leave a comment so we can learn from each other.",
      "level": 3,
      "page": 73
    },
    {
      "heading": "Question: What are the pros and cons of each caching strategy? How",
      "level": 3,
      "page": 74
    },
    {
      "heading": "to choose the right one to use?",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 74
    },
    {
      "heading": "Upload large files",
      "level": 2,
      "page": 75
    },
    {
      "heading": "How can we optimize performance when we 𝐮𝐩𝐥𝐨𝐚𝐝 𝐥𝐚𝐫𝐠𝐞 𝐟𝐢𝐥𝐞𝐬 to object",
      "level": 3,
      "page": 75
    },
    {
      "heading": "storage service such as S3?",
      "level": 3,
      "page": 75
    },
    {
      "heading": "Before we answer this question, let's take a look at why we need to",
      "level": 3,
      "page": 75
    },
    {
      "heading": "optimize this process. Some files might be larger than a few GBs. It is",
      "level": 3,
      "page": 75
    },
    {
      "heading": "possible to upload such a large object file directly, but it could take a",
      "level": 3,
      "page": 75
    },
    {
      "heading": "long time. If the network connection fails in the middle of the upload,",
      "level": 3,
      "page": 75
    },
    {
      "heading": "we have to start over. A better solution is to slice a large object into",
      "level": 3,
      "page": 75
    },
    {
      "heading": "smaller parts and upload them independently. After all the parts are",
      "level": 3,
      "page": 75
    },
    {
      "heading": "uploaded, the object store re-assembles the object from the parts. This",
      "level": 3,
      "page": 75
    },
    {
      "heading": "process is called 𝐦𝐮𝐥𝐭𝐢𝐩𝐚𝐫𝐭 𝐮𝐩𝐥𝐨𝐚𝐝.",
      "level": 3,
      "page": 75
    },
    {
      "heading": "The diagram below illustrates how multipart upload works:",
      "level": 3,
      "page": 75
    },
    {
      "heading": "1. The client calls the object storage to initiate a multipart upload.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "2. The data store returns an uploadID, which uniquely identifies the",
      "level": 3,
      "page": 76
    },
    {
      "heading": "upload.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "3. The client splits the large file into small objects and starts uploading.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "Let’s assume the size of the file is 1.6GB and the client splits it into 8",
      "level": 3,
      "page": 76
    },
    {
      "heading": "parts, so each part is 200 MB in size. The client uploads the first part to",
      "level": 3,
      "page": 76
    },
    {
      "heading": "the data store together with the uploadID it received in step 2.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "4. When a part is uploaded, the data store returns an ETag, which is",
      "level": 3,
      "page": 76
    },
    {
      "heading": "essentially the md5 checksum of that part. It is used to verify multipart",
      "level": 3,
      "page": 76
    },
    {
      "heading": "uploads.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "5. After all parts are uploaded, the client sends a complete multipart",
      "level": 3,
      "page": 76
    },
    {
      "heading": "upload request, which includes the uploadID, part numbers, and",
      "level": 3,
      "page": 76
    },
    {
      "heading": "ETags.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "6. The data store reassembles the object from its parts based on the",
      "level": 3,
      "page": 76
    },
    {
      "heading": "part number. Since the object is really large, this process may take a",
      "level": 3,
      "page": 76
    },
    {
      "heading": "few minutes. After reassembly is complete, it returns a success",
      "level": 3,
      "page": 76
    },
    {
      "heading": "message to the client.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 76
    },
    {
      "heading": "Why is Redis so Fast?",
      "level": 2,
      "page": 77
    },
    {
      "heading": "There are 3 main reasons as shown in the diagram below.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "1. Redis is a RAM-based database. RAM access is at least 1000 times",
      "level": 3,
      "page": 77
    },
    {
      "heading": "faster than random disk access.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "2. Redis leverages IO multiplexing and single-threaded execution loop",
      "level": 3,
      "page": 77
    },
    {
      "heading": "for execution efficiency.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "3. Redis leverages several efficient lower-level data structures.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Question: Another popular in-memory store is Memcached. Do you",
      "level": 3,
      "page": 77
    },
    {
      "heading": "know the differences between Redis and Memcached?",
      "level": 3,
      "page": 77
    },
    {
      "heading": "You might have noticed the style of this diagram is different from my",
      "level": 3,
      "page": 77
    },
    {
      "heading": "previous posts. Please let me know which one you prefer.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 77
    },
    {
      "heading": "SWIFT payment network",
      "level": 2,
      "page": 78
    },
    {
      "heading": "You probably heard about 𝐒𝐖𝐈𝐅𝐓. What is SWIFT? What role does it",
      "level": 3,
      "page": 78
    },
    {
      "heading": "play in cross-border payments? You can find answers to those",
      "level": 3,
      "page": 78
    },
    {
      "heading": "questions in this post.",
      "level": 3,
      "page": 78
    },
    {
      "heading": "The Society for Worldwide Interbank Financial Telecommunication",
      "level": 3,
      "page": 78
    },
    {
      "heading": "(SWIFT) is the main secure 𝐦𝐞𝐬𝐬𝐚𝐠𝐢𝐧𝐠 𝐬𝐲𝐬𝐭𝐞𝐦 that links the world’s",
      "level": 3,
      "page": 78
    },
    {
      "heading": "banks.",
      "level": 3,
      "page": 78
    },
    {
      "heading": "The Belgium-based system is run by its member banks and handles",
      "level": 3,
      "page": 78
    },
    {
      "heading": "millions of payment messages per day. The diagram below illustrates",
      "level": 3,
      "page": 78
    },
    {
      "heading": "how payment messages are transmitted from Bank A (in New York) to",
      "level": 3,
      "page": 78
    },
    {
      "heading": "Bank B (in London).",
      "level": 3,
      "page": 78
    },
    {
      "heading": "Step 1: Bank A sends a message with transfer details to Regional",
      "level": 3,
      "page": 78
    },
    {
      "heading": "Processor A in New York. The destination is Bank B.",
      "level": 3,
      "page": 78
    },
    {
      "heading": "Step 2: Regional processor validates the format and sends it to Slice",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Processor A. The Regional Processor is responsible for input message",
      "level": 3,
      "page": 79
    },
    {
      "heading": "validation and output message queuing. The Slice Processor is",
      "level": 3,
      "page": 79
    },
    {
      "heading": "responsible for storing and routing messages safely.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 3: Slice Processor A stores the message.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 4: Slice Processor A informs Regional Processor A the message",
      "level": 3,
      "page": 79
    },
    {
      "heading": "is stored.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 5: Regional Processor A sends ACK/NAK to Bank A. ACK means",
      "level": 3,
      "page": 79
    },
    {
      "heading": "a message will be sent to Bank B. NAK means the message will NOT",
      "level": 3,
      "page": 79
    },
    {
      "heading": "be sent to Bank B.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 6: Slice Processor A sends the message to Regional Processor B",
      "level": 3,
      "page": 79
    },
    {
      "heading": "in London.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 7: Regional Processor B stores the message temporarily.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 8: Regional Processor B assigns a unique ID MON (Message",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Output Number) to the message and sends it to Slice Processor B",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 9: Slice Processor B validates MON.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 10: Slice Processor B authorizes Regional Processor B to send",
      "level": 3,
      "page": 79
    },
    {
      "heading": "the message to Bank B.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 11: Regional Processor B sends the message to Bank B.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 12: Bank B receives the message and stores it.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 13: Bank B sends UAK/UNK to Regional Processor B. UAK (user",
      "level": 3,
      "page": 79
    },
    {
      "heading": "positive acknowledgment) means Bank B received the message",
      "level": 3,
      "page": 79
    },
    {
      "heading": "without error; UNK (user negative acknowledgment) means Bank B",
      "level": 3,
      "page": 79
    },
    {
      "heading": "received checksum failure.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 14: Regional Processor B creates a report based on Bank B’s",
      "level": 3,
      "page": 79
    },
    {
      "heading": "response, and sends it to Slice Processor B.",
      "level": 3,
      "page": 79
    },
    {
      "heading": "Step 15: Slice Processor B stores the report.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "Step 16 - 17: Slice Processor B sends a copy of the report to Slice",
      "level": 3,
      "page": 80
    },
    {
      "heading": "Processor A. Slice Processor A stores the report.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 80
    },
    {
      "heading": "At-most once, at-least once, and exactly once",
      "level": 2,
      "page": 81
    },
    {
      "heading": "In modern architecture, systems are broken up into small and",
      "level": 3,
      "page": 81
    },
    {
      "heading": "independent building blocks with well-defined interfaces between them.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "Message queues provide communication and coordination for those",
      "level": 3,
      "page": 81
    },
    {
      "heading": "building blocks. Today, let’s discuss different delivery semantics:",
      "level": 3,
      "page": 81
    },
    {
      "heading": "at-most once, at-least once, and exactly once.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "𝐀𝐭-𝐦𝐨𝐬𝐭 𝐨𝐧𝐜𝐞",
      "level": 3,
      "page": 81
    },
    {
      "heading": "As the name suggests, at-most once means a message will be",
      "level": 3,
      "page": 81
    },
    {
      "heading": "delivered not more than once. Messages may be lost but are not",
      "level": 3,
      "page": 81
    },
    {
      "heading": "redelivered. This is how at-most once delivery works at the high level.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "Use cases: It is suitable for use cases like monitoring metrics, where a",
      "level": 3,
      "page": 81
    },
    {
      "heading": "small amount of data loss is acceptable.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "𝐀𝐭-𝐥𝐞𝐚𝐬𝐭 𝐨𝐧𝐜𝐞",
      "level": 3,
      "page": 81
    },
    {
      "heading": "With this data delivery semantic, it’s acceptable to deliver a message",
      "level": 3,
      "page": 81
    },
    {
      "heading": "more than once, but no message should be lost.",
      "level": 3,
      "page": 81
    },
    {
      "heading": "Use cases: With at-least once, messages won’t be lost but the same",
      "level": 3,
      "page": 81
    },
    {
      "heading": "message might be delivered multiple times. While not ideal from a user",
      "level": 3,
      "page": 81
    },
    {
      "heading": "perspective, at-least once delivery semantics are usually good enough",
      "level": 3,
      "page": 81
    },
    {
      "heading": "for use cases where data duplication is not a big issue or deduplication",
      "level": 3,
      "page": 81
    },
    {
      "heading": "is possible on the consumer side. For example, with a unique key in",
      "level": 3,
      "page": 82
    },
    {
      "heading": "each message, a message can be rejected when writing duplicate data",
      "level": 3,
      "page": 82
    },
    {
      "heading": "to the database.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "𝐄𝐱𝐚𝐜𝐭𝐥𝐲 𝐨𝐧𝐜𝐞",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Exactly once is the most difficult delivery semantic to implement. It is",
      "level": 3,
      "page": 82
    },
    {
      "heading": "friendly to users, but it has a high cost for the system’s performance",
      "level": 3,
      "page": 82
    },
    {
      "heading": "and complexity.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Use cases: Financial-related use cases (payment, trading, accounting,",
      "level": 3,
      "page": 82
    },
    {
      "heading": "etc.). Exactly once is especially important when duplication is not",
      "level": 3,
      "page": 82
    },
    {
      "heading": "acceptable and the downstream service or third party doesn’t support",
      "level": 3,
      "page": 82
    },
    {
      "heading": "idempotency.",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Question: what is the difference between message queues vs event",
      "level": 3,
      "page": 82
    },
    {
      "heading": "streaming platforms such as Kafka, Apache Pulsar, etc?",
      "level": 3,
      "page": 82
    },
    {
      "heading": "Vertical partitioning and Horizontal partitioning",
      "level": 2,
      "page": 83
    },
    {
      "heading": "In many large-scale applications, data is divided into partitions that can",
      "level": 3,
      "page": 83
    },
    {
      "heading": "be accessed separately. There are two typical strategies for partitioning",
      "level": 3,
      "page": 83
    },
    {
      "heading": "data.",
      "level": 3,
      "page": 83
    },
    {
      "heading": "🔹 Vertical partitioning: it means some columns are moved to new",
      "level": 3,
      "page": 83
    },
    {
      "heading": "tables. Each table contains the same number of rows but fewer",
      "level": 3,
      "page": 83
    },
    {
      "heading": "columns (see diagram below).",
      "level": 3,
      "page": 83
    },
    {
      "heading": "' Horizontal partitioning (often called sharding): it divides a table into",
      "level": 3,
      "page": 83
    },
    {
      "heading": "multiple smaller tables. Each table is a separate data store, and it",
      "level": 3,
      "page": 83
    },
    {
      "heading": "contains the same number of columns, but fewer rows (see diagram",
      "level": 3,
      "page": 83
    },
    {
      "heading": "below).",
      "level": 3,
      "page": 83
    },
    {
      "heading": "Horizontal partitioning is widely used so let’s take a closer look.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "𝐑𝐨𝐮𝐭𝐢𝐧𝐠 𝐚𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦",
      "level": 3,
      "page": 84
    },
    {
      "heading": "Routing algorithm decides which partition (shard) stores the data.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "🔹 Range-based sharding. This algorithm uses ordered columns, such",
      "level": 3,
      "page": 84
    },
    {
      "heading": "as integers, longs, timestamps, to separate the rows. For example, the",
      "level": 3,
      "page": 84
    },
    {
      "heading": "diagram below uses the User ID column for range partition: User IDs 1",
      "level": 3,
      "page": 84
    },
    {
      "heading": "and 2 are in shard 1, User IDs 3 and 4 are in shard 2.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "' Hash-based sharding. This algorithm applies a hash function to one",
      "level": 3,
      "page": 84
    },
    {
      "heading": "column or several columns to decide which row goes to which table.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "For example, the diagram below uses 𝐔𝐬𝐞𝐫 𝐈𝐃 𝐦𝐨𝐝 2 as a hash",
      "level": 3,
      "page": 84
    },
    {
      "heading": "function. User IDs 1 and 3 are in shard 1, User IDs 2 and 4 are in",
      "level": 3,
      "page": 84
    },
    {
      "heading": "shard 2.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬",
      "level": 3,
      "page": 84
    },
    {
      "heading": "' Facilitate horizontal scaling. Sharding facilitates the possibility of",
      "level": 3,
      "page": 84
    },
    {
      "heading": "adding more machines to spread out the load.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "' Shorten response time. By sharding one table into multiple tables,",
      "level": 3,
      "page": 84
    },
    {
      "heading": "queries go over fewer rows, and results are returned much more",
      "level": 3,
      "page": 84
    },
    {
      "heading": "quickly.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "𝐃𝐫𝐚𝐰𝐛𝐚𝐜𝐤𝐬",
      "level": 3,
      "page": 84
    },
    {
      "heading": "' The order by the operation is more complicated. Usually, we need",
      "level": 3,
      "page": 84
    },
    {
      "heading": "to fetch data from different shards and sort the data in the application's",
      "level": 3,
      "page": 84
    },
    {
      "heading": "code.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "' Uneven distribution. Some shards may contain more data than",
      "level": 3,
      "page": 84
    },
    {
      "heading": "others (this is also called the hotspot).",
      "level": 3,
      "page": 84
    },
    {
      "heading": "This topic is very big and I’m sure I missed a lot of important details.",
      "level": 3,
      "page": 84
    },
    {
      "heading": "What else do you think is important for data partitioning?",
      "level": 3,
      "page": 84
    },
    {
      "heading": "CDN",
      "level": 2,
      "page": 85
    },
    {
      "heading": "A content delivery network (CDN) refers to a geographically distributed",
      "level": 3,
      "page": 85
    },
    {
      "heading": "servers (also called edge servers) which provide fast delivery of static",
      "level": 3,
      "page": 85
    },
    {
      "heading": "and dynamic content. Let’s take a look at how it works.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "Suppose Bob who lives in New York wants to visit an eCommerce",
      "level": 3,
      "page": 85
    },
    {
      "heading": "website that is deployed in London. If the request goes to servers",
      "level": 3,
      "page": 85
    },
    {
      "heading": "located in London, the response will be quite slow. So we deploy CDN",
      "level": 3,
      "page": 85
    },
    {
      "heading": "servers close to where Bob lives, and the content will be loaded from",
      "level": 3,
      "page": 85
    },
    {
      "heading": "the nearby CDN server.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "The diagram below illustrates the process:",
      "level": 3,
      "page": 85
    },
    {
      "heading": "1. Bob types in www.myshop.com in the browser. The browser looks",
      "level": 3,
      "page": 85
    },
    {
      "heading": "up the domain name in the local DNS cache.",
      "level": 3,
      "page": 85
    },
    {
      "heading": "2. If the domain name does not exist in the local DNS cache, the",
      "level": 3,
      "page": 86
    },
    {
      "heading": "browser goes to the DNS resolver to resolve the name. The DNS",
      "level": 3,
      "page": 86
    },
    {
      "heading": "resolver usually sits in the Internet Service Provider (ISP).",
      "level": 3,
      "page": 86
    },
    {
      "heading": "3. The DNS resolver recursively resolves the domain name (see my",
      "level": 3,
      "page": 86
    },
    {
      "heading": "previous post for details). Finally, it asks the authoritative name server",
      "level": 3,
      "page": 86
    },
    {
      "heading": "to resolve the domain name.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "4. If we don’t use CDN, the authoritative name server returns the IP",
      "level": 3,
      "page": 86
    },
    {
      "heading": "address for www.myshop.com. But with CDN, the authoritative name",
      "level": 3,
      "page": 86
    },
    {
      "heading": "server has an alias pointing to www.myshop.cdn.com (the domain",
      "level": 3,
      "page": 86
    },
    {
      "heading": "name of the CDN server).",
      "level": 3,
      "page": 86
    },
    {
      "heading": "5. The DNS resolver asks the authoritative name server to resolve",
      "level": 3,
      "page": 86
    },
    {
      "heading": "www.myshop.cdn.com.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "6. The authoritative name server returns the domain name for the load",
      "level": 3,
      "page": 86
    },
    {
      "heading": "balancer of CDN www.myshop.lb.com.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "7. The DNS resolver asks the CDN load balancer to resolve",
      "level": 3,
      "page": 86
    },
    {
      "heading": "www.myshop.lb.com. The load balancer chooses an optimal CDN",
      "level": 3,
      "page": 86
    },
    {
      "heading": "edge server based on the user’s IP address, user’s ISP, the content",
      "level": 3,
      "page": 86
    },
    {
      "heading": "requested, and the server load.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "8. The CDN load balancer returns the CDN edge server’s IP address",
      "level": 3,
      "page": 86
    },
    {
      "heading": "for www.myshop.lb.com.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "9. Now we finally get the actual IP address to visit. The DNS resolver",
      "level": 3,
      "page": 86
    },
    {
      "heading": "returns the IP address to the browser.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "10. The browser visits the CDN edge server to load the content. There",
      "level": 3,
      "page": 86
    },
    {
      "heading": "are two types of contents cached on the CDN servers: static contents",
      "level": 3,
      "page": 86
    },
    {
      "heading": "and dynamic contents. The former contains static pages, pictures, and",
      "level": 3,
      "page": 86
    },
    {
      "heading": "videos; the latter one includes results of edge computing.",
      "level": 3,
      "page": 86
    },
    {
      "heading": "11. If the edge CDN server cache doesn't contain the content, it goes",
      "level": 3,
      "page": 86
    },
    {
      "heading": "upward to the regional CDN server. If the content is still not found, it",
      "level": 3,
      "page": 86
    },
    {
      "heading": "will go upward to the central CDN server, or even go to the origin - the",
      "level": 3,
      "page": 86
    },
    {
      "heading": "London web server. This is called the CDN distribution network, where",
      "level": 3,
      "page": 87
    },
    {
      "heading": "the servers are deployed geographically.",
      "level": 3,
      "page": 87
    },
    {
      "heading": "Over to you: How do you prevent videos cached on CDN from being",
      "level": 3,
      "page": 87
    },
    {
      "heading": "pirated?",
      "level": 3,
      "page": 87
    },
    {
      "heading": "Erasure coding",
      "level": 2,
      "page": 88
    },
    {
      "heading": "A really cool technique that’s commonly used in object storage such as",
      "level": 3,
      "page": 88
    },
    {
      "heading": "S3 to improve durability is called 𝐄𝐫𝐚𝐬𝐮𝐫𝐞 𝐂𝐨𝐝𝐢𝐧𝐠. Let’s take a look at",
      "level": 3,
      "page": 88
    },
    {
      "heading": "how it works.",
      "level": 3,
      "page": 88
    },
    {
      "heading": "Erasure coding deals with data durability differently from replication. It",
      "level": 3,
      "page": 89
    },
    {
      "heading": "chunks data into smaller pieces (placed on different servers) and",
      "level": 3,
      "page": 89
    },
    {
      "heading": "creates parities for redundancy. In the event of failures, we can use",
      "level": 3,
      "page": 89
    },
    {
      "heading": "chunk data and parities to reconstruct the data. Let’s take a look at a",
      "level": 3,
      "page": 89
    },
    {
      "heading": "concrete example (4 + 2 erasure coding) as shown in Figure 1.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "1⃣Data is broken up into four even-sized data chunks d1, d2, d3, and",
      "level": 3,
      "page": 89
    },
    {
      "heading": "d4.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "2⃣The mathematical formula is used to calculate the parities p1 and p2.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "To give a much simplified example, p1 = d1 + 2*d2 - d3 + 4*d4 and p2",
      "level": 3,
      "page": 89
    },
    {
      "heading": "= -d1 + 5*d2 + d3 - 3*d4.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "3⃣Data d3 and d4 are lost due to node crashes.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "4⃣The mathematical formula is used to reconstruct lost data d3 and d4,",
      "level": 3,
      "page": 89
    },
    {
      "heading": "using the known values of d1, d2, p1, and p2.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "How much extra space does erasure coding need? For every two",
      "level": 3,
      "page": 89
    },
    {
      "heading": "chunks of data, we need one parity block, so the storage overhead is",
      "level": 3,
      "page": 89
    },
    {
      "heading": "50% (Figure 2). While in 3-copy replication, the storage overhead is",
      "level": 3,
      "page": 89
    },
    {
      "heading": "200% (Figure 2).",
      "level": 3,
      "page": 89
    },
    {
      "heading": "Does erasure coding increase data durability? Let’s assume a node",
      "level": 3,
      "page": 89
    },
    {
      "heading": "has a 0.81% annual failure rate. According to the calculation done by",
      "level": 3,
      "page": 89
    },
    {
      "heading": "Backblaze, erasure coding can achieve 11 nines durability vs 3-copy",
      "level": 3,
      "page": 89
    },
    {
      "heading": "replication can achieve 6 nines durability.",
      "level": 3,
      "page": 89
    },
    {
      "heading": "What other techniques do you think are important to improve the",
      "level": 3,
      "page": 89
    },
    {
      "heading": "scalability and durability of an object store such as S3?",
      "level": 3,
      "page": 89
    },
    {
      "heading": "Foreign exchange in payment",
      "level": 2,
      "page": 90
    },
    {
      "heading": "Have you wondered what happens under the hood when you pay with",
      "level": 3,
      "page": 90
    },
    {
      "heading": "USD online and the seller from Europe receives EUR (euro)? This",
      "level": 3,
      "page": 90
    },
    {
      "heading": "process is called foreign exchange.",
      "level": 3,
      "page": 90
    },
    {
      "heading": "Suppose Bob (the buyer) needs to pay 100 USD to Alice (the seller),",
      "level": 3,
      "page": 90
    },
    {
      "heading": "and Alice can only receive EUR. The diagram below illustrates the",
      "level": 3,
      "page": 90
    },
    {
      "heading": "process.",
      "level": 3,
      "page": 90
    },
    {
      "heading": "1. Bob sends 100 USD via a third-party payment provider. In our",
      "level": 3,
      "page": 90
    },
    {
      "heading": "example, it is Paypal. The money is transferred from Bob’s bank",
      "level": 3,
      "page": 90
    },
    {
      "heading": "account (Bank B) to Paypal’s account in Bank P1.",
      "level": 3,
      "page": 90
    },
    {
      "heading": "2. Paypal needs to convert USD to EUR. It leverages the foreign",
      "level": 3,
      "page": 90
    },
    {
      "heading": "exchange provider (Bank E). Paypal sends 100 USD to its USD",
      "level": 3,
      "page": 90
    },
    {
      "heading": "account in Bank E.",
      "level": 3,
      "page": 90
    },
    {
      "heading": "3. 100 USD is sold to Bank E’s funding pool.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "4. Bank E’s funding pool provides 88 EUR in exchange for 100 USD.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "The money is put into Paypal’s EUR account in Bank E.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "5. Paypal’s EUR account in Bank P2 receives 88 EUR.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "6. 88 EUR is paid to Alice’s EUR account in Bank A.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "Now let’s take a close look at the foreign exchange (forex) market. It",
      "level": 3,
      "page": 91
    },
    {
      "heading": "has 3 layers:",
      "level": 3,
      "page": 91
    },
    {
      "heading": "🔹 Retail market. Funding pools are parts of the retail market. To",
      "level": 3,
      "page": 91
    },
    {
      "heading": "improve efficiency, Paypal usually buys a certain amount of foreign",
      "level": 3,
      "page": 91
    },
    {
      "heading": "currencies in advance.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "' Wholesale market. The wholesale business is composed of",
      "level": 3,
      "page": 91
    },
    {
      "heading": "investment banks, commercial banks, and foreign exchange providers.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "It usually handles accumulated orders from the retail market.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "' Top-level participants. They are multinational commercial banks",
      "level": 3,
      "page": 91
    },
    {
      "heading": "that hold a large number of certificates of deposit from different",
      "level": 3,
      "page": 91
    },
    {
      "heading": "countries. They exchange these certificates for foreign exchange",
      "level": 3,
      "page": 91
    },
    {
      "heading": "trading.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "When Bank E’s funding pool needs more EUR, it goes upward to the",
      "level": 3,
      "page": 91
    },
    {
      "heading": "wholesale market to sell USD and buy EUR. When the wholesale",
      "level": 3,
      "page": 91
    },
    {
      "heading": "market accumulates enough orders, it goes upward to top-level",
      "level": 3,
      "page": 91
    },
    {
      "heading": "participants. Steps 3.1-3.3 and 4.1-4.3 explain how it works.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "If you have any questions, please leave a comment.",
      "level": 3,
      "page": 91
    },
    {
      "heading": "What foreign currency did you find difficult to exchange? And what",
      "level": 3,
      "page": 91
    },
    {
      "heading": "company have you used for foreign currency exchange?",
      "level": 3,
      "page": 91
    },
    {
      "heading": "Interview Question: Design S3",
      "level": 3,
      "page": 92
    },
    {
      "heading": "What happens when you upload a file to Amazon S3? Let’s design an",
      "level": 3,
      "page": 92
    },
    {
      "heading": "S3 like object storage system.",
      "level": 3,
      "page": 92
    },
    {
      "heading": "Before we dive into the design, let’s define some terms.",
      "level": 3,
      "page": 92
    },
    {
      "heading": "𝐁𝐮𝐜𝐤𝐞𝐭. A logical container for objects. The bucket name is globally",
      "level": 3,
      "page": 93
    },
    {
      "heading": "unique. To upload data to S3, we must first create a bucket.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "𝐎𝐛𝐣𝐞𝐜𝐭. An object is an individual piece of data we store in a bucket. It",
      "level": 3,
      "page": 93
    },
    {
      "heading": "contains object data (also called payload) and metadata. Object data",
      "level": 3,
      "page": 93
    },
    {
      "heading": "can be any sequence of bytes we want to store. The metadata is a set",
      "level": 3,
      "page": 93
    },
    {
      "heading": "of name-value pairs that describe the object.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "An S3 object consists of (Figure 1):",
      "level": 3,
      "page": 93
    },
    {
      "heading": "🔹 Metadata. It is mutable and contains attributes such as ID, bucket",
      "level": 3,
      "page": 93
    },
    {
      "heading": "name, object name, etc.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "' Object data. It is immutable and contains the actual data.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "In S3, an object resides in a bucket. The path looks like this:",
      "level": 3,
      "page": 93
    },
    {
      "heading": "/bucket-to-share/script.txt. The bucket only has metadata. The object",
      "level": 3,
      "page": 93
    },
    {
      "heading": "has metadata and the actual data.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "The diagram below (Figure 2) illustrates how file uploading works. In",
      "level": 3,
      "page": 93
    },
    {
      "heading": "this example, we first create a bucket named “bucket-to-share” and",
      "level": 3,
      "page": 93
    },
    {
      "heading": "then upload a file named “script.txt” to the bucket.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "1. The client sends an HTTP PUT request to create a bucket named",
      "level": 3,
      "page": 93
    },
    {
      "heading": "“bucket-to-share.” The request is forwarded to the API service.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "2. The API service calls the Identity and Access Management (IAM) to",
      "level": 3,
      "page": 93
    },
    {
      "heading": "ensure the user is authorized and has WRITE permission.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "3. The API service calls the metadata store to create an entry with the",
      "level": 3,
      "page": 93
    },
    {
      "heading": "bucket info in the metadata database. Once the entry is created, a",
      "level": 3,
      "page": 93
    },
    {
      "heading": "success message is returned to the client.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "4. After the bucket is created, the client sends an HTTP PUT request",
      "level": 3,
      "page": 93
    },
    {
      "heading": "to create an object named “script.txt”.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "5. The API service verifies the user’s identity and ensures the user has",
      "level": 3,
      "page": 93
    },
    {
      "heading": "WRITE permission on the bucket.",
      "level": 3,
      "page": 93
    },
    {
      "heading": "6. Once validation succeeds, the API service sends the object data in",
      "level": 3,
      "page": 94
    },
    {
      "heading": "the HTTP PUT payload to the data store. The data store persists the",
      "level": 3,
      "page": 94
    },
    {
      "heading": "payload as an object and returns the UUID of the object.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "7. The API service calls the metadata store to create a new entry in the",
      "level": 3,
      "page": 94
    },
    {
      "heading": "metadata database. It contains important metadata such as the",
      "level": 3,
      "page": 94
    },
    {
      "heading": "object_id (UUID), bucket_id (which bucket the object belongs to),",
      "level": 3,
      "page": 94
    },
    {
      "heading": "object_name, etc.",
      "level": 3,
      "page": 94
    },
    {
      "heading": "Block storage, file storage and object storage",
      "level": 2,
      "page": 95
    },
    {
      "heading": "Yesterday, I posted the definitions of block storage, file storage, and",
      "level": 3,
      "page": 95
    },
    {
      "heading": "object storage. Let’s continue the discussion and compare those 3",
      "level": 3,
      "page": 95
    },
    {
      "heading": "options.",
      "level": 3,
      "page": 95
    },
    {
      "heading": "Block storage, file storage and object storage",
      "level": 2,
      "page": 96
    },
    {
      "heading": "In this post, let’s review the storage systems in general.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Storage systems fall into three broad categories:",
      "level": 3,
      "page": 96
    },
    {
      "heading": "🔹 Block storage",
      "level": 3,
      "page": 96
    },
    {
      "heading": "' File storage",
      "level": 3,
      "page": 96
    },
    {
      "heading": "' Object storage",
      "level": 3,
      "page": 96
    },
    {
      "heading": "The diagram below illustrates the comparison of different storage",
      "level": 3,
      "page": 96
    },
    {
      "heading": "systems.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "𝐁𝐥𝐨𝐜𝐤 𝐬𝐭𝐨𝐫𝐚𝐠𝐞",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Block storage came first, in the 1960s. Common storage devices like",
      "level": 3,
      "page": 96
    },
    {
      "heading": "hard disk drives (HDD) and solid-state drives (SSD) that are physically",
      "level": 3,
      "page": 96
    },
    {
      "heading": "attached to servers are all considered as block storage.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Block storage presents the raw blocks to the server as a volume. This",
      "level": 3,
      "page": 96
    },
    {
      "heading": "is the most flexible and versatile form of storage. The server can",
      "level": 3,
      "page": 96
    },
    {
      "heading": "format the raw blocks and use them as a file system, or it can hand",
      "level": 3,
      "page": 96
    },
    {
      "heading": "control of those blocks to an application. Some applications like a",
      "level": 3,
      "page": 96
    },
    {
      "heading": "database or a virtual machine engine manage these blocks directly in",
      "level": 3,
      "page": 96
    },
    {
      "heading": "order to squeeze every drop of performance out of them.",
      "level": 3,
      "page": 96
    },
    {
      "heading": "Block storage is not limited to physically attached storage. Block",
      "level": 3,
      "page": 96
    },
    {
      "heading": "storage could be connected to a server over a high-speed network or",
      "level": 3,
      "page": 96
    },
    {
      "heading": "over industry-standard connectivity protocols like Fibre Channel (FC)",
      "level": 3,
      "page": 96
    },
    {
      "heading": "and iSCSI. Conceptually, the network-attached block storage still",
      "level": 3,
      "page": 97
    },
    {
      "heading": "presents raw blocks. To the servers, it works the same as physically",
      "level": 3,
      "page": 97
    },
    {
      "heading": "attached block storage. Whether to a network or physically attached,",
      "level": 3,
      "page": 97
    },
    {
      "heading": "block storage is fully owned by a single server. It is not a shared",
      "level": 3,
      "page": 97
    },
    {
      "heading": "resource.",
      "level": 3,
      "page": 97
    },
    {
      "heading": "𝐅𝐢𝐥𝐞 𝐬𝐭𝐨𝐫𝐚𝐠𝐞",
      "level": 3,
      "page": 97
    },
    {
      "heading": "File storage is built on top of block storage. It provides a higher-level",
      "level": 3,
      "page": 97
    },
    {
      "heading": "abstraction to make it easier to handle files and directories. Data is",
      "level": 3,
      "page": 97
    },
    {
      "heading": "stored as files under a hierarchical directory structure. File storage is",
      "level": 3,
      "page": 97
    },
    {
      "heading": "the most common general-purpose storage solution. File storage could",
      "level": 3,
      "page": 97
    },
    {
      "heading": "be made accessible by a large number of servers using common",
      "level": 3,
      "page": 97
    },
    {
      "heading": "file-level network protocols like SMB/CIFS and NFS. The servers",
      "level": 3,
      "page": 97
    },
    {
      "heading": "accessing file storage do not need to deal with the complexity of",
      "level": 3,
      "page": 97
    },
    {
      "heading": "managing the blocks, formatting volume, etc. The simplicity of file",
      "level": 3,
      "page": 97
    },
    {
      "heading": "storage makes it a great solution for sharing a large number of files",
      "level": 3,
      "page": 97
    },
    {
      "heading": "and folders within an organization.",
      "level": 3,
      "page": 97
    },
    {
      "heading": "𝐎𝐛𝐣𝐞𝐜𝐭 𝐬𝐭𝐨𝐫𝐚𝐠𝐞",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Object storage is new. It makes a very deliberate tradeoff to sacrifice",
      "level": 3,
      "page": 97
    },
    {
      "heading": "performance for high durability, vast scale, and low cost. It targets",
      "level": 3,
      "page": 97
    },
    {
      "heading": "relatively “cold” data and is mainly used for archival and backup.",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Object storage stores all data as objects in a flat structure. There is no",
      "level": 3,
      "page": 97
    },
    {
      "heading": "hierarchical directory structure. Data access is normally provided via a",
      "level": 3,
      "page": 97
    },
    {
      "heading": "RESTful API. It is relatively slow compared to other storage types.",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Most public cloud service providers have an object storage offering,",
      "level": 3,
      "page": 97
    },
    {
      "heading": "such as AWS S3, Google block storage, and Azure blob storage.",
      "level": 3,
      "page": 97
    },
    {
      "heading": "Domain Name System (DNS) lookup",
      "level": 2,
      "page": 98
    },
    {
      "heading": "DNS acts as an address book. It translates human-readable domain",
      "level": 3,
      "page": 98
    },
    {
      "heading": "names (google.com) to machine-readable IP addresses",
      "level": 3,
      "page": 98
    },
    {
      "heading": "(142.251.46.238).",
      "level": 3,
      "page": 98
    },
    {
      "heading": "To achieve better scalability, the DNS servers are organized in a",
      "level": 3,
      "page": 98
    },
    {
      "heading": "hierarchical tree structure.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "There are 3 basic levels of DNS servers:",
      "level": 3,
      "page": 98
    },
    {
      "heading": "1. Root name server (.). It stores the IP addresses of Top Level",
      "level": 3,
      "page": 98
    },
    {
      "heading": "Domain (TLD) name servers. There are 13 logical root name servers",
      "level": 3,
      "page": 98
    },
    {
      "heading": "globally.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "2. TLD name server. It stores the IP addresses of authoritative name",
      "level": 3,
      "page": 98
    },
    {
      "heading": "servers. There are several types of TLD names. For example, generic",
      "level": 3,
      "page": 98
    },
    {
      "heading": "TLD (.com, .org), country code TLD (.us), test TLD (.test).",
      "level": 3,
      "page": 98
    },
    {
      "heading": "3. Authoritative name server. It provides actual answers to the DNS",
      "level": 3,
      "page": 98
    },
    {
      "heading": "query. You can register authoritative name servers with domain name",
      "level": 3,
      "page": 98
    },
    {
      "heading": "registrar such as GoDaddy, Namecheap, etc.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "The diagram below illustrates how DNS lookup works under the hood:",
      "level": 3,
      "page": 98
    },
    {
      "heading": "1. google.com is typed into the browser, and the browser sends the",
      "level": 3,
      "page": 98
    },
    {
      "heading": "domain name to the DNS resolver.",
      "level": 3,
      "page": 98
    },
    {
      "heading": "2. The resolver queries a DNS root name server.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "3. The root server responds to the resolver with the address of a TLD",
      "level": 3,
      "page": 99
    },
    {
      "heading": "DNS server. In this case, it is .com.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "4. The resolver then makes a request to the .com TLD.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "5. The TLD server responds with the IP address of the domain’s name",
      "level": 3,
      "page": 99
    },
    {
      "heading": "server, google.com (authoritative name server).",
      "level": 3,
      "page": 99
    },
    {
      "heading": "6. The DNS resolver sends a query to the domain’s nameserver.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "7. The IP address for google.com is then returned to the resolver from",
      "level": 3,
      "page": 99
    },
    {
      "heading": "the nameserver.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "8. The DNS resolver responds to the web browser with the IP address",
      "level": 3,
      "page": 99
    },
    {
      "heading": "(142.251.46.238) of the domain requested initially.",
      "level": 3,
      "page": 99
    },
    {
      "heading": "DNS lookups on average take between 20-120 milliseconds to",
      "level": 3,
      "page": 99
    },
    {
      "heading": "complete (according to YSlow).",
      "level": 3,
      "page": 99
    },
    {
      "heading": "What happens when you type a URL into your browser?",
      "level": 2,
      "page": 100
    },
    {
      "heading": "The diagram below illustrates the steps.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "1. Bob enters a URL into the browser and hits Enter. In this example,",
      "level": 3,
      "page": 100
    },
    {
      "heading": "the URL is composed of 4 parts:",
      "level": 3,
      "page": 100
    },
    {
      "heading": "🔹 scheme - 𝒉𝒕𝒕𝒑𝒔://. This tells the browser to send a connection to the",
      "level": 3,
      "page": 100
    },
    {
      "heading": "server using HTTPS.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "' domain - 𝒆𝒙𝒂𝒎𝒑𝒍𝒆.𝒄𝒐𝒎. This is the domain name of the site.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "' path - 𝒑𝒓𝒐𝒅𝒖𝒄𝒕/𝒆𝒍𝒆𝒄𝒕𝒓𝒊𝒄. It is the path on the server to the requested",
      "level": 3,
      "page": 100
    },
    {
      "heading": "resource: phone.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "' resource - 𝒑𝒉𝒐𝒏𝒆. It is the name of the resource Bob wants to visit.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "2. The browser looks up the IP address for the domain with a domain",
      "level": 3,
      "page": 100
    },
    {
      "heading": "name system (DNS) lookup. To make the lookup process fast, data is",
      "level": 3,
      "page": 100
    },
    {
      "heading": "cached at different layers: browser cache, OS cache, local network",
      "level": 3,
      "page": 100
    },
    {
      "heading": "cache and ISP cache.",
      "level": 3,
      "page": 100
    },
    {
      "heading": "2.1 If the IP address cannot be found at any of the caches, the browser",
      "level": 3,
      "page": 101
    },
    {
      "heading": "goes to DNS servers to do a recursive DNS lookup until the IP address",
      "level": 3,
      "page": 101
    },
    {
      "heading": "is found (this will be covered in another post).",
      "level": 3,
      "page": 101
    },
    {
      "heading": "3. Now that we have the IP address of the server, the browser",
      "level": 3,
      "page": 101
    },
    {
      "heading": "establishes a TCP connection with the server.",
      "level": 3,
      "page": 101
    },
    {
      "heading": "4. The browser sends a HTTP request to the server. The request looks",
      "level": 3,
      "page": 101
    },
    {
      "heading": "like this:",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘎𝘌𝘛 /𝘱𝘩𝘰𝘯𝘦 𝘏𝘛𝘛𝘗/1.1",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘏𝘰𝘴𝘵: 𝘦𝘹𝘢𝘮𝘱𝘭𝘦.𝘤𝘰𝘮",
      "level": 3,
      "page": 101
    },
    {
      "heading": "5. The server processes the request and sends back the response. For",
      "level": 3,
      "page": 101
    },
    {
      "heading": "a successful response (the status code is 200). The HTML response",
      "level": 3,
      "page": 101
    },
    {
      "heading": "might look like this:",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘏𝘛𝘛𝘗/1.1 200 𝘖𝘒",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘋𝘢𝘵𝘦: 𝘚𝘶𝘯, 30 𝘑𝘢𝘯 2022 00:01:01 𝘎𝘔𝘛",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘚𝘦𝘳𝘷𝘦𝘳: 𝘈𝘱𝘢𝘤𝘩𝘦",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘊𝘰𝘯𝘵𝘦𝘯𝘵-𝘛𝘺𝘱𝘦: 𝘵𝘦𝘹𝘵/𝘩𝘵𝘮𝘭; 𝘤𝘩𝘢𝘳𝘴𝘦𝘵=𝘶𝘵𝘧-8",
      "level": 3,
      "page": 101
    },
    {
      "heading": "<!𝘋𝘖𝘊𝘛𝘠𝘗𝘌 𝘩𝘵𝘮𝘭>",
      "level": 3,
      "page": 101
    },
    {
      "heading": "<𝘩𝘵𝘮𝘭 𝘭𝘢𝘯𝘨=\"𝘦𝘯\">",
      "level": 3,
      "page": 101
    },
    {
      "heading": "𝘏𝘦𝘭𝘭𝘰 𝘸𝘰𝘳𝘭𝘥",
      "level": 3,
      "page": 101
    },
    {
      "heading": "</𝘩𝘵𝘮𝘭>",
      "level": 3,
      "page": 101
    },
    {
      "heading": "6. The browser renders the HTML content.",
      "level": 3,
      "page": 101
    },
    {
      "heading": "100",
      "level": 3,
      "page": 101
    },
    {
      "heading": "AI Coding engine",
      "level": 2,
      "page": 102
    },
    {
      "heading": "DeepMind says its new AI coding engine (AlphaCode) is as good as an",
      "level": 3,
      "page": 102
    },
    {
      "heading": "average programmer.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "The AI bot participated in the 10 Codeforces coding competitions and",
      "level": 3,
      "page": 102
    },
    {
      "heading": "was ranked 54.3%. It means its score exceeded half of the human",
      "level": 3,
      "page": 102
    },
    {
      "heading": "contestants. If we look at its score for the last 6 months, AlphaCode",
      "level": 3,
      "page": 102
    },
    {
      "heading": "ranks at 28%.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "The diagram below explains how the AI bot works:",
      "level": 3,
      "page": 102
    },
    {
      "heading": "1. Pre-train the transformer models on GitHub code.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "2. Fine-tune the models on the relatively small competitive",
      "level": 3,
      "page": 102
    },
    {
      "heading": "programming dataset.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "3. At evaluation time, create a massive amount of solutions for each",
      "level": 3,
      "page": 102
    },
    {
      "heading": "problem.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "4. Filter, cluster and rerank the solutions to a small set of candidate",
      "level": 3,
      "page": 102
    },
    {
      "heading": "programs (at most 10), and then submit for further assessments.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "5. Run the candidate programs against the test cases, evaluate the",
      "level": 3,
      "page": 102
    },
    {
      "heading": "performance, and choose the best one.",
      "level": 3,
      "page": 102
    },
    {
      "heading": "101",
      "level": 3,
      "page": 102
    },
    {
      "heading": "Do you think AI bot will be better at Leetcode or competitive",
      "level": 3,
      "page": 103
    },
    {
      "heading": "programming than software engineers five years from now?",
      "level": 3,
      "page": 103
    },
    {
      "heading": "102",
      "level": 3,
      "page": 103
    },
    {
      "heading": "Read replica pattern",
      "level": 2,
      "page": 104
    },
    {
      "heading": "There are two common ways to implement the read replica pattern:",
      "level": 3,
      "page": 104
    },
    {
      "heading": "1. Embed the routing logic in the application code (explained in the last",
      "level": 3,
      "page": 104
    },
    {
      "heading": "post).",
      "level": 3,
      "page": 104
    },
    {
      "heading": "2. Use database middleware.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "We focus on option 2 here. The middleware provides transparent",
      "level": 3,
      "page": 104
    },
    {
      "heading": "routing between the application and database servers. We can",
      "level": 3,
      "page": 104
    },
    {
      "heading": "customize the routing logic based on difficult rules such as user,",
      "level": 3,
      "page": 104
    },
    {
      "heading": "schema, statement, etc.",
      "level": 3,
      "page": 104
    },
    {
      "heading": "The diagram below illustrates the setup:",
      "level": 3,
      "page": 104
    },
    {
      "heading": "103",
      "level": 3,
      "page": 104
    },
    {
      "heading": "1. When Alice places an order on amazon, the request is sent to Order",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Service.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "2. Order Service does not directly interact with the database. Instead, it",
      "level": 3,
      "page": 105
    },
    {
      "heading": "sends database queries to the database middleware.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "3. The database middleware routes writes to the primary database.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Data is replicated to two replicas.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "4. Alice views the order details (read). The request is sent through the",
      "level": 3,
      "page": 105
    },
    {
      "heading": "middleware.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "5. Alice views the recent order history (read). The request is sent",
      "level": 3,
      "page": 105
    },
    {
      "heading": "through the middleware.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "The database middleware acts as a proxy between the application and",
      "level": 3,
      "page": 105
    },
    {
      "heading": "databases. It uses standard MySQL network protocol for",
      "level": 3,
      "page": 105
    },
    {
      "heading": "communication.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Pros:",
      "level": 3,
      "page": 105
    },
    {
      "heading": "- Simplified application code. The application doesn’t need to be aware",
      "level": 3,
      "page": 105
    },
    {
      "heading": "of the database topology and manage access to the database directly.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "- Better compatibility. The middleware uses the MySQL network",
      "level": 3,
      "page": 105
    },
    {
      "heading": "protocol. Any MySQL compatible client can connect to the middleware",
      "level": 3,
      "page": 105
    },
    {
      "heading": "easily. This makes database migration easier.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Cons:",
      "level": 3,
      "page": 105
    },
    {
      "heading": "- Increased system complexity. A database middleware is a complex",
      "level": 3,
      "page": 105
    },
    {
      "heading": "system. Since all database queries go through the middleware, it",
      "level": 3,
      "page": 105
    },
    {
      "heading": "usually requires a high availability setup to avoid a single point of",
      "level": 3,
      "page": 105
    },
    {
      "heading": "failure.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "- Additional middleware layer means additional network latency.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Therefore, this layer requires excellent performance.",
      "level": 3,
      "page": 105
    },
    {
      "heading": "104",
      "level": 3,
      "page": 105
    },
    {
      "heading": "Read replica pattern",
      "level": 2,
      "page": 106
    },
    {
      "heading": "In this post, we talk about a simple yet commonly used database",
      "level": 3,
      "page": 106
    },
    {
      "heading": "design pattern (setup): 𝐑𝐞𝐚𝐝 𝐫𝐞𝐩𝐥𝐢𝐜𝐚 𝐩𝐚𝐭𝐭𝐞𝐫𝐧.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "In this setup, all data-modifying commands like insert, delete, or",
      "level": 3,
      "page": 106
    },
    {
      "heading": "update are sent to the primary DB, and reads are sent to read replicas.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "The diagram below illustrates the setup:",
      "level": 3,
      "page": 106
    },
    {
      "heading": "1. When Alice places an order on amazon.com, the request is sent",
      "level": 3,
      "page": 106
    },
    {
      "heading": "to Order Service.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "2. Order Service creates a record about the order in the primary",
      "level": 3,
      "page": 106
    },
    {
      "heading": "DB (write). Data is replicated to two replicas.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "3. Alice views the order details. Data is served from a replica",
      "level": 3,
      "page": 106
    },
    {
      "heading": "(read).",
      "level": 3,
      "page": 106
    },
    {
      "heading": "4. Alice views the recent order history. Data is served from a",
      "level": 3,
      "page": 106
    },
    {
      "heading": "replica (read).",
      "level": 3,
      "page": 106
    },
    {
      "heading": "There is one major problem in this setup: 𝐫𝐞𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐥𝐚𝐠.",
      "level": 3,
      "page": 106
    },
    {
      "heading": "105",
      "level": 3,
      "page": 106
    },
    {
      "heading": "Under certain circumstances (network delay, server overload, etc.),",
      "level": 3,
      "page": 107
    },
    {
      "heading": "data in replicas might be seconds or even minutes behind. In this case,",
      "level": 3,
      "page": 107
    },
    {
      "heading": "if Alice immediately checks the order status (query is served by the",
      "level": 3,
      "page": 107
    },
    {
      "heading": "replica) after the order is placed, she might not see the order at all.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "This leaves Alice confused. In this case, we need “read-after-write”",
      "level": 3,
      "page": 107
    },
    {
      "heading": "consistency.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "Possible solutions to mitigate this problem:",
      "level": 3,
      "page": 107
    },
    {
      "heading": "1⃣ Latency sensitive reads are sent to the primary database.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "2⃣ Reads that immediately follow writes are routed to the primary",
      "level": 3,
      "page": 107
    },
    {
      "heading": "database.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "3⃣A relational DB generally provides a way to check if a replica is",
      "level": 3,
      "page": 107
    },
    {
      "heading": "caught up with the primary. If data is up to date, query the replica.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "Otherwise, fail the read request or read from the primary.",
      "level": 3,
      "page": 107
    },
    {
      "heading": "106",
      "level": 3,
      "page": 107
    },
    {
      "heading": "Email receiving flow",
      "level": 2,
      "page": 108
    },
    {
      "heading": "The following diagram demonstrates the email receiving flow.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "1. Incoming emails arrive at the SMTP load balancer.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "2. The load balancer distributes traffic among SMTP servers. Email",
      "level": 3,
      "page": 108
    },
    {
      "heading": "acceptance policy can be configured and applied at the",
      "level": 3,
      "page": 108
    },
    {
      "heading": "SMTP-connection level. For example, invalid emails are bounced to",
      "level": 3,
      "page": 108
    },
    {
      "heading": "avoid unnecessary email processing.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "3. If the attachment of an email is too large to put into the queue, we",
      "level": 3,
      "page": 108
    },
    {
      "heading": "can put it into the attachment store (s3).",
      "level": 3,
      "page": 108
    },
    {
      "heading": "4. Emails are put in the incoming email queue. The queue decouples",
      "level": 3,
      "page": 108
    },
    {
      "heading": "mail processing workers from SMTP servers so they can be scaled",
      "level": 3,
      "page": 108
    },
    {
      "heading": "independently. Moreover, the queue serves as a buffer in case the",
      "level": 3,
      "page": 108
    },
    {
      "heading": "email volume surges.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "5. Mail processing workers are responsible for a lot of tasks, including",
      "level": 3,
      "page": 108
    },
    {
      "heading": "filtering out spam mails, stopping viruses, etc. The following steps",
      "level": 3,
      "page": 108
    },
    {
      "heading": "assume an email passed the validation.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "6. The email is stored in the mail storage, cache, and object data store.",
      "level": 3,
      "page": 108
    },
    {
      "heading": "107",
      "level": 3,
      "page": 108
    },
    {
      "heading": "7. If the receiver is currently online, the email is pushed to real-time",
      "level": 3,
      "page": 109
    },
    {
      "heading": "servers.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "8. Real-time servers are WebSocket servers that allow clients to",
      "level": 3,
      "page": 109
    },
    {
      "heading": "receive new emails in real-time.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "9. For offline users, emails are stored in the storage layer. When a user",
      "level": 3,
      "page": 109
    },
    {
      "heading": "comes back online, the webmail client connects to web servers via",
      "level": 3,
      "page": 109
    },
    {
      "heading": "RESTful API.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "10. Web servers pull new emails from the storage layer and return",
      "level": 3,
      "page": 109
    },
    {
      "heading": "them to the client.",
      "level": 3,
      "page": 109
    },
    {
      "heading": "108",
      "level": 3,
      "page": 109
    },
    {
      "heading": "Email sending flow",
      "level": 2,
      "page": 110
    },
    {
      "heading": "In this post, we will take a closer look at the email sending flow.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "1. A user writes an email on webmail and presses the “send” button.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "The request is sent to the load balancer.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "2. The load balancer makes sure it doesn’t exceed the rate limit and",
      "level": 3,
      "page": 110
    },
    {
      "heading": "routes traffic to web servers.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "3. Web servers are responsible for:",
      "level": 3,
      "page": 110
    },
    {
      "heading": "- Basic email validation. Each incoming email is checked against",
      "level": 3,
      "page": 110
    },
    {
      "heading": "pre-defined rules such as email size limit.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "- Checking if the domain of the recipient’s email address is the",
      "level": 3,
      "page": 110
    },
    {
      "heading": "same as the sender. If it is the same, email data is inserted to storage,",
      "level": 3,
      "page": 110
    },
    {
      "heading": "cache, and object store directly. The recipient can fetch the email",
      "level": 3,
      "page": 110
    },
    {
      "heading": "directly via the RESTful API. There is no need to go to step 4.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "4. Message queues.",
      "level": 3,
      "page": 110
    },
    {
      "heading": "109",
      "level": 3,
      "page": 110
    },
    {
      "heading": "4.a. If basic email validation succeeds, the email data is passed to",
      "level": 3,
      "page": 111
    },
    {
      "heading": "the outgoing queue.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "4.b. If basic email validation fails, the email is put in the error",
      "level": 3,
      "page": 111
    },
    {
      "heading": "queue.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "5. SMTP outgoing workers pull events from the outgoing queue and",
      "level": 3,
      "page": 111
    },
    {
      "heading": "make sure emails are spam and virus free.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "6. The outgoing email is stored in the “Sent Folder” of the storage",
      "level": 3,
      "page": 111
    },
    {
      "heading": "layer.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "7. SMTP outgoing workers send the email to the recipient mail server.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "Each message in the outgoing queue contains all the metadata",
      "level": 3,
      "page": 111
    },
    {
      "heading": "required to create an email. A distributed message queue is a critical",
      "level": 3,
      "page": 111
    },
    {
      "heading": "component that allows asynchronous mail processing. By decoupling",
      "level": 3,
      "page": 111
    },
    {
      "heading": "SMTP outgoing workers from the web servers, we can scale SMTP",
      "level": 3,
      "page": 111
    },
    {
      "heading": "outgoing workers independently.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "We monitor the size of the outgoing queue very closely. If there are",
      "level": 3,
      "page": 111
    },
    {
      "heading": "many emails stuck in the queue, we need to analyze the cause of the",
      "level": 3,
      "page": 111
    },
    {
      "heading": "issue. Here are some possibilities:",
      "level": 3,
      "page": 111
    },
    {
      "heading": "- The recipient’s mail server is unavailable. In this case, we need to",
      "level": 3,
      "page": 111
    },
    {
      "heading": "retry sending the email at a later time. Exponential backoff might be a",
      "level": 3,
      "page": 111
    },
    {
      "heading": "good retry strategy.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "- Not enough consumers to send emails. In this case, we may need",
      "level": 3,
      "page": 111
    },
    {
      "heading": "more consumers to reduce the processing time.",
      "level": 3,
      "page": 111
    },
    {
      "heading": "110",
      "level": 3,
      "page": 111
    },
    {
      "heading": "Interview Question: Design Gmail",
      "level": 2,
      "page": 112
    },
    {
      "heading": "One picture is worth more than a thousand words. In this post, we will",
      "level": 3,
      "page": 112
    },
    {
      "heading": "take a look at what happens when Alice sends an email to Bob.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "1. Alice logs in to her Outlook client, composes an email, and presses",
      "level": 3,
      "page": 112
    },
    {
      "heading": "“send”. The email is sent to the Outlook mail server. The",
      "level": 3,
      "page": 112
    },
    {
      "heading": "communication protocol between the Outlook client and mail server is",
      "level": 3,
      "page": 112
    },
    {
      "heading": "SMTP.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "2. Outlook mail server queries the DNS (not shown in the diagram) to",
      "level": 3,
      "page": 112
    },
    {
      "heading": "find the address of the recipient’s SMTP server. In this case, it is",
      "level": 3,
      "page": 112
    },
    {
      "heading": "Gmail’s SMTP server. Next, it transfers the email to the Gmail mail",
      "level": 3,
      "page": 112
    },
    {
      "heading": "server. The communication protocol between the mail servers is SMTP.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "3. The Gmail server stores the email and makes it available to Bob, the",
      "level": 3,
      "page": 112
    },
    {
      "heading": "recipient.",
      "level": 3,
      "page": 112
    },
    {
      "heading": "111",
      "level": 3,
      "page": 112
    },
    {
      "heading": "4. Gmail client fetches new emails through the IMAP/POP server when",
      "level": 3,
      "page": 113
    },
    {
      "heading": "Bob logs in to Gmail.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "Please keep in mind this is a highly simplified design. Hope it sparks",
      "level": 3,
      "page": 113
    },
    {
      "heading": "your interest and curiosity:) I'll explain each component in more depth",
      "level": 3,
      "page": 113
    },
    {
      "heading": "in the future.",
      "level": 3,
      "page": 113
    },
    {
      "heading": "112",
      "level": 3,
      "page": 113
    },
    {
      "heading": "Map rendering",
      "level": 2,
      "page": 114
    },
    {
      "heading": "Google Maps Continued. Let’s take a look at 𝐌𝐚𝐩 𝐑𝐞𝐧𝐝𝐞𝐫𝐢𝐧𝐠 in this",
      "level": 3,
      "page": 114
    },
    {
      "heading": "post.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "𝐏𝐫𝐞-𝐂𝐨𝐦𝐩𝐮𝐭𝐞𝐝 𝐓𝐢𝐥𝐞𝐬",
      "level": 3,
      "page": 114
    },
    {
      "heading": "One foundational concept in map rendering is tiling. Instead of",
      "level": 3,
      "page": 114
    },
    {
      "heading": "rendering the entire map as one large custom image, the world is",
      "level": 3,
      "page": 114
    },
    {
      "heading": "broken up into smaller tiles. The client only downloads the relevant",
      "level": 3,
      "page": 114
    },
    {
      "heading": "tiles for the area the user is in and stitches them together like a mosaic",
      "level": 3,
      "page": 114
    },
    {
      "heading": "for display. The tiles are pre-computed at different zoom levels. Google",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Maps uses 21 zoom levels.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "For example, at zoom level 0, The entire map is represented by a",
      "level": 3,
      "page": 114
    },
    {
      "heading": "single tile of size 256 * 256 pixels. Then at zoom level 1, the number of",
      "level": 3,
      "page": 114
    },
    {
      "heading": "map tiles doubles in both north-south and east-west directions, while",
      "level": 3,
      "page": 114
    },
    {
      "heading": "each tile stays at 256 * 256 pixels. So we have 4 tiles at zoom level 1,",
      "level": 3,
      "page": 114
    },
    {
      "heading": "and the whole image of zoom level 1 is 512 * 512 pixels. With each",
      "level": 3,
      "page": 114
    },
    {
      "heading": "increment, the entire set of tiles has 4x as many pixels as the previous",
      "level": 3,
      "page": 114
    },
    {
      "heading": "level. The increased pixel count provides an increasing level of detail",
      "level": 3,
      "page": 114
    },
    {
      "heading": "to the user.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "This allows the client to render the map at the best granularities",
      "level": 3,
      "page": 114
    },
    {
      "heading": "depending on the client’s zoom level without consuming excessive",
      "level": 3,
      "page": 114
    },
    {
      "heading": "bandwidth to download tiles with too much detail. This is especially",
      "level": 3,
      "page": 114
    },
    {
      "heading": "important when we are loading the images from mobile clients.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "𝐑𝐨𝐚𝐝 𝐒𝐞𝐠𝐦𝐞𝐧𝐭𝐬",
      "level": 3,
      "page": 114
    },
    {
      "heading": "Now that we have transformed massive maps into tiles, we also need",
      "level": 3,
      "page": 114
    },
    {
      "heading": "to define a data structure for the roads. We divide the world of roads",
      "level": 3,
      "page": 114
    },
    {
      "heading": "into small blocks. We call these blocks road segments. Each road",
      "level": 3,
      "page": 114
    },
    {
      "heading": "segment contains multiple roads, junctions, and other metadata.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "We group nearby segments into super segments. This process can be",
      "level": 3,
      "page": 114
    },
    {
      "heading": "applied repeatedly to meet the level of coverage required.",
      "level": 3,
      "page": 114
    },
    {
      "heading": "We then transform the road segments into a data structure that the",
      "level": 3,
      "page": 114
    },
    {
      "heading": "navigation algorithms can use. The typical approach is to convert the",
      "level": 3,
      "page": 114
    },
    {
      "heading": "map into a 𝒈𝒓𝒂𝒑𝒉, where the nodes are road segments, and two nodes",
      "level": 3,
      "page": 114
    },
    {
      "heading": "are connected if the corresponding road segments are reachable",
      "level": 3,
      "page": 114
    },
    {
      "heading": "113",
      "level": 3,
      "page": 114
    },
    {
      "heading": "neighbors. In this way, finding a path between two locations becomes a",
      "level": 3,
      "page": 115
    },
    {
      "heading": "shortest-path problem, where we can leverage Dijkstra or A*",
      "level": 3,
      "page": 115
    },
    {
      "heading": "algorithms.",
      "level": 3,
      "page": 115
    },
    {
      "heading": "114",
      "level": 3,
      "page": 115
    },
    {
      "heading": "Interview Question: Design Google Maps",
      "level": 2,
      "page": 116
    },
    {
      "heading": "Google started project G𝐨𝐨𝐠𝐥𝐞 M𝐚𝐩𝐬 in 2005. As of March 2021, Google",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Maps had one billion daily active users, 99% coverage of the world in",
      "level": 3,
      "page": 116
    },
    {
      "heading": "200 countries.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "Although Google Maps is a very complex system, we can break it",
      "level": 3,
      "page": 116
    },
    {
      "heading": "down into 3 high-level components. In this post, let’s take a look at how",
      "level": 3,
      "page": 116
    },
    {
      "heading": "to design a simplified Google Maps.",
      "level": 3,
      "page": 116
    },
    {
      "heading": "115",
      "level": 3,
      "page": 116
    },
    {
      "heading": "𝐋𝐨𝐜𝐚𝐭𝐢𝐨𝐧 𝐒𝐞𝐫𝐯𝐢𝐜𝐞",
      "level": 3,
      "page": 117
    },
    {
      "heading": "The location service is responsible for recording a user’s location",
      "level": 3,
      "page": 117
    },
    {
      "heading": "update. The Google Map clients send location updates every few",
      "level": 3,
      "page": 117
    },
    {
      "heading": "seconds. The user location data is used in many cases:",
      "level": 3,
      "page": 117
    },
    {
      "heading": "-  detect new and recently closed roads",
      "level": 3,
      "page": 117
    },
    {
      "heading": "- improve the accuracy of the map over time",
      "level": 3,
      "page": 117
    },
    {
      "heading": "- used as an input for live traffic data.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "𝐌𝐚𝐩 𝐑𝐞𝐧𝐝𝐞𝐫𝐢𝐧𝐠",
      "level": 3,
      "page": 117
    },
    {
      "heading": "The world’s map is projected into a huge 2D map image. It is broken",
      "level": 3,
      "page": 117
    },
    {
      "heading": "down into small image blocks called “tiles” (see below). The tiles are",
      "level": 3,
      "page": 117
    },
    {
      "heading": "static. They don’t change very often. An efficient way to serve static tile",
      "level": 3,
      "page": 117
    },
    {
      "heading": "files is with a CDN backed by cloud storage like S3. The users can",
      "level": 3,
      "page": 117
    },
    {
      "heading": "load the necessary tiles to compose a map from nearby CDN.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "What if a user is zooming and panning the map viewpoint on the client",
      "level": 3,
      "page": 117
    },
    {
      "heading": "to explore their surroundings?",
      "level": 3,
      "page": 117
    },
    {
      "heading": "An efficient way is to pre-calculate the map blocks with different zoom",
      "level": 3,
      "page": 117
    },
    {
      "heading": "levels and load the images when needed.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "𝐍𝐚𝐯𝐢𝐠𝐚𝐭𝐢𝐨𝐧 𝐒𝐞𝐫𝐯𝐢𝐜𝐞",
      "level": 3,
      "page": 117
    },
    {
      "heading": "This component is responsible for finding a reasonably fast route from",
      "level": 3,
      "page": 117
    },
    {
      "heading": "point A to point B. It calls two services to help with the path calculation:",
      "level": 3,
      "page": 117
    },
    {
      "heading": "1⃣ Geocoding Service: resolve the given address to a latitude/longitude",
      "level": 3,
      "page": 117
    },
    {
      "heading": "pair",
      "level": 3,
      "page": 117
    },
    {
      "heading": "2⃣ Route Planner Service: this service does three things in sequence:",
      "level": 3,
      "page": 117
    },
    {
      "heading": "- Calculate the top-K shortest paths between A and B",
      "level": 3,
      "page": 117
    },
    {
      "heading": "- Calculate the estimation of time for each path based on current",
      "level": 3,
      "page": 117
    },
    {
      "heading": "traffic and historical data",
      "level": 3,
      "page": 117
    },
    {
      "heading": "- Rank the paths by time predictions and user filtering. For example,",
      "level": 3,
      "page": 117
    },
    {
      "heading": "the user doesn’t want to avoid tolls.",
      "level": 3,
      "page": 117
    },
    {
      "heading": "116",
      "level": 3,
      "page": 117
    },
    {
      "heading": "Pull vs push models",
      "level": 2,
      "page": 118
    },
    {
      "heading": "There are two ways metrics data can be collected, pull or push. It is a",
      "level": 3,
      "page": 118
    },
    {
      "heading": "routine debate as to which one is better and there is no clear answer.",
      "level": 3,
      "page": 118
    },
    {
      "heading": "In this post, we will take a look at the pull model.",
      "level": 3,
      "page": 118
    },
    {
      "heading": "117",
      "level": 3,
      "page": 118
    },
    {
      "heading": "Figure 1 shows data collection with a pull model over HTTP. We have",
      "level": 3,
      "page": 119
    },
    {
      "heading": "dedicated metric collectors which pull metrics values from the running",
      "level": 3,
      "page": 119
    },
    {
      "heading": "applications periodically.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "In this approach, the metrics collector needs to know the complete list",
      "level": 3,
      "page": 119
    },
    {
      "heading": "of service endpoints to pull data from. One naive approach is to use a",
      "level": 3,
      "page": 119
    },
    {
      "heading": "file to hold DNS/IP information for every service endpoint on the",
      "level": 3,
      "page": 119
    },
    {
      "heading": "“metric collector” servers. While the idea is simple, this approach is",
      "level": 3,
      "page": 119
    },
    {
      "heading": "hard to maintain in a large-scale environment where servers are added",
      "level": 3,
      "page": 119
    },
    {
      "heading": "or removed frequently, and we want to ensure that metric collectors",
      "level": 3,
      "page": 119
    },
    {
      "heading": "don’t miss out on collecting metrics from any new servers.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "The good news is that we have a reliable, scalable, and maintainable",
      "level": 3,
      "page": 119
    },
    {
      "heading": "solution available through Service Discovery, provided by Kubernetes,",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Zookeeper, etc., wherein services register their availability and the",
      "level": 3,
      "page": 119
    },
    {
      "heading": "metrics collector can be notified by the Service Discovery component",
      "level": 3,
      "page": 119
    },
    {
      "heading": "whenever the list of service endpoints changes. Service discovery",
      "level": 3,
      "page": 119
    },
    {
      "heading": "contains configuration rules about when and where to collect metrics",
      "level": 3,
      "page": 119
    },
    {
      "heading": "as shown in Figure 2.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Figure 3 explains the pull model in detail.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "1⃣ The metrics collector fetches configuration metadata of service",
      "level": 3,
      "page": 119
    },
    {
      "heading": "endpoints from Service Discovery. Metadata include pulling interval, IP",
      "level": 3,
      "page": 119
    },
    {
      "heading": "addresses, timeout and retries parameters, etc.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "2⃣ The metrics collector pulls metrics data via a pre-defined HTTP",
      "level": 3,
      "page": 119
    },
    {
      "heading": "endpoint (for example, /metrics). To expose the endpoint, a client",
      "level": 3,
      "page": 119
    },
    {
      "heading": "library usually needs to be added to the service. In Figure 3, the",
      "level": 3,
      "page": 119
    },
    {
      "heading": "service is Web Servers.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "3⃣ Optionally, the metrics collector registers a change event notification",
      "level": 3,
      "page": 119
    },
    {
      "heading": "with Service Discovery to receive an update whenever the service",
      "level": 3,
      "page": 119
    },
    {
      "heading": "endpoints change. Alternatively, the metrics collector can poll for",
      "level": 3,
      "page": 119
    },
    {
      "heading": "endpoint changes periodically.",
      "level": 3,
      "page": 119
    },
    {
      "heading": "118",
      "level": 3,
      "page": 119
    },
    {
      "heading": "Money movement",
      "level": 2,
      "page": 120
    },
    {
      "heading": "One picture is worth more than a thousand words. This is what",
      "level": 3,
      "page": 120
    },
    {
      "heading": "happens when you buy a product using Paypal/bank card under the",
      "level": 3,
      "page": 120
    },
    {
      "heading": "hood.",
      "level": 3,
      "page": 120
    },
    {
      "heading": "To understand this, we need to digest two concepts: 𝐜𝐥𝐞𝐚𝐫𝐢𝐧𝐠 &",
      "level": 3,
      "page": 120
    },
    {
      "heading": "𝐬𝐞𝐭𝐭𝐥𝐞𝐦𝐞𝐧𝐭. Clearing is a process that calculates who should pay whom",
      "level": 3,
      "page": 120
    },
    {
      "heading": "with how much money; while settlement is a process where real money",
      "level": 3,
      "page": 120
    },
    {
      "heading": "moves between reserves in the settlement bank.",
      "level": 3,
      "page": 120
    },
    {
      "heading": "119",
      "level": 3,
      "page": 120
    },
    {
      "heading": "Let’s say Bob wants to buy an SDI book from Claire’s shop on",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Amazon.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "- Pay-in flow (Bob pays Amazon money):",
      "level": 3,
      "page": 121
    },
    {
      "heading": "1.1 Bob buys a book on Amazon using Paypal.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "1.2 Amazon issues a money transfer request to Paypal.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "1.3 Since the payment token of Bob’s debit card is stored in Paypal,",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Paypal can transfer money, on Bob’s behalf, to Amazon’s bank",
      "level": 3,
      "page": 121
    },
    {
      "heading": "account in Bank A.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "1.4 Both Bank A and Bank B send transaction statements to the",
      "level": 3,
      "page": 121
    },
    {
      "heading": "clearing institution. It reduces the transactions that need to be settled.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Let’s assume Bank A owns Bank B $100 and Bank B owns bank A",
      "level": 3,
      "page": 121
    },
    {
      "heading": "$500 at the end of the day. When they settle, the net position is that",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Bank B pays Bank A $400.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "1.5 & 1.6 The clearing institution sends clearing and settlement",
      "level": 3,
      "page": 121
    },
    {
      "heading": "information to the settlement bank. Both Bank A and Bank B have",
      "level": 3,
      "page": 121
    },
    {
      "heading": "pre-deposited funds in the settlement bank as money reserves, so",
      "level": 3,
      "page": 121
    },
    {
      "heading": "actual money movement happens between two reserve accounts in",
      "level": 3,
      "page": 121
    },
    {
      "heading": "the settlement bank.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "- Pay-out flow (Amazon pays the money to the seller: Claire):",
      "level": 3,
      "page": 121
    },
    {
      "heading": "2.1 Amazon informs the seller (Claire) that she will get paid soon.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "2.2 Amazon issues a money transfer request from its own bank (Bank",
      "level": 3,
      "page": 121
    },
    {
      "heading": "A) to the seller bank (bank C). Here both banks record the",
      "level": 3,
      "page": 121
    },
    {
      "heading": "transactions, but no real money is moved.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "2.3 Both Bank A and Bank C send transaction statements to the",
      "level": 3,
      "page": 121
    },
    {
      "heading": "clearing institution.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "2.4 & 2.5 The clearing institution sends clearing and settlement",
      "level": 3,
      "page": 121
    },
    {
      "heading": "information to the settlement bank. Money is transferred from Bank A’s",
      "level": 3,
      "page": 121
    },
    {
      "heading": "reserve to Bank C’s reserve.",
      "level": 3,
      "page": 121
    },
    {
      "heading": "Notice that we have three layers:",
      "level": 3,
      "page": 121
    },
    {
      "heading": "- Transaction layer: where the online purchases happen",
      "level": 3,
      "page": 121
    },
    {
      "heading": "- Payment and clearing layer: where the payment instructions and",
      "level": 3,
      "page": 121
    },
    {
      "heading": "transaction netting happen",
      "level": 3,
      "page": 121
    },
    {
      "heading": "- Settlement layer: where the actual money movement happen",
      "level": 3,
      "page": 121
    },
    {
      "heading": "120",
      "level": 3,
      "page": 121
    },
    {
      "heading": "The first two layers are called information flow, and the settlement layer",
      "level": 3,
      "page": 122
    },
    {
      "heading": "is called fund flow.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "You can see the 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐟𝐥𝐨𝐰 𝐚𝐧𝐝 𝐟𝐮𝐧𝐝 𝐟𝐥𝐨𝐰 𝐚𝐫𝐞 𝐬𝐞𝐩𝐚𝐫𝐚𝐭𝐞𝐝. In the",
      "level": 3,
      "page": 122
    },
    {
      "heading": "info flow, the money seems to be deducted from one bank account and",
      "level": 3,
      "page": 122
    },
    {
      "heading": "added to another bank account, but the actual money movement",
      "level": 3,
      "page": 122
    },
    {
      "heading": "happens in the settlement bank at the end of the day.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "Because of the asynchronous nature of the info flow and the fund flow,",
      "level": 3,
      "page": 122
    },
    {
      "heading": "reconciliation is very important for data consistency in the systems",
      "level": 3,
      "page": 122
    },
    {
      "heading": "along with the flow.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "It makes things even more interesting when Bob wants to buy a book",
      "level": 3,
      "page": 122
    },
    {
      "heading": "in the Indian market, where Bob pays USD but the seller can only",
      "level": 3,
      "page": 122
    },
    {
      "heading": "receive INR.",
      "level": 3,
      "page": 122
    },
    {
      "heading": "121",
      "level": 3,
      "page": 122
    },
    {
      "heading": "Reconciliation",
      "level": 2,
      "page": 123
    },
    {
      "heading": "My previous post about painful payment reconciliation problems",
      "level": 3,
      "page": 123
    },
    {
      "heading": "sparked lots of interesting discussions. One of the readers shared",
      "level": 3,
      "page": 123
    },
    {
      "heading": "more problems we may face when working with intermediary payment",
      "level": 3,
      "page": 123
    },
    {
      "heading": "processors in the trenches and a potential solution:",
      "level": 3,
      "page": 123
    },
    {
      "heading": "1. Foreign Currency Problem: When you operate a store globally, you",
      "level": 3,
      "page": 123
    },
    {
      "heading": "will come across this problem quite frequently. To go back to the",
      "level": 3,
      "page": 123
    },
    {
      "heading": "example from Paypal - if the transaction happens in a currency",
      "level": 3,
      "page": 123
    },
    {
      "heading": "different from the standard currency of Paypal, this will create another",
      "level": 3,
      "page": 123
    },
    {
      "heading": "layer, where the transaction is first received in that currency and",
      "level": 3,
      "page": 123
    },
    {
      "heading": "exchanged to whatever currency your Paypal is using. There needs to",
      "level": 3,
      "page": 123
    },
    {
      "heading": "be a reliable way to reconcile that currency exchange transaction. It",
      "level": 3,
      "page": 123
    },
    {
      "heading": "certainly does not help that every payment provider handles this",
      "level": 3,
      "page": 123
    },
    {
      "heading": "differently.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "2. Payment providers are only that - intermediaries. Each purchase",
      "level": 3,
      "page": 123
    },
    {
      "heading": "does not trigger two events for a company, but actually at least 4. The",
      "level": 3,
      "page": 123
    },
    {
      "heading": "purchase via Paypal (where both the time and the currency dimension",
      "level": 3,
      "page": 123
    },
    {
      "heading": "can come into play) trigger the debit/credit pair for the transaction and",
      "level": 3,
      "page": 123
    },
    {
      "heading": "then, usually a few days later, another pair when the money is",
      "level": 3,
      "page": 123
    },
    {
      "heading": "transferred from Paypal to a bank account (where there might be yet",
      "level": 3,
      "page": 123
    },
    {
      "heading": "another FX discrepancy to reconcile if, for example, the initial purchase",
      "level": 3,
      "page": 123
    },
    {
      "heading": "was in JPY, Paypal is set up in USD and your bank account is in EUR).",
      "level": 3,
      "page": 123
    },
    {
      "heading": "There needs to be a way to reconcile all of these.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "3. Some problems also pop up on the buyer side that is very",
      "level": 3,
      "page": 123
    },
    {
      "heading": "platform-specific. One example is shadow transaction from Paypal: if",
      "level": 3,
      "page": 123
    },
    {
      "heading": "you buy two items on Paypal with 1 week of time between the two",
      "level": 3,
      "page": 123
    },
    {
      "heading": "transactions, Paypal will first debit money from your bank account for",
      "level": 3,
      "page": 123
    },
    {
      "heading": "transaction A. If at the time of transaction B, transaction A has not",
      "level": 3,
      "page": 123
    },
    {
      "heading": "gone through completely or is canceled, there might be a world where",
      "level": 3,
      "page": 123
    },
    {
      "heading": "Paypal will use the money from transaction A to partially pay for",
      "level": 3,
      "page": 123
    },
    {
      "heading": "transaction B, which leads to only a partial amount of transaction B",
      "level": 3,
      "page": 123
    },
    {
      "heading": "being withdrawn from the bank account.",
      "level": 3,
      "page": 123
    },
    {
      "heading": "In practice, this usually looks something like this:",
      "level": 3,
      "page": 123
    },
    {
      "heading": "1) Your shop assigns an order number to the purchase",
      "level": 3,
      "page": 123
    },
    {
      "heading": "122",
      "level": 3,
      "page": 123
    },
    {
      "heading": "2) The order number is carried over to the payment provider",
      "level": 3,
      "page": 124
    },
    {
      "heading": "3) The payment provider creates another internal ID, which is carried",
      "level": 3,
      "page": 124
    },
    {
      "heading": "over across transactions within the system",
      "level": 3,
      "page": 124
    },
    {
      "heading": "4) The payment ID is used when you get the payout on your bank",
      "level": 3,
      "page": 124
    },
    {
      "heading": "account (or the payment provider bundles individual payments, which",
      "level": 3,
      "page": 124
    },
    {
      "heading": "can be reconciled within the payment provider system)",
      "level": 3,
      "page": 124
    },
    {
      "heading": "5) Ideally, your payment provider and your shop have an",
      "level": 3,
      "page": 124
    },
    {
      "heading": "integration/API with the tool you use to (hopefully automatically) create",
      "level": 3,
      "page": 124
    },
    {
      "heading": "invoices. This usually carries over the order id from the shop (closing",
      "level": 3,
      "page": 124
    },
    {
      "heading": "the loop) and sometimes even the payment id to match it with the",
      "level": 3,
      "page": 124
    },
    {
      "heading": "invoice id, which you then can use to reconcile it with your accounts",
      "level": 3,
      "page": 124
    },
    {
      "heading": "receivable/payable. :)",
      "level": 3,
      "page": 124
    },
    {
      "heading": "Credit: A knowledgeable reader who prefers to stay private. Thank",
      "level": 3,
      "page": 124
    },
    {
      "heading": "you!",
      "level": 3,
      "page": 124
    },
    {
      "heading": "123",
      "level": 3,
      "page": 124
    },
    {
      "heading": "Continued: how to choose the right database for metrics collecting",
      "level": 3,
      "page": 125
    },
    {
      "heading": "service?",
      "level": 3,
      "page": 125
    },
    {
      "heading": "There are many storage systems available that are optimized for",
      "level": 3,
      "page": 125
    },
    {
      "heading": "time-series data. The optimization lets us use far fewer servers to",
      "level": 3,
      "page": 125
    },
    {
      "heading": "handle the same volume of data. Many of these databases also have",
      "level": 3,
      "page": 125
    },
    {
      "heading": "custom query interfaces specially designed for the analysis of",
      "level": 3,
      "page": 125
    },
    {
      "heading": "time-series data that are much easier to use than SQL. Some even",
      "level": 3,
      "page": 125
    },
    {
      "heading": "provide features to manage data retention and data aggregation. Here",
      "level": 3,
      "page": 125
    },
    {
      "heading": "are a few examples of time-series databases.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "OpenTSDB is a distributed time-series database, but since it is based",
      "level": 3,
      "page": 125
    },
    {
      "heading": "on Hadoop and HBase, running a Hadoop/HBase cluster adds",
      "level": 3,
      "page": 125
    },
    {
      "heading": "complexity. Twitter uses MetricsDB, and Amazon offers Timestream as",
      "level": 3,
      "page": 125
    },
    {
      "heading": "a time-series database. According to DB-engines, the two most",
      "level": 3,
      "page": 125
    },
    {
      "heading": "popular time-series databases are InfluxDB and Prometheus, which",
      "level": 3,
      "page": 125
    },
    {
      "heading": "are designed to store large volumes of time-series data and quickly",
      "level": 3,
      "page": 125
    },
    {
      "heading": "perform real-time analysis on that data. Both of them primarily rely on",
      "level": 3,
      "page": 125
    },
    {
      "heading": "an in-memory cache and on-disk storage. And they both handle",
      "level": 3,
      "page": 125
    },
    {
      "heading": "durability and performance quite well. According to the benchmark, an",
      "level": 3,
      "page": 125
    },
    {
      "heading": "InfluxDB with 8 cores and 32GB RAM can handle over 250,000 writes",
      "level": 3,
      "page": 125
    },
    {
      "heading": "per second.",
      "level": 3,
      "page": 125
    },
    {
      "heading": "124",
      "level": 3,
      "page": 125
    },
    {
      "heading": "Since a time-series database is a specialized database, you are not",
      "level": 3,
      "page": 126
    },
    {
      "heading": "expected to understand the internals in an interview unless you",
      "level": 3,
      "page": 126
    },
    {
      "heading": "explicitly mentioned it in your resume. For the purpose of an interview,",
      "level": 3,
      "page": 126
    },
    {
      "heading": "it’s important to understand the metrics data are time-series in nature",
      "level": 3,
      "page": 126
    },
    {
      "heading": "and we can select time-series databases such as InfluxDB for storage",
      "level": 3,
      "page": 126
    },
    {
      "heading": "to store them.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "Another feature of a strong time-series database is efficient",
      "level": 3,
      "page": 126
    },
    {
      "heading": "aggregation and analysis of a large amount of time-series data by",
      "level": 3,
      "page": 126
    },
    {
      "heading": "labels, also known as tags in some databases. For example, InfluxDB",
      "level": 3,
      "page": 126
    },
    {
      "heading": "builds indexes on labels to facilitate the fast lookup of time-series by",
      "level": 3,
      "page": 126
    },
    {
      "heading": "labels. It provides clear best-practice guidelines on how to use labels,",
      "level": 3,
      "page": 126
    },
    {
      "heading": "without overloading the database. The key is to make sure each label",
      "level": 3,
      "page": 126
    },
    {
      "heading": "is of low cardinality (having a small set of possible values). This feature",
      "level": 3,
      "page": 126
    },
    {
      "heading": "is critical for visualization, and it would take a lot of effort to build this",
      "level": 3,
      "page": 126
    },
    {
      "heading": "with a general-purpose database.",
      "level": 3,
      "page": 126
    },
    {
      "heading": "125",
      "level": 3,
      "page": 126
    },
    {
      "heading": "Which database shall I use for the metrics collecting",
      "level": 2,
      "page": 127
    },
    {
      "heading": "system?",
      "level": 2,
      "page": 127
    },
    {
      "heading": "This is one of the most important questions we need to address in an",
      "level": 3,
      "page": 127
    },
    {
      "heading": "interview.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "𝐃𝐚𝐭𝐚 𝐚𝐜𝐜𝐞𝐬𝐬 𝐩𝐚𝐭𝐭𝐞𝐫𝐧",
      "level": 3,
      "page": 127
    },
    {
      "heading": "As shown in the diagram, each label on the y-axis represents a time",
      "level": 3,
      "page": 127
    },
    {
      "heading": "series (uniquely identified by the names and labels) while the x-axis",
      "level": 3,
      "page": 127
    },
    {
      "heading": "represents time.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "The write load is heavy. As you can see, there can be many",
      "level": 3,
      "page": 127
    },
    {
      "heading": "time-series data points written at any moment. There are millions of",
      "level": 3,
      "page": 127
    },
    {
      "heading": "operational metrics written per day, and many metrics are collected at",
      "level": 3,
      "page": 127
    },
    {
      "heading": "high frequency, so the traffic is undoubtedly write-heavy.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "At the same time, the read load is spiky. Both visualization and alert",
      "level": 3,
      "page": 127
    },
    {
      "heading": "services send queries to the database and depending on the access",
      "level": 3,
      "page": 127
    },
    {
      "heading": "patterns of the graphs and alerts, the read volume could be bursty.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "𝐂𝐡𝐨𝐨𝐬𝐞 𝐭𝐡𝐞 𝐫𝐢𝐠𝐡𝐭 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞",
      "level": 3,
      "page": 127
    },
    {
      "heading": "The data storage system is the heart of the design. It’s not",
      "level": 3,
      "page": 127
    },
    {
      "heading": "recommended to build your own storage system or use a",
      "level": 3,
      "page": 127
    },
    {
      "heading": "general-purpose storage system (MySQL) for this job.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "A general-purpose database, in theory, could support time-series data,",
      "level": 3,
      "page": 127
    },
    {
      "heading": "but it would require expert-level tuning to make it work at our scale.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "Specifically, a relational database is not optimized for operations you",
      "level": 3,
      "page": 127
    },
    {
      "heading": "would commonly perform against time-series data. For example,",
      "level": 3,
      "page": 127
    },
    {
      "heading": "computing the moving average in a rolling time window requires",
      "level": 3,
      "page": 127
    },
    {
      "heading": "complicated SQL that is difficult to read (there is an example of this in",
      "level": 3,
      "page": 127
    },
    {
      "heading": "the deep dive section). Besides, to support tagging/labeling data, we",
      "level": 3,
      "page": 127
    },
    {
      "heading": "need to add an index for each tag. Moreover, a general-purpose",
      "level": 3,
      "page": 127
    },
    {
      "heading": "relational database does not perform well under constant heavy write",
      "level": 3,
      "page": 127
    },
    {
      "heading": "load. At our scale, we would need to expend significant effort in tuning",
      "level": 3,
      "page": 127
    },
    {
      "heading": "the database, and even then, it might not perform well.",
      "level": 3,
      "page": 127
    },
    {
      "heading": "126",
      "level": 3,
      "page": 127
    },
    {
      "heading": "How about NoSQL? In theory, a few NoSQL databases on the market",
      "level": 3,
      "page": 128
    },
    {
      "heading": "could handle time-series data effectively. For example, Cassandra and",
      "level": 3,
      "page": 128
    },
    {
      "heading": "Bigtable can both be used for time series data. However, this would",
      "level": 3,
      "page": 128
    },
    {
      "heading": "require deep knowledge of the internal workings of each NoSQL to",
      "level": 3,
      "page": 128
    },
    {
      "heading": "devise a scalable schema for effectively storing and querying",
      "level": 3,
      "page": 128
    },
    {
      "heading": "time-series data. With industrial-scale time-series databases readily",
      "level": 3,
      "page": 128
    },
    {
      "heading": "available, using a general purpose NoSQL database is not appealing.",
      "level": 3,
      "page": 128
    },
    {
      "heading": "There are many storage systems available that are optimized for",
      "level": 3,
      "page": 128
    },
    {
      "heading": "time-series data. The optimization lets us use far fewer servers to",
      "level": 3,
      "page": 128
    },
    {
      "heading": "handle the same volume of data. Many of these databases also have",
      "level": 3,
      "page": 128
    },
    {
      "heading": "custom query interfaces specially designed for the analysis of",
      "level": 3,
      "page": 128
    },
    {
      "heading": "time-series data that are much easier to use than SQL. Some even",
      "level": 3,
      "page": 128
    },
    {
      "heading": "provide features to manage data retention and data aggregation. Here",
      "level": 3,
      "page": 128
    },
    {
      "heading": "are a few examples of time-series databases.",
      "level": 3,
      "page": 128
    },
    {
      "heading": "OpenTSDB is a distributed time-series database, but since it is based",
      "level": 3,
      "page": 128
    },
    {
      "heading": "on Hadoop and HBase, running a Hadoop/HBase cluster adds",
      "level": 3,
      "page": 128
    },
    {
      "heading": "complexity. Twitter uses MetricsDB, and Amazon offers Timestream as",
      "level": 3,
      "page": 128
    },
    {
      "heading": "a time-series database. According to DB-engines, the two most",
      "level": 3,
      "page": 128
    },
    {
      "heading": "popular time-series databases are InfluxDB and Prometheus, which",
      "level": 3,
      "page": 128
    },
    {
      "heading": "are designed to store large volumes of time-series data and quickly",
      "level": 3,
      "page": 128
    },
    {
      "heading": "perform real-time analysis on that data. Both of them primarily rely on",
      "level": 3,
      "page": 128
    },
    {
      "heading": "an in-memory cache and on-disk storage. And they both handle",
      "level": 3,
      "page": 128
    },
    {
      "heading": "durability and performance quite well. According to the benchmark",
      "level": 3,
      "page": 128
    },
    {
      "heading": "listed on InfluxDB website, a DB server with 8 cores and 32GB RAM",
      "level": 3,
      "page": 128
    },
    {
      "heading": "can handle over 250,000 writes per second.",
      "level": 3,
      "page": 128
    },
    {
      "heading": "Since a time-series database is a specialized database, you are not",
      "level": 3,
      "page": 128
    },
    {
      "heading": "expected to understand the internals in an interview unless you",
      "level": 3,
      "page": 128
    },
    {
      "heading": "explicitly mentioned it in your resume. For the purpose of an interview,",
      "level": 3,
      "page": 128
    },
    {
      "heading": "it’s important to understand the metrics data are time-series in nature",
      "level": 3,
      "page": 128
    },
    {
      "heading": "and we can select time-series databases such as InfluxDB for storage",
      "level": 3,
      "page": 128
    },
    {
      "heading": "to store them.",
      "level": 3,
      "page": 128
    },
    {
      "heading": "Another feature of a strong time-series database is efficient",
      "level": 3,
      "page": 128
    },
    {
      "heading": "aggregation and analysis of a large amount of time-series data by",
      "level": 3,
      "page": 128
    },
    {
      "heading": "labels, also known as tags in some databases. For example, InfluxDB",
      "level": 3,
      "page": 128
    },
    {
      "heading": "builds indexes on labels to facilitate the fast lookup of time-series by",
      "level": 3,
      "page": 128
    },
    {
      "heading": "127",
      "level": 3,
      "page": 128
    },
    {
      "heading": "labels. It provides clear best-practice guidelines on how to use labels,",
      "level": 3,
      "page": 129
    },
    {
      "heading": "without overloading the database. The key is to make sure each label",
      "level": 3,
      "page": 129
    },
    {
      "heading": "is of low cardinality (having a small set of possible values). This feature",
      "level": 3,
      "page": 129
    },
    {
      "heading": "is critical for visualization, and it would take a lot of effort to build this",
      "level": 3,
      "page": 129
    },
    {
      "heading": "with a general-purpose database.",
      "level": 3,
      "page": 129
    },
    {
      "heading": "128",
      "level": 3,
      "page": 129
    },
    {
      "heading": "Metrics monitoring and altering system",
      "level": 2,
      "page": 130
    },
    {
      "heading": "A well-designed 𝐦𝐞𝐭𝐫𝐢𝐜𝐬 𝐦𝐨𝐧𝐢𝐭𝐨𝐫𝐢𝐧𝐠and alerting system plays a key",
      "level": 3,
      "page": 130
    },
    {
      "heading": "role in providing clear visibility into the health of the infrastructure to",
      "level": 3,
      "page": 130
    },
    {
      "heading": "ensure high availability and reliability. The diagram below explains how",
      "level": 3,
      "page": 130
    },
    {
      "heading": "it works at a high level.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Metrics source: This can be application servers, SQL databases,",
      "level": 3,
      "page": 130
    },
    {
      "heading": "message queues, etc.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Metrics collector: It gathers metrics data and writes data into the",
      "level": 3,
      "page": 130
    },
    {
      "heading": "time-series database.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "usually provides a custom query interface for analyzing and",
      "level": 3,
      "page": 130
    },
    {
      "heading": "summarizing a large amount of time-series data. It maintains indexes",
      "level": 3,
      "page": 130
    },
    {
      "heading": "on labels to facilitate the fast lookup of time-series data by labels.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Kafka: Kafka is used as a highly reliable and scalable distributed",
      "level": 3,
      "page": 130
    },
    {
      "heading": "messaging platform. It decouples the data collection and data",
      "level": 3,
      "page": 130
    },
    {
      "heading": "processing services from each other.",
      "level": 3,
      "page": 130
    },
    {
      "heading": "129",
      "level": 3,
      "page": 130
    },
    {
      "heading": "Consumers: Consumers or streaming processing services such as",
      "level": 3,
      "page": 131
    },
    {
      "heading": "Apache Storm, Flink and Spark, process and push data to the",
      "level": 3,
      "page": 131
    },
    {
      "heading": "time-series database.",
      "level": 3,
      "page": 131
    },
    {
      "heading": "Query service: The query service makes it easy to query and retrieve",
      "level": 3,
      "page": 131
    },
    {
      "heading": "data from the time-series database. This should be a very thin wrapper",
      "level": 3,
      "page": 131
    },
    {
      "heading": "if we choose a good time-series database. It could also be entirely",
      "level": 3,
      "page": 131
    },
    {
      "heading": "replaced by the time-series database’s own query interface.",
      "level": 3,
      "page": 131
    },
    {
      "heading": "Alerting system: This sends alert notifications to various alerting",
      "level": 3,
      "page": 131
    },
    {
      "heading": "destinations.",
      "level": 3,
      "page": 131
    },
    {
      "heading": "Visualization system: This shows metrics in the form of various",
      "level": 3,
      "page": 131
    },
    {
      "heading": "graphs/charts.",
      "level": 3,
      "page": 131
    },
    {
      "heading": "130",
      "level": 3,
      "page": 131
    },
    {
      "heading": "Reconciliation",
      "level": 2,
      "page": 132
    },
    {
      "heading": "𝐑𝐞𝐜𝐨𝐧𝐜𝐢𝐥𝐢𝐚𝐭𝐢𝐨𝐧 might be the most painful process in a payment system.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "It is the process of comparing records in different systems to make",
      "level": 3,
      "page": 132
    },
    {
      "heading": "sure the amounts match each other.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "For example, if you pay $200 to buy a watch with Paypal:",
      "level": 3,
      "page": 132
    },
    {
      "heading": "- The eCommerce website should have a record about the purchase",
      "level": 3,
      "page": 132
    },
    {
      "heading": "order of $200.",
      "level": 3,
      "page": 132
    },
    {
      "heading": "- There should be a transaction record of $200 in Paypal (marked with",
      "level": 3,
      "page": 132
    },
    {
      "heading": "2 in the diagram).",
      "level": 3,
      "page": 132
    },
    {
      "heading": "- The Ledger should record a debit of $200 dollars for the buyer, and a",
      "level": 3,
      "page": 132
    },
    {
      "heading": "credit of $200 for the seller. This is called double-entry bookkeeping",
      "level": 3,
      "page": 132
    },
    {
      "heading": "(see the table below).",
      "level": 3,
      "page": 132
    },
    {
      "heading": "Let’s take a look at some pain points and how we can address them:",
      "level": 3,
      "page": 132
    },
    {
      "heading": "131",
      "level": 3,
      "page": 132
    },
    {
      "heading": "𝐏𝐫𝐨𝐛𝐥𝐞𝐦 1: Data normalization. When comparing records in different",
      "level": 3,
      "page": 133
    },
    {
      "heading": "systems, they come in different formats. For example, the timestamp",
      "level": 3,
      "page": 133
    },
    {
      "heading": "can be “2022/01/01” in one system and “Jan 1, 2022” in another.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧: we can add a layer to transform different formats into",
      "level": 3,
      "page": 133
    },
    {
      "heading": "the same format.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "𝐏𝐫𝐨𝐛𝐥𝐞𝐦 2: Massive data volume",
      "level": 3,
      "page": 133
    },
    {
      "heading": "𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧: we can use big data processing techniques to speed",
      "level": 3,
      "page": 133
    },
    {
      "heading": "up data comparisons. If we need near real-time reconciliation, a",
      "level": 3,
      "page": 133
    },
    {
      "heading": "streaming platform such as Flink is used; otherwise, end-of-day batch",
      "level": 3,
      "page": 133
    },
    {
      "heading": "processing such as Hadoop is enough.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "𝐏𝐫𝐨𝐛𝐥𝐞𝐦 3: Cut-off time issue. For example, if we choose 00:00:00 as",
      "level": 3,
      "page": 133
    },
    {
      "heading": "the daily cut-off time, one record is stamped with 23:59:55 in the",
      "level": 3,
      "page": 133
    },
    {
      "heading": "internal system, but might be stamped 00:00:30 in the external system",
      "level": 3,
      "page": 133
    },
    {
      "heading": "(Paypal), which is the next day. In this case, we couldn’t find this record",
      "level": 3,
      "page": 133
    },
    {
      "heading": "in today’s Paypal records. It causes a discrepancy.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "𝐏𝐨𝐬𝐬𝐢𝐛𝐥𝐞 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧:  we need to categorize this break as a “temporary",
      "level": 3,
      "page": 133
    },
    {
      "heading": "break” and run it later against the next day’s Paypal records. If we find",
      "level": 3,
      "page": 133
    },
    {
      "heading": "a match in the next day’s Paypal records, the break is cleared, and no",
      "level": 3,
      "page": 133
    },
    {
      "heading": "more action is needed.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "You may argue that if we have exactly-once semantics in the system,",
      "level": 3,
      "page": 133
    },
    {
      "heading": "there shouldn’t be any discrepancies. But the truth is, there are so",
      "level": 3,
      "page": 133
    },
    {
      "heading": "many places that can go wrong. Having a reconciliation system is",
      "level": 3,
      "page": 133
    },
    {
      "heading": "always necessary. It is like having a safety net to keep you sleeping",
      "level": 3,
      "page": 133
    },
    {
      "heading": "well at night.",
      "level": 3,
      "page": 133
    },
    {
      "heading": "132",
      "level": 3,
      "page": 133
    },
    {
      "heading": "Which database shall I use? This is one of the most important",
      "level": 3,
      "page": 134
    },
    {
      "heading": "questions we usually need to address in an interview.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "Choosing the right database is hard. Google Cloud recently posted a",
      "level": 3,
      "page": 134
    },
    {
      "heading": "great article that summarized different database options available in",
      "level": 3,
      "page": 134
    },
    {
      "heading": "Google Cloud and explained which use cases are best suited for each",
      "level": 3,
      "page": 134
    },
    {
      "heading": "database option.",
      "level": 3,
      "page": 134
    },
    {
      "heading": "133",
      "level": 3,
      "page": 134
    },
    {
      "heading": "Big data papers",
      "level": 2,
      "page": 135
    },
    {
      "heading": "Below is a timeline of important big data papers and how the",
      "level": 3,
      "page": 135
    },
    {
      "heading": "techniques evolved over time.",
      "level": 3,
      "page": 135
    },
    {
      "heading": "The green highlighted boxes are the famous 3 Google papers, which",
      "level": 3,
      "page": 135
    },
    {
      "heading": "established the foundation of the big data framework. At the high-level:",
      "level": 3,
      "page": 135
    },
    {
      "heading": "𝘉𝘪𝘨 𝘋𝘢𝘵𝘢 𝘛𝘦𝘤𝘩𝘯𝘪𝘲𝘶𝘦𝘴 = 𝘔𝘢𝘴𝘴𝘪𝘷𝘦 𝘥𝘢𝘵𝘢 + 𝘔𝘢𝘴𝘴𝘪𝘷𝘦 𝘤𝘢𝘭𝘤𝘶𝘭𝘢𝘵𝘪𝘰𝘯",
      "level": 3,
      "page": 135
    },
    {
      "heading": "Let’s look at the 𝐎𝐋𝐓𝐏 evolution. BigTable provided a distributed",
      "level": 3,
      "page": 135
    },
    {
      "heading": "storage system for structured data but dropped some characteristics of",
      "level": 3,
      "page": 135
    },
    {
      "heading": "relational DB. Then Megastore brought back schema and simple",
      "level": 3,
      "page": 135
    },
    {
      "heading": "transactions; Spanner brought back data consistency.",
      "level": 3,
      "page": 135
    },
    {
      "heading": "Now let’s look at the 𝐎𝐋𝐀𝐏 evolution. MapReduce was not easy to",
      "level": 3,
      "page": 135
    },
    {
      "heading": "program, so Hive solved this by introducing a SQL-like query",
      "level": 3,
      "page": 135
    },
    {
      "heading": "134",
      "level": 3,
      "page": 135
    },
    {
      "heading": "language. But Hive still used MapReduce under the hood, so it’s not",
      "level": 3,
      "page": 136
    },
    {
      "heading": "very responsive. In 2010, Dremel provided an interactive query engine.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "𝐒𝐭𝐫𝐞𝐚𝐦𝐢𝐧𝐠 𝐩𝐫𝐨𝐜𝐞𝐬𝐬𝐢𝐧𝐠 was born to further solve the latency issue in",
      "level": 3,
      "page": 136
    },
    {
      "heading": "OLAP. The famous 𝒍𝒂𝒎𝒃𝒅𝒂 architecture was based on Storm and",
      "level": 3,
      "page": 136
    },
    {
      "heading": "MapReduce, where streaming processing and batch processing have",
      "level": 3,
      "page": 136
    },
    {
      "heading": "different processing flows. Then people started to build streaming",
      "level": 3,
      "page": 136
    },
    {
      "heading": "processing with apache Kafka. 𝑲𝒂𝒑𝒑𝒂 architecture was proposed in",
      "level": 3,
      "page": 136
    },
    {
      "heading": "2014, where streaming and batching processings were merged into",
      "level": 3,
      "page": 136
    },
    {
      "heading": "one flow. Google published The Dataflow Model in 2015, which was an",
      "level": 3,
      "page": 136
    },
    {
      "heading": "abstraction standard for streaming processing, and Flink implemented",
      "level": 3,
      "page": 136
    },
    {
      "heading": "this model.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "To manage a big crowd of commodity server resources, we need",
      "level": 3,
      "page": 136
    },
    {
      "heading": "resource management Kubernetes.",
      "level": 3,
      "page": 136
    },
    {
      "heading": "135",
      "level": 3,
      "page": 136
    },
    {
      "heading": "Avoid double charge",
      "level": 2,
      "page": 137
    },
    {
      "heading": "One of the most serious problems a payment system can have is to",
      "level": 3,
      "page": 137
    },
    {
      "heading": "𝐝𝐨𝐮𝐛𝐥𝐞 𝐜𝐡𝐚𝐫𝐠𝐞 𝐚 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫. When we design the payment system, it is",
      "level": 3,
      "page": 137
    },
    {
      "heading": "important to guarantee that the payment system executes a payment",
      "level": 3,
      "page": 137
    },
    {
      "heading": "order exactly-once.",
      "level": 3,
      "page": 137
    },
    {
      "heading": "136",
      "level": 3,
      "page": 137
    },
    {
      "heading": "At the first glance, exactly-once delivery seems very hard to tackle, but",
      "level": 3,
      "page": 138
    },
    {
      "heading": "if we divide the problem into two parts, it is much easier to solve.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Mathematically, an operation is executed exactly-once if:",
      "level": 3,
      "page": 138
    },
    {
      "heading": "1. It is executed at least once.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "2. At the same time, it is executed at most once.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "We now explain how to implement at least once using retry and at",
      "level": 3,
      "page": 138
    },
    {
      "heading": "most once using idempotency check.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "𝐑𝐞𝐭𝐫𝐲",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Occasionally, we need to retry a payment transaction due to network",
      "level": 3,
      "page": 138
    },
    {
      "heading": "errors or timeout. Retry provides the at-least-once guarantee. For",
      "level": 3,
      "page": 138
    },
    {
      "heading": "example, as shown in Figure 10, the client tries to make a $10",
      "level": 3,
      "page": 138
    },
    {
      "heading": "payment, but the payment keeps failing due to a poor network",
      "level": 3,
      "page": 138
    },
    {
      "heading": "connection. Considering the network condition might get better, the",
      "level": 3,
      "page": 138
    },
    {
      "heading": "client retries the request and this payment finally succeeds at the",
      "level": 3,
      "page": 138
    },
    {
      "heading": "fourth attempt.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "𝐈𝐝𝐞𝐦𝐩𝐨𝐭𝐞𝐧𝐜𝐲",
      "level": 3,
      "page": 138
    },
    {
      "heading": "From an API standpoint, idempotency means clients can make the",
      "level": 3,
      "page": 138
    },
    {
      "heading": "same call repeatedly and produce the same result.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "For communication between clients (web and mobile applications) and",
      "level": 3,
      "page": 138
    },
    {
      "heading": "servers, an idempotency key is usually a unique value that is",
      "level": 3,
      "page": 138
    },
    {
      "heading": "generated by clients and expires after a certain period of time. A UUID",
      "level": 3,
      "page": 138
    },
    {
      "heading": "is commonly used as an idempotency key and it is recommended by",
      "level": 3,
      "page": 138
    },
    {
      "heading": "many tech companies such as Stripe and PayPal. To perform an",
      "level": 3,
      "page": 138
    },
    {
      "heading": "idempotent payment request, an idempotency key is added to the",
      "level": 3,
      "page": 138
    },
    {
      "heading": "HTTP header: <idempotency-key: key_value>.",
      "level": 3,
      "page": 138
    },
    {
      "heading": "137",
      "level": 3,
      "page": 138
    },
    {
      "heading": "Payment security",
      "level": 2,
      "page": 139
    },
    {
      "heading": "A few weeks ago, I posted the high-level design for the payment",
      "level": 3,
      "page": 139
    },
    {
      "heading": "system. Today, I’ll continue the discussion and focus on payment",
      "level": 3,
      "page": 139
    },
    {
      "heading": "security.",
      "level": 3,
      "page": 139
    },
    {
      "heading": "The table below summarizes techniques that are commonly used in",
      "level": 3,
      "page": 139
    },
    {
      "heading": "payment security. If you have any questions or I missed anything,",
      "level": 3,
      "page": 139
    },
    {
      "heading": "please leave a comment.",
      "level": 3,
      "page": 139
    },
    {
      "heading": "138",
      "level": 3,
      "page": 139
    },
    {
      "heading": "System Design Interview Tip",
      "level": 2,
      "page": 140
    },
    {
      "heading": "One pro tip for acing a system design interview is to read the",
      "level": 3,
      "page": 140
    },
    {
      "heading": "engineering blog of the company you are interviewing with. You can",
      "level": 3,
      "page": 140
    },
    {
      "heading": "get a good sense of what technology they use, why the technology",
      "level": 3,
      "page": 140
    },
    {
      "heading": "was chosen over others, and learn what issues are important to",
      "level": 3,
      "page": 140
    },
    {
      "heading": "engineers.",
      "level": 3,
      "page": 140
    },
    {
      "heading": "For example, here are 4 blog posts Twitter Engineering recommends:",
      "level": 3,
      "page": 140
    },
    {
      "heading": "1. The Infrastructure Behind Twitter: Scale",
      "level": 3,
      "page": 140
    },
    {
      "heading": "2. Discovery and Consumption of Analytics Data at Twitter",
      "level": 3,
      "page": 140
    },
    {
      "heading": "3. The what and why of product experimentation at Twitter",
      "level": 3,
      "page": 140
    },
    {
      "heading": "4. Twitter experimentation: technical overview",
      "level": 3,
      "page": 140
    },
    {
      "heading": "139",
      "level": 3,
      "page": 140
    },
    {
      "heading": "Big data evolvement",
      "level": 2,
      "page": 141
    },
    {
      "heading": "I hope everyone has a great time with friends and family during the",
      "level": 3,
      "page": 141
    },
    {
      "heading": "holidays. If you are looking for some readings, classic engineering",
      "level": 3,
      "page": 141
    },
    {
      "heading": "papers are a good start.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "A lot of times when we are busy with work, we only focus on scattered",
      "level": 3,
      "page": 141
    },
    {
      "heading": "information, telling us “how” and “what” to get our immediate needs to",
      "level": 3,
      "page": 141
    },
    {
      "heading": "get things done.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "However, reading the classics helps us know “why” behind the scenes,",
      "level": 3,
      "page": 141
    },
    {
      "heading": "and teaches us how to solve problems, make better decisions, or even",
      "level": 3,
      "page": 141
    },
    {
      "heading": "contribute to open source projects.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "Let’s take big data as an example.",
      "level": 3,
      "page": 141
    },
    {
      "heading": "Big data area has progressed a lot over the past 20 years. It started",
      "level": 3,
      "page": 141
    },
    {
      "heading": "from 3 Google papers (see the links in the comment), which tackled",
      "level": 3,
      "page": 141
    },
    {
      "heading": "real engineering challenges at Google scale:",
      "level": 3,
      "page": 141
    },
    {
      "heading": "- GFS (2003) - big data storage",
      "level": 3,
      "page": 141
    },
    {
      "heading": "- MapReduce (2004) - calculation model",
      "level": 3,
      "page": 141
    },
    {
      "heading": "- BigTable (2006) - online services",
      "level": 3,
      "page": 141
    },
    {
      "heading": "The diagram below shows the functionalities and limitations of the 3",
      "level": 3,
      "page": 141
    },
    {
      "heading": "techniques, and how they evolve over time into two streams: OLTP and",
      "level": 3,
      "page": 141
    },
    {
      "heading": "OLAP. Each evolved product was trying to solve the limitations of the",
      "level": 3,
      "page": 141
    },
    {
      "heading": "140",
      "level": 3,
      "page": 141
    },
    {
      "heading": "last generation. For example, “Hive - support SQL” means Hive was",
      "level": 3,
      "page": 142
    },
    {
      "heading": "trying to solve the lack of SQL in MapReduce.",
      "level": 3,
      "page": 142
    },
    {
      "heading": "If you want to learn more, you can refer to the papers for details. What",
      "level": 3,
      "page": 142
    },
    {
      "heading": "other classics would you recommend?",
      "level": 3,
      "page": 142
    },
    {
      "heading": "141",
      "level": 3,
      "page": 142
    },
    {
      "heading": "Quadtree",
      "level": 2,
      "page": 143
    },
    {
      "heading": "In this post, let’s explore another data structure to find nearby",
      "level": 3,
      "page": 143
    },
    {
      "heading": "restaurants on Yelp or Google Maps.",
      "level": 3,
      "page": 143
    },
    {
      "heading": "A quadtree is a data structure that is commonly used to partition a",
      "level": 3,
      "page": 143
    },
    {
      "heading": "two-dimensional space by recursively subdividing it into four quadrants",
      "level": 3,
      "page": 143
    },
    {
      "heading": "(grids) until the contents of the grids meet certain criteria (see the first",
      "level": 3,
      "page": 143
    },
    {
      "heading": "diagram).",
      "level": 3,
      "page": 143
    },
    {
      "heading": "142",
      "level": 3,
      "page": 143
    },
    {
      "heading": "Quadtree is an 𝐢𝐧-𝐦𝐞𝐦𝐨𝐫𝐲 𝐝𝐚𝐭𝐚 𝐬𝐭𝐫𝐮𝐜𝐭𝐮𝐫𝐞and it is not a database",
      "level": 3,
      "page": 144
    },
    {
      "heading": "solution. It runs on each LBS (Location-Based Service, see last week’s",
      "level": 3,
      "page": 144
    },
    {
      "heading": "post) server, and the data structure is built at server start-up time.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "The second diagram explains the quadtree building process in more",
      "level": 3,
      "page": 144
    },
    {
      "heading": "detail. The root node represents the whole world map. The root node is",
      "level": 3,
      "page": 144
    },
    {
      "heading": "𝐫𝐞𝐜𝐮𝐫𝐬𝐢𝐯𝐞𝐥𝐲broken down into 4 quadrants until no nodes are left with",
      "level": 3,
      "page": 144
    },
    {
      "heading": "more than 100 businesses.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "𝐇𝐨𝐰 𝐭𝐨 𝐠𝐞𝐭 𝐧𝐞𝐚𝐫𝐛𝐲 𝐛𝐮𝐬𝐢𝐧𝐞𝐬𝐬𝐞𝐬 𝐰𝐢𝐭𝐡 𝐪𝐮𝐚𝐝𝐭𝐫𝐞𝐞?",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- Build the quadtree in memory.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- After the quadtree is built, start searching from the root and traverse",
      "level": 3,
      "page": 144
    },
    {
      "heading": "the tree, until we find the leaf node where the search origin is.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- If that leaf node has 100 businesses, return the node. Otherwise, add",
      "level": 3,
      "page": 144
    },
    {
      "heading": "businesses from its neighbors until enough businesses are returned.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "𝐔𝐩𝐝𝐚𝐭𝐞 𝐋𝐁𝐒 𝐬𝐞𝐫𝐯𝐞𝐫 𝐚𝐧𝐝 𝐫𝐞𝐛𝐮𝐢𝐥𝐝 𝐪𝐮𝐚𝐝𝐭𝐫𝐞𝐞",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- It may take a few minutes to build a quadtree in memory with 200",
      "level": 3,
      "page": 144
    },
    {
      "heading": "million businesses at the server start-up time.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- While the quadtree is being built, the server cannot serve traffic.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "- Therefore, we should roll out a new release of the server",
      "level": 3,
      "page": 144
    },
    {
      "heading": "incrementally to 𝐚 𝐬𝐦𝐚𝐥𝐥 𝐬𝐮𝐛𝐬𝐞𝐭of servers at a time. This avoids taking a",
      "level": 3,
      "page": 144
    },
    {
      "heading": "large swathe of the server cluster offline and causes service brownout.",
      "level": 3,
      "page": 144
    },
    {
      "heading": "143",
      "level": 3,
      "page": 144
    },
    {
      "heading": "How do we find nearby restaurants on Yelp?",
      "level": 2,
      "page": 145
    },
    {
      "heading": "Here are some design details behind the scenes.",
      "level": 3,
      "page": 145
    },
    {
      "heading": "There are two key services (see the diagram below):",
      "level": 3,
      "page": 145
    },
    {
      "heading": "- 𝐁𝐮𝐬𝐢𝐧𝐞𝐬𝐬 𝐒𝐞𝐫𝐯𝐢𝐜𝐞",
      "level": 3,
      "page": 145
    },
    {
      "heading": "144",
      "level": 3,
      "page": 145
    },
    {
      "heading": "- Add/delete/update restaurant information",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Customers view restaurant details",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- 𝐋𝐨𝐜𝐚𝐥-𝐛𝐚𝐬𝐞𝐝 𝐒𝐞𝐫𝐯𝐢𝐜𝐞 (𝐋𝐁𝐒)",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Given a radius and location, return a list of nearby restaurants",
      "level": 3,
      "page": 146
    },
    {
      "heading": "How are the restaurant locations stored in the database so that LBS",
      "level": 3,
      "page": 146
    },
    {
      "heading": "can return nearby restaurants efficiently?",
      "level": 3,
      "page": 146
    },
    {
      "heading": "Store the latitude and longitude of restaurants in the database? The",
      "level": 3,
      "page": 146
    },
    {
      "heading": "query will be very inefficient when you need to calculate the distance",
      "level": 3,
      "page": 146
    },
    {
      "heading": "between you and every restaurant.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "One way to speed up the search is using the 𝐠𝐞𝐨𝐡𝐚𝐬𝐡𝐚𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "First, divide the planet into four quadrants along with the prime",
      "level": 3,
      "page": 146
    },
    {
      "heading": "meridian and equator：",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Latitude range [-90, 0] is represented by 0",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Latitude range [0, 90] is represented by 1",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Longitude range [-180, 0] is represented by 0",
      "level": 3,
      "page": 146
    },
    {
      "heading": "- Longitude range [0, 180] is represented by 1",
      "level": 3,
      "page": 146
    },
    {
      "heading": "Second, divide each grid into four smaller grids. Each grid can be",
      "level": 3,
      "page": 146
    },
    {
      "heading": "represented by alternating between longitude bit and latitude bit.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "So when you want to search for the nearby restaurants in the",
      "level": 3,
      "page": 146
    },
    {
      "heading": "red-highlighted block, you can write SQL like:",
      "level": 3,
      "page": 146
    },
    {
      "heading": "SELECT * FROM geohash_index WHERE geohash LIKE `01%`",
      "level": 3,
      "page": 146
    },
    {
      "heading": "Geohash has some limitations. There can be a lot of restaurants in one",
      "level": 3,
      "page": 146
    },
    {
      "heading": "block (downtown New York), but none in another block (ocean). So",
      "level": 3,
      "page": 146
    },
    {
      "heading": "there are other more complicated algorithms to optimize the process.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "Let me know if you are interested in the details.",
      "level": 3,
      "page": 146
    },
    {
      "heading": "145",
      "level": 3,
      "page": 146
    },
    {
      "heading": "One picture is worth more than a thousand words. Log4j from attack to",
      "level": 3,
      "page": 147
    },
    {
      "heading": "prevention in one illustration.",
      "level": 3,
      "page": 147
    },
    {
      "heading": "Credit GovCERT",
      "level": 3,
      "page": 147
    },
    {
      "heading": "Link:",
      "level": 3,
      "page": 147
    },
    {
      "heading": "https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-libr",
      "level": 3,
      "page": 147
    },
    {
      "heading": "ary-log4j/",
      "level": 3,
      "page": 147
    },
    {
      "heading": "146",
      "level": 3,
      "page": 147
    },
    {
      "heading": "How does a modern stock exchange achieve",
      "level": 2,
      "page": 148
    },
    {
      "heading": "microsecond latency?",
      "level": 2,
      "page": 148
    },
    {
      "heading": "The principal is:",
      "level": 3,
      "page": 148
    },
    {
      "heading": "𝐃𝐨 𝐥𝐞𝐬𝐬 𝐨𝐧 𝐭𝐡𝐞 𝐜𝐫𝐢𝐭𝐢𝐜𝐚𝐥 𝐩𝐚𝐭𝐡！",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- Fewer tasks on the critical path",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- Less time on each task",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- Fewer network hops",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- Less disk usage",
      "level": 3,
      "page": 148
    },
    {
      "heading": "For the stock exchange, the critical path is:",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- 𝐬𝐭𝐚𝐫𝐭: an order comes into the order manager",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- mandatory risk checks",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- the order gets matched and the execution is sent back",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- 𝐞𝐧𝐝: the execution comes out of the order manager",
      "level": 3,
      "page": 148
    },
    {
      "heading": "Other non-critical tasks should be removed from the critical path.",
      "level": 3,
      "page": 148
    },
    {
      "heading": "We put together a design as shown in the diagram:",
      "level": 3,
      "page": 148
    },
    {
      "heading": "147",
      "level": 3,
      "page": 148
    },
    {
      "heading": "- deploy all the components in a single giant server (no containers)",
      "level": 3,
      "page": 149
    },
    {
      "heading": "- use shared memory as an event bus to communicate among the",
      "level": 3,
      "page": 149
    },
    {
      "heading": "components, no hard disk",
      "level": 3,
      "page": 149
    },
    {
      "heading": "- key components like Order Manager and Matching Engine are",
      "level": 3,
      "page": 149
    },
    {
      "heading": "single-threaded on the critical path, and each pinned to a CPU so that",
      "level": 3,
      "page": 149
    },
    {
      "heading": "there is 𝐧𝐨 𝐜𝐨𝐧𝐭𝐞𝐱𝐭 𝐬𝐰𝐢𝐭𝐜𝐡and",
      "level": 3,
      "page": 149
    },
    {
      "heading": "𝐧𝐨𝐥𝐨𝐜𝐤𝐬",
      "level": 3,
      "page": 149
    },
    {
      "heading": "- the single-threaded application loop executes tasks one by one in",
      "level": 3,
      "page": 149
    },
    {
      "heading": "sequence",
      "level": 3,
      "page": 149
    },
    {
      "heading": "- other components listen on the event bus and react accordingly",
      "level": 3,
      "page": 149
    },
    {
      "heading": "148",
      "level": 3,
      "page": 149
    },
    {
      "heading": "Match buy and sell orders",
      "level": 2,
      "page": 150
    },
    {
      "heading": "Stocks go up and down. Do you know what data structure is used to",
      "level": 3,
      "page": 150
    },
    {
      "heading": "efficiently match buy and sell orders?",
      "level": 3,
      "page": 150
    },
    {
      "heading": "Stock exchanges use the data structure called 𝐨𝐫𝐝𝐞𝐫 𝐛𝐨𝐨𝐤𝐬. An order",
      "level": 3,
      "page": 150
    },
    {
      "heading": "book is an electronic list of buy and sell orders, organized by price",
      "level": 3,
      "page": 150
    },
    {
      "heading": "levels. It has a buy book and a sell book, where each side of the book",
      "level": 3,
      "page": 150
    },
    {
      "heading": "contains a bunch of price levels, and each price level contains a list of",
      "level": 3,
      "page": 150
    },
    {
      "heading": "orders (first in first out).",
      "level": 3,
      "page": 150
    },
    {
      "heading": "The image is an example of price levels and the queued quantity in",
      "level": 3,
      "page": 150
    },
    {
      "heading": "each price level.",
      "level": 3,
      "page": 150
    },
    {
      "heading": "So what happens when you place a market order to buy 2700 shares",
      "level": 3,
      "page": 150
    },
    {
      "heading": "in the diagram?",
      "level": 3,
      "page": 150
    },
    {
      "heading": "- The buy order is matched with all the sell onrders at price 100.10,",
      "level": 3,
      "page": 150
    },
    {
      "heading": "and the first order at price 100.11 (illustrated in light red).",
      "level": 3,
      "page": 150
    },
    {
      "heading": "149",
      "level": 3,
      "page": 150
    },
    {
      "heading": "- Now because of the big buy order which “eats up” the first price level",
      "level": 3,
      "page": 151
    },
    {
      "heading": "on the sell book, the best ask price goes up from 100.10 to 100.11.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "- So when the market is bullish, people tend to buy stocks, and the",
      "level": 3,
      "page": 151
    },
    {
      "heading": "price goes up and up.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "An efficient data structure for an order book must satisfy:",
      "level": 3,
      "page": 151
    },
    {
      "heading": "- Constant lookup time. Operations include: get volume at a price level",
      "level": 3,
      "page": 151
    },
    {
      "heading": "or between price levels, query best bid/ask.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "- Fast add/cancel/execute/update operations, preferably O(1) time",
      "level": 3,
      "page": 151
    },
    {
      "heading": "complexity. Operations include: place a new order, cancel an order,",
      "level": 3,
      "page": 151
    },
    {
      "heading": "and match an order.",
      "level": 3,
      "page": 151
    },
    {
      "heading": "150",
      "level": 3,
      "page": 151
    },
    {
      "heading": "Stock exchange design",
      "level": 2,
      "page": 152
    },
    {
      "heading": "The stock market has been volatile recently.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Coincidentally, we just finished a new chapter “Design a stock",
      "level": 3,
      "page": 152
    },
    {
      "heading": "exchange”. I’ll use plain English to explain what happens when you",
      "level": 3,
      "page": 152
    },
    {
      "heading": "place a stock buying order. The focus is on the exchange side.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Step 1: client places an order via the broker’s web or mobile app.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Step 2: broker sends the order to the exchange.",
      "level": 3,
      "page": 152
    },
    {
      "heading": "151",
      "level": 3,
      "page": 152
    },
    {
      "heading": "Step 3: the exchange client gateway performs operations such as",
      "level": 3,
      "page": 153
    },
    {
      "heading": "validation, rate limiting, authentication, normalization, etc, and sends",
      "level": 3,
      "page": 153
    },
    {
      "heading": "the order to the order manager.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 4: the order manager performs risk checks based on rules set by",
      "level": 3,
      "page": 153
    },
    {
      "heading": "the risk manager.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 5: once risk checks pass, the order manager checks if there is",
      "level": 3,
      "page": 153
    },
    {
      "heading": "enough balance in the wallet.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 6-7: the order is sent to the matching engine. The matching",
      "level": 3,
      "page": 153
    },
    {
      "heading": "engine sends back the execution result if a match is found. Both order",
      "level": 3,
      "page": 153
    },
    {
      "heading": "and execution results need to be sequenced first in the sequencer so",
      "level": 3,
      "page": 153
    },
    {
      "heading": "that matching determinism is guaranteed.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 8 - 10: execution result is passed all the way back to the client.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 11-12: market data (including the candlestick chart and order",
      "level": 3,
      "page": 153
    },
    {
      "heading": "book) are sent to the data service for consolidation. Brokers query the",
      "level": 3,
      "page": 153
    },
    {
      "heading": "data service to get the market data.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Step 13: the reporter composes all the necessary reporting fields (e.g.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "client_id, price, quantity, order_type, filled_quantity,",
      "level": 3,
      "page": 153
    },
    {
      "heading": "remaining_quantity) and writes the data to the database for",
      "level": 3,
      "page": 153
    },
    {
      "heading": "persistence",
      "level": 3,
      "page": 153
    },
    {
      "heading": "A stock exchange requires 𝐞𝐱𝐭𝐫𝐞𝐦𝐞𝐥𝐲 𝐥𝐨𝐰 𝐥𝐚𝐭𝐞𝐧𝐜𝐲. While most web",
      "level": 3,
      "page": 153
    },
    {
      "heading": "applications are ok with hundreds of milliseconds latency, a stock",
      "level": 3,
      "page": 153
    },
    {
      "heading": "exchange requires 𝐦𝐢𝐜𝐫𝐨-𝐬𝐞𝐜𝐨𝐧𝐝 𝐥𝐞𝐯𝐞𝐥𝐥𝐚𝐭𝐞𝐧𝐜𝐲. I’ll leave the latency",
      "level": 3,
      "page": 153
    },
    {
      "heading": "discussion for a separate post since the post is already long.",
      "level": 3,
      "page": 153
    },
    {
      "heading": "152",
      "level": 3,
      "page": 153
    },
    {
      "heading": "Design a payment system",
      "level": 2,
      "page": 154
    },
    {
      "heading": "Today is Cyber Monday. Here is how money moves when you click the",
      "level": 3,
      "page": 154
    },
    {
      "heading": "Buy button on Amazon or any of your favorite shopping websites.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "I posted the same diagram last week for an overview and a few people",
      "level": 3,
      "page": 154
    },
    {
      "heading": "asked me about the detailed steps, so here you go:",
      "level": 3,
      "page": 154
    },
    {
      "heading": "1. When a user clicks the “Buy” button, a payment event is generated",
      "level": 3,
      "page": 154
    },
    {
      "heading": "and sent to the payment service.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "2. The payment service stores the payment event in the database.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "3. Sometimes a single payment event may contain several payment",
      "level": 3,
      "page": 154
    },
    {
      "heading": "orders. For example, you may select products from multiple sellers in a",
      "level": 3,
      "page": 154
    },
    {
      "heading": "single checkout process. The payment service will call the payment",
      "level": 3,
      "page": 154
    },
    {
      "heading": "executor for each payment order.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "4. The payment executor stores the payment order in the database.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "5. The payment executor calls an external PSP to finish the credit card",
      "level": 3,
      "page": 154
    },
    {
      "heading": "payment.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "6. After the payment executor has successfully executed the payment,",
      "level": 3,
      "page": 154
    },
    {
      "heading": "the payment service will update the wallet to record how much money",
      "level": 3,
      "page": 154
    },
    {
      "heading": "a given seller has.",
      "level": 3,
      "page": 154
    },
    {
      "heading": "153",
      "level": 3,
      "page": 154
    },
    {
      "heading": "7. The wallet server stores the updated balance information in the",
      "level": 3,
      "page": 155
    },
    {
      "heading": "database.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "8. After the wallet service has successfully updated the seller’s balance",
      "level": 3,
      "page": 155
    },
    {
      "heading": "information, the payment service will call the ledger to update it.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "9. The ledger service appends the new ledger information to the",
      "level": 3,
      "page": 155
    },
    {
      "heading": "database.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "10. Every night the PSP or banks send settlement files to their clients.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "The settlement file contains the balance of the bank account, together",
      "level": 3,
      "page": 155
    },
    {
      "heading": "with all the transactions that took place on this bank account during the",
      "level": 3,
      "page": 155
    },
    {
      "heading": "day.",
      "level": 3,
      "page": 155
    },
    {
      "heading": "154",
      "level": 3,
      "page": 155
    },
    {
      "heading": "Design a flash sale system",
      "level": 2,
      "page": 156
    },
    {
      "heading": "Black Friday is coming. Designing a system with extremely high",
      "level": 3,
      "page": 156
    },
    {
      "heading": "concurrency, high availability and quick responsiveness needs to",
      "level": 3,
      "page": 156
    },
    {
      "heading": "consider many aspects 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐰𝐚𝐲 𝐟𝐫𝐨𝐦𝐟𝐫𝐨𝐧𝐭𝐞𝐧𝐝 𝐭𝐨 𝐛𝐚𝐜𝐤𝐞𝐧𝐝. See the",
      "level": 3,
      "page": 156
    },
    {
      "heading": "below picture for details:",
      "level": 3,
      "page": 156
    },
    {
      "heading": "𝐃𝐞𝐬𝐢𝐠𝐧 𝐩𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬:",
      "level": 3,
      "page": 156
    },
    {
      "heading": "1. Less is more - less element on the web page, fewer data",
      "level": 3,
      "page": 156
    },
    {
      "heading": "queries to the database, fewer web requests, fewer system",
      "level": 3,
      "page": 156
    },
    {
      "heading": "dependencies",
      "level": 3,
      "page": 156
    },
    {
      "heading": "2. Short critical path - fewer hops among services or merge into",
      "level": 3,
      "page": 156
    },
    {
      "heading": "one service",
      "level": 3,
      "page": 156
    },
    {
      "heading": "3. Async - use message queues to handle high TPS",
      "level": 3,
      "page": 156
    },
    {
      "heading": "4. Isolation - isolate static and dynamic contents, isolate processes",
      "level": 3,
      "page": 156
    },
    {
      "heading": "and databases for rare items",
      "level": 3,
      "page": 156
    },
    {
      "heading": "5. Overselling is bad. When Decreasing the inventory is important",
      "level": 3,
      "page": 156
    },
    {
      "heading": "155",
      "level": 3,
      "page": 156
    },
    {
      "heading": "6. User experience is important. We definitely don’t want to inform",
      "level": 3,
      "page": 157
    },
    {
      "heading": "users that they have successfully placed orders but later tell",
      "level": 3,
      "page": 157
    },
    {
      "heading": "them no items are actually available",
      "level": 3,
      "page": 157
    },
    {
      "heading": "156",
      "level": 3,
      "page": 157
    },
    {
      "heading": "Back-of-the-envelope estimation",
      "level": 2,
      "page": 158
    },
    {
      "heading": "Recently, a few engineers asked me whether we really need",
      "level": 3,
      "page": 158
    },
    {
      "heading": "back-of-the-envelope estimation in a system design interview. I think it",
      "level": 3,
      "page": 158
    },
    {
      "heading": "would be helpful to clarify.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "Estimations are important because we need them to understand the",
      "level": 3,
      "page": 158
    },
    {
      "heading": "scale of the system and justify the design. It helps answer questions",
      "level": 3,
      "page": 158
    },
    {
      "heading": "like:",
      "level": 3,
      "page": 158
    },
    {
      "heading": "- Do we really need a distributed solution?",
      "level": 3,
      "page": 158
    },
    {
      "heading": "- Is a cache layer necessary?",
      "level": 3,
      "page": 158
    },
    {
      "heading": "- Shall we choose data replication or sharding?",
      "level": 3,
      "page": 158
    },
    {
      "heading": "Here is an example of how the estimations shape the design decision.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "One interview question is to design proximity service and how to scale",
      "level": 3,
      "page": 158
    },
    {
      "heading": "geospatial index is a key part of it. Here are a few paragraphs we",
      "level": 3,
      "page": 158
    },
    {
      "heading": "wrote to show why jumping to a sharding design without estimations is",
      "level": 3,
      "page": 158
    },
    {
      "heading": "a bad idea:",
      "level": 3,
      "page": 158
    },
    {
      "heading": "“One common mistake about scaling the geospatial index is to quickly",
      "level": 3,
      "page": 158
    },
    {
      "heading": "jump to a sharding scheme without considering the actual data size of",
      "level": 3,
      "page": 158
    },
    {
      "heading": "the table. In our case, the full dataset for the geospatial index table is",
      "level": 3,
      "page": 158
    },
    {
      "heading": "not large (quadtree index only takes 1.71G memory and storage",
      "level": 3,
      "page": 158
    },
    {
      "heading": "requirement for geohash index is similar). The whole geospatial index",
      "level": 3,
      "page": 158
    },
    {
      "heading": "can easily fit in the working set of a modern database server. However,",
      "level": 3,
      "page": 158
    },
    {
      "heading": "depending on the read volume, a single database server might not",
      "level": 3,
      "page": 158
    },
    {
      "heading": "have enough CPU or network bandwidth to service all read requests. If",
      "level": 3,
      "page": 158
    },
    {
      "heading": "that is the case, it will be necessary to spread the read load among",
      "level": 3,
      "page": 158
    },
    {
      "heading": "multiple database servers.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "There are two general approaches to spread the load of a relational",
      "level": 3,
      "page": 158
    },
    {
      "heading": "database server. We can add read replicas or shard the database.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "Many engineers like to talk about sharding during interviews. However,",
      "level": 3,
      "page": 158
    },
    {
      "heading": "it might not be a good fit for the geohash table. Sharding is",
      "level": 3,
      "page": 158
    },
    {
      "heading": "complicated. The sharding logic has to be added to the application",
      "level": 3,
      "page": 158
    },
    {
      "heading": "layer. Sometimes, sharding is the only option. In this case though,",
      "level": 3,
      "page": 158
    },
    {
      "heading": "since everything can fit in the working set of a database server, there is",
      "level": 3,
      "page": 158
    },
    {
      "heading": "no strong technical reason to shard the data among multiple servers.",
      "level": 3,
      "page": 158
    },
    {
      "heading": "157",
      "level": 3,
      "page": 158
    },
    {
      "heading": "A better approach, in this case, is to have a series of read replicas to",
      "level": 3,
      "page": 159
    },
    {
      "heading": "help with the read load. This method is much simpler to develop and",
      "level": 3,
      "page": 159
    },
    {
      "heading": "maintain. Thus, we recommend scaling the geospatial index table",
      "level": 3,
      "page": 159
    },
    {
      "heading": "through replicas.”",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Check out our bestselling system design books.",
      "level": 3,
      "page": 159
    },
    {
      "heading": "Paperback: Amazon Digital: ByteByteGo.",
      "level": 3,
      "page": 159
    },
    {
      "heading": "158",
      "level": 3,
      "page": 159
    }
  ]
}